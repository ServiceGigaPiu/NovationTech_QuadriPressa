[
    {
        "id": "2831664434f14a33",
        "type": "tab",
        "label": "UI Presse",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2260f1f88d7c60bf",
        "type": "tab",
        "label": "UI gestionale",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "69a590bb3eaafea5",
        "type": "tab",
        "label": "Impostazioni",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9922a8114f46702b",
        "type": "tab",
        "label": "Query S7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "467287adb311067b",
        "type": "tab",
        "label": "Query DB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f31d3b30c01f78f",
        "type": "tab",
        "label": "logo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "403f66717aac4ca2",
        "type": "tab",
        "label": "Oth Projs Import",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7da3a158c918645d",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b056d055af2c2fc4",
            "f18f51d80170296a",
            "775ed5336618f048",
            "92d9744aa1e9f22d",
            "6173c68c398eeee3"
        ],
        "x": 1029,
        "y": 649,
        "w": 707,
        "h": 127
    },
    {
        "id": "3df0d3098de49375",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "94a755f368e072f5",
            "8c17cb235692cd83",
            "6ee919044dca5266",
            "dfae6536e47d96c1",
            "f129b1cd09faa95a",
            "c9eb164e0cd29647",
            "0b9259e05173ffcb",
            "363bd50b957a8410",
            "269e8baa56faef78",
            "1f797f8d865e8ebd",
            "b34226be7162078f"
        ],
        "x": 502,
        "y": 2388,
        "w": 592,
        "h": 517
    },
    {
        "id": "43b5ce037e6e5304",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f055a55171647080",
            "d3d062196750b6e0",
            "ae1033ecbfde9a8d",
            "b7818a6107fc7c09",
            "cdfe98ebc6268de8"
        ],
        "x": 669,
        "y": 1129,
        "w": 452,
        "h": 127
    },
    {
        "id": "9c7714b3475b1f2b",
        "type": "group",
        "z": "69a590bb3eaafea5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e3696b26fb98fd8f",
            "c738458e2f0166fd",
            "a79139d6fa8686e2",
            "47787bd5c3f095c5",
            "cd632756435b2754",
            "9aac6231207dd902",
            "27b14ed1b833f3fa",
            "711adcc293c4fe4e",
            "16a57738beed3d92",
            "0c1c5418ae454848",
            "afddbb067e0f39ac",
            "d552f3455898102d",
            "5f0e4cd2a231d950",
            "5d4297555cadcdff",
            "11ffda579a2d7473",
            "11d636077cbd1545",
            "ef9feb95d1f12a3a",
            "13d2e16bdac1b820",
            "7f28962bbf2edd96",
            "323cfea2dd074604",
            "636abe298d8940a7",
            "0c0ba63642b01a89",
            "e517363a9bb66217",
            "649be06b4b880b67",
            "34b28815286f8381",
            "13c1fa98c29f8f81",
            "5f026d8f174deb29",
            "b18d526eca1b0a2a"
        ],
        "x": 182,
        "y": 234,
        "w": 1317,
        "h": 392
    },
    {
        "id": "f6a4cccae63b60ae",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15870b35cd8f1905",
            "e330946719521da8",
            "0f442f62dc9f61be",
            "51c7d7b3525d3ca6",
            "28c5c8c6a8cbdd41",
            "f0d5683c1d5e6fa4",
            "b16cccaa62171b60",
            "3714a803248cefeb",
            "34fe2b838d57bdf8",
            "a72b1c3580f09904",
            "5fae85f555051914"
        ],
        "x": 84,
        "y": 4219,
        "w": 1102,
        "h": 562
    },
    {
        "id": "e2961306402a77aa",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7f11448ec8122f29",
            "0933e76415d3b0d8",
            "a4e2b321a1dc18d5",
            "892a21e16fd8d586",
            "f15ed631a334ae18",
            "2bd07d0a756e3fd5",
            "ecf7ba24682eae0d",
            "70b9c5719558ad66",
            "73bd49c19cb4ea06",
            "78a704a3e466fce3"
        ],
        "x": 84,
        "y": 3574,
        "w": 1072,
        "h": 562
    },
    {
        "id": "ee1fd54ec57a959c",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "88534f4f764fdb99",
            "d8cfb4d7d6f20c04",
            "9da7d4d6e4e7a495",
            "891c7b3250aa152a",
            "e198712935d863ce",
            "0fce669fac8b246c",
            "ceb2f1af58e4621a",
            "6d9e1f49eb50606d"
        ],
        "x": 164,
        "y": 139,
        "w": 777,
        "h": 217
    },
    {
        "id": "3a3a52a5dbc9568a",
        "type": "group",
        "z": "69a590bb3eaafea5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "65449a11e08aa594",
            "5848c5489be4b695",
            "1f1ff5e26b2ddf38"
        ],
        "x": 799,
        "y": 724,
        "w": 292,
        "h": 82
    },
    {
        "id": "408c86b39f332966",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b3472d016caff6c0",
            "ee85a2f48f8b5e02",
            "1268ad479e7f6bab",
            "78c6b35445bf1217",
            "6e645e2849c474eb"
        ],
        "x": 1094,
        "y": 1089,
        "w": 382,
        "h": 122
    },
    {
        "id": "b0737e4c04737b82",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d662599943fbc2bd",
            "df7219d880358536",
            "f0e4c9cb0e39cbf8",
            "b2c3d112c3d0c889",
            "588342109c719d84"
        ],
        "x": 153,
        "y": 409,
        "w": 1739,
        "h": 1398
    },
    {
        "id": "81fdc4e21618ea8e",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b0cd0777fbffd034",
            "9dbec7cb448f90d2",
            "d74f25d28c5fec88",
            "09f63ed09817f46d",
            "79112dc81c4df1e1",
            "3d31803aef992266",
            "85ef1e45805265d5",
            "12d506e3c36cb1e0"
        ],
        "x": 589,
        "y": 4,
        "w": 947,
        "h": 227
    },
    {
        "id": "6aaddccc85e9cc4d",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2d42bfb3b1c1476f",
            "6b6aad74d9d607ed",
            "e83df1da93dc1fed",
            "715b65f58c966686",
            "81faf0db9baee789",
            "bb19e1a6f465c228",
            "1f0e6e97749e1662",
            "016705b24c943eb8",
            "49ec813eb9ef324d",
            "fe70ebeba81a880f",
            "20e1e02ce292a867",
            "6058f3345d37e4dc",
            "e8ab6a202bfe33f6",
            "420d2f3b4f8caa1b",
            "4122cbdcb42e0560",
            "efe20e68d0236d94",
            "12fde84fc27f5e55",
            "7d5d66e4e2b480f4",
            "40be6c6cb5f36f37",
            "d13313512ae49a4a",
            "d3cdc80e459cdf33"
        ],
        "x": 1664,
        "y": 694,
        "w": 1232,
        "h": 307
    },
    {
        "id": "63f089643e332739",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2bd9331f9185534",
            "21bbb7d46384e287",
            "0c753ce1969e7a11",
            "a70fe69b7459b746",
            "2639fa3be4067762"
        ],
        "x": 1418,
        "y": 1254,
        "w": 1559,
        "h": 1368
    },
    {
        "id": "ad333cdc3a9edd51",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6412ab5d90cfce0c",
            "8cc8b8736d1102b3",
            "66b3788924f607a2",
            "a817f30ecf7302d4",
            "17c1ab0431cd8ccc",
            "1a030fa6a72f51d6",
            "1be724ee4d388de3",
            "8b321fcb911b77fd"
        ],
        "x": 566,
        "y": 679,
        "w": 692,
        "h": 242
    },
    {
        "id": "89618de1371e00e8",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2032554750613969",
            "e1a8c1010541c5e9",
            "48f4e0f84560c01c",
            "afa57d1c3ef490ec",
            "de2490372a9afcf4",
            "1adb6c93eb34ea15",
            "16e2194c68ce854b",
            "23908ba29a765ed4"
        ],
        "x": 144,
        "y": 824,
        "w": 837,
        "h": 252
    },
    {
        "id": "6b0818d4a0baca5e",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9f767a4b86454460",
            "7f9c0ab46277a85f",
            "935ab1c92ceb192a",
            "d2554bc4cfd2945f",
            "a0ea58ab11051947",
            "545e9a9385547c1a",
            "ba40bf7df49ff334",
            "1357b3ee16a3cc63",
            "2751f8a9a425be69",
            "85e4a01c096f28a3",
            "92d32ee8e1251cea",
            "23a5a7bba4747615",
            "36bdb368ddeac984",
            "5cd9e3ef9922f088",
            "1fbf3d438abed790",
            "b83d044ecee3faf8",
            "8437a7d22a9f64c3",
            "bcbe8427d40b3549",
            "f1dbd319d32509fd",
            "c6aaa02b97c6aeb4"
        ],
        "x": 1909,
        "y": 1829,
        "w": 1412,
        "h": 282
    },
    {
        "id": "dd28804963c0bc60",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ab40650461f823e3",
            "bd629777c9b54b8f",
            "528adee0da78807c",
            "3950d474263fe0c5",
            "d4f9793e37a6375a",
            "fc5cb067036c4315",
            "ee59f528d39b796f",
            "5ce383fc8f203d80",
            "a188fac48c65b3be",
            "2b1f55ad3aabcc65",
            "416ca37ceaf57e14",
            "856c6c8e9fbd9ec1",
            "a213156032b5e251",
            "164db36128db7462",
            "9dc8240d440f560b",
            "382a6197f96e3cd0",
            "cc59c1ac68580b95",
            "c839a1cea19f06fc",
            "58bc8c7447e48a14",
            "7a21669f3c26b95c",
            "7f7d732440d6aec6",
            "0f6ad999ba80fa0f",
            "bf98577d363cef6f",
            "8943b4549c5df00c"
        ],
        "x": 754,
        "y": 249,
        "w": 1102,
        "h": 392
    },
    {
        "id": "5cf67bd384745bc4",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8e39d745e4965e86",
            "328da80124dc4cee",
            "aae2e97773e8f88e",
            "7514f9f4a7abf65f",
            "cec906aeaff48aaa",
            "c5f8a581b6ade2b8",
            "b5d7a188b9b24e75",
            "9bd5cc5f726fdba6",
            "7f11d8441c0b74c5",
            "f17b11a2e1704a11",
            "66608353d1970e27",
            "4e8e251b1e64ab1d",
            "028f6998b11454ba",
            "f2d3e447871ec449",
            "51b2e2cad1a2f2fd",
            "3276a60dd8f20243",
            "0db2e2cabb48c924",
            "cf6b9c32b50edbc7",
            "76f9fb62b9b2627a",
            "7a0b607aad8df6bd",
            "18c21c6d00a60420"
        ],
        "x": 199,
        "y": 109,
        "w": 822,
        "h": 397
    },
    {
        "id": "d5cd79b677b0e975",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "65cc909c78aef1b6",
            "472cc451c664a073",
            "be9dd324a7bf99e1",
            "4ce40e9bfc8af3d3",
            "89c3dfd6c81b6570",
            "29050b1d36bb0071",
            "6b3cbc7f60f41ee7"
        ],
        "x": 1044,
        "y": 304,
        "w": 437,
        "h": 202
    },
    {
        "id": "9b2d800cf2d90b2c",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a314bd6064611eee",
            "b04c108b95e88fb1",
            "336dc73c123ae887",
            "0fa6bc1ebe9f15e7",
            "c37451428f3dc6ef"
        ],
        "x": 1044,
        "y": 109,
        "w": 427,
        "h": 112
    },
    {
        "id": "d9d7192a2acbd5cc",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0643ba455aee4a09",
            "05a3fa79792c351e",
            "5715f2abae4537f7",
            "4dbae3ed42f23fb0",
            "09cd39e1e8f3eacf",
            "34b18fe79d6813dc",
            "3f48447c71db9446",
            "ca601c76ca5f9b88",
            "5d99e0d71292471b",
            "cc0a07fbf37db494",
            "0f682da50f651c25",
            "79a0714c3c392682",
            "a363c59d7783bf61",
            "95f61ab7d0989272",
            "d5d7a53759c109f7",
            "e08bdfe9e8e5ead3",
            "01be4abb1326a3c7",
            "6a3fef6221e37c8c",
            "ef00dff31b92400a",
            "282f6db66c44f19a"
        ],
        "x": 234,
        "y": 1024,
        "w": 922,
        "h": 558
    },
    {
        "id": "b7be1fbf76a073e2",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5c169683e0be423b",
            "da6f9a7c33d7d7bb",
            "3b516af17cb05a18",
            "0b18ce3fa23e0ba6",
            "02531d3dbb4a7cfa",
            "dca0193f9acb2785",
            "984edf458e7e0e43",
            "003fe15518af93a5",
            "685e7e2495833654",
            "dd90145cd4293ec4",
            "0b2bbbb8fc430d23"
        ],
        "x": 139,
        "y": 55,
        "w": 672,
        "h": 247
    },
    {
        "id": "55a9133a1c5a95d1",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bd208da1fabb3bcf",
            "64bc50015a2673c3",
            "d610c787b889e968",
            "880bd0f57a96abd0",
            "b6da99b42391a973"
        ],
        "x": 199,
        "y": 1924,
        "w": 807,
        "h": 172
    },
    {
        "id": "c3501ed6e9dcfd95",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5209f75572f61192",
            "140f5963e731eeca",
            "e591ac746b349b71"
        ],
        "x": 1079,
        "y": 1954,
        "w": 557,
        "h": 127
    },
    {
        "id": "3d124027146d0e22",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "159695dad087f948",
            "e9ae13ce1d12693b",
            "c2697928034ac49b",
            "d6097ab674846cb2",
            "9abae7b56bbf3c14",
            "c5a7c59c71f4ce52",
            "4b5d16595763d803",
            "e499962fb97d984c",
            "574b8aca29d477bf",
            "3c116b7c2cb7cb16",
            "003ef9d46ea05d16",
            "fe9dc02efe4d771c",
            "084c89cc35050dec",
            "0658a3831dc5d007",
            "4e7faa3f31e7391f",
            "d0677c4a55777811",
            "360f32459e430863",
            "b99d3df5ef07d131",
            "b42e082536c528eb",
            "3562e00f4ed04fb9",
            "51320eb4ac48f6d8",
            "2964739a3908b397",
            "ba830058eb4a546d",
            "13b3c1e935ebdc18",
            "d8a6ec6838de37b8"
        ],
        "x": 169,
        "y": 2149,
        "w": 1503,
        "h": 813
    },
    {
        "id": "c7aff72d1a698bfc",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5442487d3efbd896",
            "1dd11d91909620da",
            "6b77363af9b6dc90",
            "6704700843f92d65",
            "5810fab39fed4fd8",
            "474d4da6f7366e31",
            "1aca12531673be7d",
            "562716c144a89cd7",
            "b4da2ffda24c082f",
            "74dd883b5669e797"
        ],
        "x": 1053,
        "y": 529,
        "w": 673,
        "h": 303
    },
    {
        "id": "2d1b2de20aa0c22b",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7933f8de41037804",
            "9ead91c7d56efac8",
            "1740c7857c8fad72"
        ],
        "x": 1494,
        "y": 184,
        "w": 367,
        "h": 112
    },
    {
        "id": "7ea99ce57f3030da",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cd52247e35a7ae55",
            "844951f9a7ddc5de",
            "3a30aaa183361fa4",
            "6ea16fe6b150b577",
            "6ed432e955eed2af"
        ],
        "x": 899,
        "y": 64,
        "w": 432,
        "h": 112
    },
    {
        "id": "eaa0ab9108712f87",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9b87b406f46f8707",
            "3e0ffd98e82e4dfa",
            "f2c88c2fc92c55ef",
            "7d5e880ea27a4b9b",
            "74b05539a15866cc",
            "e4c7fdbeb50da316",
            "f980de469977c37f"
        ],
        "x": 904,
        "y": 214,
        "w": 437,
        "h": 202
    },
    {
        "id": "cccb0df7921dec2f",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0b39f4fe0d2dcc2d",
            "6c287487702754f2",
            "7e90142dbb2a2111",
            "1aaef86389397dcf",
            "57b9c2d6e11c5cb7",
            "15d6f446b735362b",
            "b7700a2027731da3"
        ],
        "x": 1314,
        "y": 814,
        "w": 342,
        "h": 247
    },
    {
        "id": "ee530506baeb12a5",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7961e440c9162f79",
            "2078a48777b8a78e",
            "308150fe4ddd49bd",
            "8dd292d393357e70",
            "1d1175d31cf3f808",
            "ae31a39870ea59f1",
            "f44f02576d246f6d",
            "82e1195627ed2c7e"
        ],
        "x": 129,
        "y": 679,
        "w": 592,
        "h": 172
    },
    {
        "id": "eed88747a97f2438",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8b2efdddc37de145",
            "aa97ec6ea2ad2c5a",
            "9b390d6ce049bee0",
            "121791a729885846",
            "7ab9bd345cae15a2",
            "c353cfd23d1de19b",
            "7677709fbc77f890",
            "a8fab7783082daec",
            "36069ce4fbc1063c",
            "9c9b0898765128a3",
            "1e36d438702a9054"
        ],
        "x": 264,
        "y": 1984,
        "w": 1132,
        "h": 217
    },
    {
        "id": "20b3e86b59e03511",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "31d694d58ddd3c6c",
            "d4f58c108037d973",
            "6067e973b7dd40eb",
            "535ab9848c1b1849"
        ],
        "x": 173,
        "y": 1274,
        "w": 1419,
        "h": 1058
    },
    {
        "id": "7ca93f3dda4c162e",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90f4c3e098f997c4",
            "da664ace067df2dc",
            "99a287f71f858ba2",
            "d111c07926a908c5",
            "3bea7933e72005a0",
            "9e7d5e610f97bb9a",
            "8dfcb46d23e73d53",
            "9cb2558db9346cae",
            "823428c64dadbb25",
            "0ca3c958633a0c8b",
            "a90666131d7bec15",
            "bd2c16c7828242aa",
            "7169425350ce858f",
            "dc744adc92813c51",
            "c0a4748db936f9cc",
            "791b4bdbf17ea41b",
            "53b729e6e0afd102"
        ],
        "x": 124,
        "y": 2584,
        "w": 1182,
        "h": 971
    },
    {
        "id": "6c4911811d83d44b",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4c8e5c82af533d36",
            "34fe0f797682d4b7",
            "e579796d389a173e",
            "7f049357115c53e0",
            "b841b6eefb58def0",
            "ee7df6ca341a90cc",
            "f3860e59347fd377",
            "8c2c42bc9a8767e9",
            "645349eefb80cd73",
            "7c8bd303c63bc52d",
            "c9fa4cba41fe88a7",
            "5e7a9cab577dae64",
            "fd35a10f22e96156",
            "b41bbdca2293ce38",
            "ddb88f35b436ab0b",
            "5290b04e5e87f604",
            "0754025c4011f690",
            "e57dbeee92a70061"
        ],
        "x": 169,
        "y": 2134,
        "w": 1642,
        "h": 378
    },
    {
        "id": "b2f2e2e832b5442a",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cd87f18d7e95cb97",
            "680672f23f8ab7a6",
            "06682709c6eb938a",
            "c81bc3691698dacf",
            "5f673c8089606c89",
            "c2496432b0f56960",
            "61ea0333115f4695",
            "cad2bd523c7147bc"
        ],
        "x": 559,
        "y": 2209,
        "w": 827,
        "h": 187
    },
    {
        "id": "4c1f6debb662b115",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d1135a719ce25b33",
            "049a64b846b79561",
            "341ce80196f74099",
            "ebd5369b4dcbfbac",
            "1b62f9991875e6c6",
            "fc399081cb744996",
            "c8b7ff221527a71f",
            "82d686b6580e2667",
            "fc0068b4547911b2",
            "4f1ea785c845325b",
            "46364f8db2f241b3",
            "20568c91f483a968",
            "e8b1b96a138f8bcc"
        ],
        "x": 449,
        "y": 2419,
        "w": 907,
        "h": 292
    },
    {
        "id": "968c394fc0447039",
        "type": "group",
        "z": "69a590bb3eaafea5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5ebc37f009a0a667",
            "382aef116df7b43a",
            "19eb625743644893",
            "e20b9892b6ecb65d"
        ],
        "x": 1169,
        "y": 679,
        "w": 432,
        "h": 127
    },
    {
        "id": "6c37c577dff9338f",
        "type": "group",
        "z": "403f66717aac4ca2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8022309e33d1fc35",
            "0d7119851507d372",
            "9261c1f58513ca26"
        ],
        "x": 1963,
        "y": 274,
        "w": 849,
        "h": 558
    },
    {
        "id": "290ebf86bbdaeb68",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf1b96c84eaa65ad",
            "9b8f7a07ca442364",
            "1e2f855fb053fe66",
            "95a4f1fe5241a805",
            "e1dc7f1a029a50c6",
            "25e586867aa60c2c"
        ],
        "x": 124,
        "y": 109,
        "w": 472,
        "h": 127
    },
    {
        "id": "698c783e100b6aaf",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7a4a549b398c4c30",
            "2bbbe4dc6cfeb097",
            "015cd5895c17da64",
            "383ca0e1b93f7efa"
        ],
        "x": 1563,
        "y": 82,
        "w": 1345,
        "h": 886
    },
    {
        "id": "be2329cc51c75d4d",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d32aaeb5cd7e2f2",
            "70fef1bc96643b26",
            "8252ef683323efc8",
            "4214610de81e9454",
            "e425438737e4e626",
            "f26c59c85a7711b6",
            "77d6ecefeba767fa",
            "25d237adfcb28e98",
            "54fa19083c9e9adb",
            "1c5ad2bf76a20224",
            "e5c13a1ba06a5e5d",
            "ea46c32d357f66e0",
            "be1860fd8e6a160d",
            "cb5c1917ab345408",
            "1ab5b51a9a7656bb",
            "2185cdf7bcd4f793",
            "44eba7eff9808b08",
            "b1681e1112ea463d",
            "5c498eb617b7cd7b",
            "c12ed8dd718914c7",
            "a25ecf4289387db8",
            "24a548611bf8feea",
            "77f9671dcbcb15aa",
            "43fe3f8bdc815511",
            "8a5972c9263117fa",
            "8ee79690a1f9edf5",
            "d54be42788f5e0ad",
            "30e6d608b9a93494"
        ],
        "x": 128,
        "y": 343,
        "w": 1322,
        "h": 313
    },
    {
        "id": "1ea69c1647f48773",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "82263c74cf9a6c57",
            "aeab01b884227dc9",
            "4f79875f6a420854",
            "3a54988fd0c01314",
            "87df1b1e91ece4e9",
            "c18915e6d4b4731d",
            "4ffb7ca80ec969e4",
            "5003039f746fe3ee",
            "eb9b19854725f4ad",
            "de28ab8a9c960787"
        ],
        "x": 809,
        "y": 2824,
        "w": 1047,
        "h": 202
    },
    {
        "id": "a5129725214b9c4b",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "32931ffe3521ace0",
            "5a5975a02d21fa13",
            "88065a0964a356bf",
            "a2809ad6eb204129",
            "8a73ab3a3332dd58",
            "c0555e5d11ddfe93",
            "ec7e0a647cb50294",
            "0ef741fba098138d",
            "6be4fabae96d76b0",
            "02e5377733c7b48e",
            "828329db25eacfea",
            "50b598cdeddc09ba",
            "b2cfef37ff094752",
            "a63007c4e618855e",
            "649ced670e4df422",
            "18b9269b91597628",
            "1c7701faa07b0bae",
            "57e142f7eea02841",
            "87f7ce05c7d80d59",
            "a2b555ae2f9f3615"
        ],
        "x": 169,
        "y": 1849,
        "w": 1641,
        "h": 220
    },
    {
        "id": "69aa6256f2c9bd04",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4acd9c73f0879c01",
            "06140d8a4d2499a7",
            "3cb233de10369a68",
            "50db3566aed008c1",
            "b4403a2e7a8fb4d0",
            "eef7b7f36f9758aa",
            "7974e6edac1e59de",
            "5f778b6711825fcf",
            "69b85bc413b570fc",
            "0691b74c98774d64",
            "097a07dd9d2f509c",
            "f50daf0c4e30d4eb",
            "0790d927fe9905d2",
            "cc7de937cce7ee42",
            "32d818c186b9f117",
            "14dd2aa3f24d764e",
            "9bff0c518c4985f6",
            "b9da37c944852df8",
            "09ac4f74f0f13e29",
            "48d36f1939668445",
            "69f09cbf5d042517",
            "31c955cdf3825d25",
            "34bcc63c28f5fc05",
            "dd00bdb14272d3f4",
            "2a1c40448116ee56",
            "358b050e5078acd4",
            "a971e4f93ad39ca7",
            "6c56f15f043c0473",
            "d11b147b7597ffc0",
            "5805f596341cb3a2",
            "668ba0727e5c7e50",
            "bab4bbbe0f4d2916",
            "08680ee51511554d",
            "832d00f09a14ebe3",
            "46e4d5dc11327b5e",
            "06478a7e9de8fde4",
            "9f5d222a3b85d281",
            "e77073d8e6d91811",
            "e82c2d30593592ab",
            "a12a92f26169293f",
            "db707c303280e161",
            "9ef3cf24dbfff175",
            "2d382d60f4f2a299",
            "323019d8daa8a8d2",
            "c05ec4dc2727a82a",
            "0e5aaf62340ff84e"
        ],
        "x": 129,
        "y": 1174,
        "w": 1342,
        "h": 517
    },
    {
        "id": "aad49237e214af20",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf6b343f2f0a8d9a",
            "50128141cfef2e47",
            "0e4b20669b1991d2",
            "717b63f7415240cd",
            "783c3ba87fe4eef9",
            "266b770030d9929a",
            "18cacbe1fdf81b66",
            "f253fb372041d739",
            "4fb42373e4e99b72",
            "b357635eb2dd1a5c",
            "b9418ba4daf6f362",
            "1ce8b143c0fb178f",
            "30715f75ad5b00a7",
            "fe3cce29d5ac8ab5",
            "eb41138075a3f5f1",
            "57aa74da7c79273b",
            "28c2cd2c514a389d",
            "a36ab7c9d6dd6084",
            "50628505893c1002",
            "f703574d360ff934",
            "85a4f8fe1df1e635",
            "c7a6599d3d4e79fd",
            "d609fbc501f3ddc4",
            "ce350560b108ca9c",
            "4b01fb2cb07dd1ea",
            "a93364fc53191afa",
            "be97d0df7a6b19a8",
            "49301850ec6be08d",
            "0ab174afb48ce030",
            "a30ce2169c4078a4",
            "f48b49fff7fd6a15",
            "c8719ba1108367ee",
            "9fe6bae37ffab67b",
            "985a540f960687be",
            "6b72246dcf1d4463",
            "650a926a311fecc6",
            "d9858ba4d7b042ea",
            "6487ebca9b3e322b",
            "94074cc6dbfbc819",
            "5be651135f505d47",
            "867483dc69ed67b2",
            "439c3801ec3fdf28",
            "7d0897afc8cc84bc",
            "bd1771c9ba581e3b",
            "c9320d6ec6d6dbab",
            "a58a25d9e87488a7",
            "b0e08df19ef6675f",
            "9e4171e022a9d561",
            "e06cf1177698ef46"
        ],
        "x": 132,
        "y": 2194,
        "w": 2592,
        "h": 849
    },
    {
        "id": "fdecb8c58742ed8d",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5fa11b5d9436d7ad",
            "1c086dfb06b5e0f8",
            "bb0860c0b6684f6a",
            "f8d17af00d997cbe",
            "7a6dcca68d8d3b55",
            "9080aef5a76447cb",
            "95ef279f0943b019",
            "2c8f67d7b646b461",
            "3a62cbbc637d084b",
            "af5f41dd59499c85",
            "9d90626a90bf1770",
            "346d710e4205f31e",
            "c1edb9b4181c7c95",
            "1910530bfcdc5a1b",
            "9b9d0815ba1aff29",
            "0db3615f2a949d4d",
            "4d42bdcfd779108d",
            "185754c865ee0e5a",
            "f5dff1ca496ff678",
            "e4c66d229abddd27",
            "f6eeca01a55a202f",
            "e3be76a15147658e",
            "51968d61999c8841",
            "eb3143bc7bdf3103",
            "e4977103a672d13a"
        ],
        "x": 133,
        "y": 1760,
        "w": 1727,
        "h": 396
    },
    {
        "id": "4b01377d3d4d53a4",
        "type": "group",
        "z": "467287adb311067b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "27782c61a4ea4768",
            "0817582443744dd8",
            "77964d0808add840",
            "d12c49aea07f941f",
            "ce1368deea4563f9",
            "265716f9bf9ed593",
            "ac9a8008eb04b9ae",
            "f76e1a82444464ae",
            "9a87d6c1f0362405",
            "0e0f2c7869fe450e",
            "3e8d1273ee53e910",
            "a7c99c03b1fd75e8",
            "9a3069d6cf029032",
            "1f5105270c298506"
        ],
        "x": 134,
        "y": 904,
        "w": 1092,
        "h": 202
    },
    {
        "id": "4f6ba307d600dc0a",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d0e6977effe6770a",
            "7265b1919f9e07f4",
            "f06c3b8f566b9d90",
            "9f2bed35aeb95372",
            "7d64bdd2796145d9",
            "9ed67694a15b7476",
            "98d46761319b90c1",
            "f3d1f322fb94736c",
            "1ae5fb7db5b5a628",
            "8268429f1feb024e",
            "48e3507448e85d41",
            "02aba362db627a55",
            "7c5b32b1c627b9db",
            "a619f3ada281e010",
            "79dc657bda4deff8",
            "c2f6799a8cff1f0a",
            "0b11d06ac709bda3"
        ],
        "x": 1639,
        "y": 334,
        "w": 912,
        "h": 292
    },
    {
        "id": "98103edf08989487",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3bb76117f9c818d6",
            "20f8b05e488b35ac",
            "f07a5882094bb355",
            "da49e272d92e10a6",
            "e3ada4f65829a2e4",
            "aa98e911ba741a0f",
            "e6089c8b916b072f",
            "ae12a813b456520f",
            "f53a561750d7f97c",
            "ca69dd8f880ea4b6",
            "6173218e958825e3",
            "e6cae62bf0e0392c",
            "46f9e9cb766e41d7",
            "f5918baacf9781f1",
            "8e9b1b3c07f45a40",
            "b3317967965f13ea",
            "9ea440f4ddc62c52",
            "cd0c540feef6a208",
            "de8c6cd68163eb0b",
            "75841d635b83f19a"
        ],
        "x": 144,
        "y": 334,
        "w": 732,
        "h": 269.5
    },
    {
        "id": "9e4171e022a9d561",
        "type": "group",
        "z": "467287adb311067b",
        "g": "aad49237e214af20",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "136aa432f7fbc0a5",
            "92022a60d79443bd",
            "601a36750da62e85",
            "d14cf79a025d6493",
            "a6a5b2fdccfda163",
            "5549f905eb444cb9",
            "f07f3592aff356d4",
            "bbe8e4b529b1acb3",
            "5eeaa688d6eefa90",
            "787b16cc56aacf5d",
            "a976f8361278473b",
            "c53439603f4e4208"
        ],
        "x": 1448,
        "y": 2807,
        "w": 1250,
        "h": 210
    },
    {
        "id": "7a4a549b398c4c30",
        "type": "group",
        "z": "467287adb311067b",
        "g": "698c783e100b6aaf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d2907618278aa1be",
            "109d34b4b47bf77a",
            "b7a798bcb386fd7b",
            "7120c3da33d92ab6",
            "44e7dfbb15aa708f",
            "8d6a9abd8282b7df",
            "4f448098a8371714",
            "c05cbc581f087383",
            "d07dfb333aed56ce",
            "d2cc8a993cf033bf",
            "05085880d56d9d9b"
        ],
        "x": 2069,
        "y": 108,
        "w": 813,
        "h": 449
    },
    {
        "id": "2bbbe4dc6cfeb097",
        "type": "group",
        "z": "467287adb311067b",
        "g": "698c783e100b6aaf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4e88477a10e3c17e",
            "50feeadd8d078ab3",
            "1eb170112f76f377",
            "445fed90cc9ae04b",
            "aa40c2fd63e42b3c"
        ],
        "x": 1604,
        "y": 184,
        "w": 422,
        "h": 172
    },
    {
        "id": "015cd5895c17da64",
        "type": "group",
        "z": "467287adb311067b",
        "g": "698c783e100b6aaf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c2be07fdd0c16931",
            "9a225e0d13c1f834",
            "a5b60ba381f9b108",
            "15852055c342f46e",
            "56e0b0f75ee7ed61",
            "71950aee80a23402",
            "a9a1170dafd3f770",
            "9099955c40e2fc51",
            "e4476e1da8adfa98",
            "b2df6d219fc4e5d5",
            "40c718410b4aa9ae",
            "263134e42e86e47b",
            "c6691944eaed7410"
        ],
        "x": 1589,
        "y": 594,
        "w": 1267,
        "h": 348
    },
    {
        "id": "d4f58c108037d973",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "20b3e86b59e03511",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eedb33ae969dfe56",
            "cbaef8a2a29aec91",
            "dfe1c2a4c355b6c6",
            "f762db553be7631d",
            "6f3718697fcc12eb",
            "3dc95c5ff11c4c05",
            "8c105fb9ba332d83",
            "74ce7e7ffcdc83ee",
            "74d93a9f486336e2",
            "c7f4104b21b3f0ed",
            "5b32c5c292fcbf85",
            "4e5604e73bdb6a95",
            "83648648772ad6a5",
            "d0b5efc6d9553bf6",
            "9442f133234af130",
            "842f392e7b128179",
            "d9707a1ddd27e51f",
            "d10978b2469ceff3",
            "0a7637311a10d33c"
        ],
        "x": 304,
        "y": 1349,
        "w": 797,
        "h": 337
    },
    {
        "id": "6067e973b7dd40eb",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "20b3e86b59e03511",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d2baf0268056e3cc",
            "9890c53475b90fa6",
            "b04dae3690891cd4",
            "0dd9833c9af4a1b1",
            "0c1159e674965540",
            "198980510e71b358",
            "849493312f6d785b",
            "70b67eb3bb9797ac",
            "cd5be50a30e65857",
            "7446c855e9d2de4f",
            "7e8e0c5575861e5a",
            "3be8e0ee10cd410f",
            "0264fb6e41a9c278"
        ],
        "x": 199,
        "y": 1794,
        "w": 617,
        "h": 367
    },
    {
        "id": "e2bd9331f9185534",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "49e6d3e2af0723a8",
            "d1dbf0ba787aaf87",
            "765edce0c2be3f26",
            "9742879be4c1261c",
            "f496db4601480ad7",
            "17ccce6813bb1513",
            "b6bc7095606ea745",
            "3b86202ba3e33fb7",
            "9d91f8e564086ea1"
        ],
        "x": 1459,
        "y": 1754,
        "w": 1107,
        "h": 172
    },
    {
        "id": "21bbb7d46384e287",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f5de7d1e2efd275",
            "d09af2547970d46b",
            "8c354411f4678925",
            "89b827b78086e83f",
            "b45882cc15a076be",
            "8d4c1528250e9b80",
            "98a76a1f9321a573",
            "7b1590892f6f2cf5",
            "3112342511e963b8",
            "a992bf0170cdc157",
            "f361ef0e22514ae8",
            "3fcc6bd133bdfd43",
            "3f9469575ed20a91"
        ],
        "x": 1444,
        "y": 2314,
        "w": 1202,
        "h": 282
    },
    {
        "id": "0c753ce1969e7a11",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2a9c9c49c94432d9",
            "3b424968240bbd7c",
            "f5cdb10387af4f40",
            "ca74a0de42a788ba",
            "27be6fe227af16cc",
            "214d0a5f9c40f7c2",
            "8c63b0896103090c",
            "d475353a7f70bf2a",
            "479532ec132fba80",
            "9333514511ccbe3e",
            "3e4df8358764c8bf",
            "260b48d27cf6b812",
            "c23689e8b3ce4d15"
        ],
        "x": 1454,
        "y": 1944,
        "w": 992,
        "h": 362
    },
    {
        "id": "3714a803248cefeb",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "21776dac0e1ffac5",
            "1ff2b9c7e81f175d",
            "88e3d23a3ec9d6b0",
            "d27598503a5b31c1"
        ],
        "x": 129,
        "y": 4294,
        "w": 572,
        "h": 232
    },
    {
        "id": "70b9c5719558ad66",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "104a98d5dd421a19",
            "180f9e3f0a29978d",
            "91ec12ac87115cdc",
            "d02b6fbde106437f",
            "b7c7f124e3b0f0a1",
            "c29556974a97beb7",
            "80f896a94945ea32"
        ],
        "x": 129,
        "y": 3649,
        "w": 552,
        "h": 232
    },
    {
        "id": "bd2c16c7828242aa",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "de78cb844f1f00d8",
            "1099581654481fc9",
            "c3130d1334678fc5",
            "a8a3e1a0ebead94e",
            "15c9bf7efe404627",
            "f8d09635394baaab",
            "416b85ed1defe292",
            "e504bebeacdd75dd",
            "e5503f35f4093a0f",
            "eed42b268cafd4c4",
            "8f9a1f49027a6915",
            "a0706941e62ef95e",
            "19565f2c5b691bf7",
            "cd2a3e7d433fb3e9",
            "e24cdeb55a9a6f68",
            "8b2c8f3ad083a6ad",
            "f34fa6789deaa4e6",
            "7452dc34b018aaac",
            "513dc6bfb2e965e7",
            "44ede18dded35aa0",
            "5f3b07e62ec175fb",
            "e77d995be2094fb5",
            "d460bca0cbc1bb94",
            "012df9c64212c06a",
            "22a43313b4628e06",
            "f97cc9e5d5d42826"
        ],
        "x": 154,
        "y": 2659,
        "w": 1107,
        "h": 487
    },
    {
        "id": "df7219d880358536",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f17c0cf3a34f7116",
            "c309c3ce8e145478",
            "0299f7d430301eb2",
            "88cd5d005aff3219",
            "511afb106e173130",
            "db96dc0c6dbe7244",
            "189a3eca588f92de",
            "08b368484118e203",
            "2dd33717ef5a3b58",
            "90168b3986aea043",
            "f3dcda45cbe40ac0",
            "aaf22c351dd47989"
        ],
        "x": 199,
        "y": 1579,
        "w": 1157,
        "h": 202
    },
    {
        "id": "f0e4c9cb0e39cbf8",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bdb744443037f6f5",
            "a1bf31c1f4982c36",
            "230325d8fabed91c",
            "a692f16371e4c1bb",
            "16e8c34d1250478f",
            "f5779068e059be4c",
            "a614abde4e2ab03e",
            "508fc7244c0c3621",
            "59c0617b8993f309",
            "ce8907e4ba09b5c8",
            "a87b7f1bb3d8030d",
            "e8a45a4aa7a22874"
        ],
        "x": 199,
        "y": 1369,
        "w": 1117,
        "h": 202
    },
    {
        "id": "b2c3d112c3d0c889",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ba3c1b4d0beb6c45",
            "c8587dfc70e3e4c5",
            "ed112941d5cdd4e7",
            "db7b2ef040edf421",
            "76eee9a189e80361",
            "80dd2ac395ededd3",
            "8d2ad3a3e8ccf1ed",
            "d54b27e714abae2f",
            "df7a8363391ef95f",
            "3cc72650169eec95",
            "5714ac0a75f5ed73",
            "df13ffa0e29a0380",
            "50a1ab1b5b2e763e",
            "a54e9d7aad7ac38c",
            "b3b14f1983dbbd12",
            "e1d5767241a4aac7",
            "ca8e8ce8b25e297e",
            "bd4440f663b8fa9f",
            "8135493bd3dc4370",
            "c4e6970ead724f13",
            "3b4e5ec5a43dcaa1",
            "9378b1ab33eb5d57",
            "232ea9b29c931a62",
            "be43df984cc12219"
        ],
        "x": 199,
        "y": 979,
        "w": 1227,
        "h": 382
    },
    {
        "id": "588342109c719d84",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fd4bd9bffc26442c",
            "8ae9fd411bc78cb9",
            "2883b97684d92288",
            "5bebd7ba13d78561",
            "5f2272efb6d89c79",
            "ad0438c3cae94f40",
            "25779228f81e2d81",
            "84013a96084c3eeb",
            "599095620e383bff",
            "8b1597117f2c51ff",
            "1e6921618ed22e2b",
            "8ca8bba88825bbbf",
            "0a853593a0797f46",
            "7a96fcc940243435",
            "f3493b385f266d87",
            "60cf7836015914f7",
            "74af4f94b7346e0d",
            "c2ffd0fb87377ef2",
            "92972af8c5f549ce",
            "3c58a737bee31258",
            "90631bdf8d9f93ae",
            "9145dcd7afd55580",
            "972b3c581c06be97",
            "f28eb465e5ea874e",
            "9180b7c3e7a90c3b",
            "d7df7b218b99fd38",
            "dca5936e80add879",
            "bf06b4c02ad79ffa",
            "0abd1e62f1abfb13",
            "6fbb1b9edbfec062",
            "083e54e2bf6c88c0",
            "d9fdf272d0dc630c",
            "9ec25ad7f772805f",
            "94522e8fcaf7234f",
            "bf7a7388b5301e71",
            "ad642f1caae66ae0",
            "7df2d1f5915898bf",
            "bc155cd9a662d3f9",
            "c30ca4565e0d218f",
            "55d2fb1e2f4239c6",
            "3a3d55aed0a8122b",
            "64760c8d5f230ea3",
            "4c8dc23b12353cf6",
            "92ada735b313aded",
            "95a4cfea0458c7b9",
            "a99d6bf6adb7c08b",
            "fad7e78f46d1c5dc",
            "c141b9aa3a1d6d25",
            "12bdad34026ac79d",
            "4ca48d54d222612f",
            "a649d4fecb2ca56a",
            "bd2747c35b481472",
            "6f329cf07ae77335"
        ],
        "x": 179,
        "y": 484,
        "w": 1687,
        "h": 472
    },
    {
        "id": "a70fe69b7459b746",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0ad0e75869583a93",
            "e1d9dc50e8c79a8f",
            "7fefc00461152886",
            "9ceed6fd254ce510",
            "9ca5c05780dc2c19",
            "fa36f3d9a2716a47",
            "6632929cbf8477f9",
            "0a547f33659dd077",
            "642b4cd1857e998b",
            "6a2f84e5a6053bfa",
            "c40dd074760f5ff9",
            "8c5c18cd60513a30",
            "554553d14c4528a1",
            "400413a022ab7c31",
            "419d8fe0bc51a50a",
            "cff57bec7157bef0",
            "5c16a509de896e67",
            "f22eaeab0459ee15",
            "b0f4b6634f190f48",
            "f96b3c5023454e2b",
            "58387c00123218e3",
            "bdec638b99156315",
            "0396c1363191d76c"
        ],
        "x": 1459,
        "y": 1329,
        "w": 1492,
        "h": 382
    },
    {
        "id": "95f61ab7d0989272",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "d9d7192a2acbd5cc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e075684bb4144690",
            "0dbff804eb414d31",
            "f51d8d2491c17cec",
            "0bde5f208c7767e2",
            "842017b9a006b707"
        ],
        "x": 264,
        "y": 1429,
        "w": 627,
        "h": 127
    },
    {
        "id": "b99d3df5ef07d131",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "3d124027146d0e22",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15c00fddf6febcfb",
            "254ee6a725ad9a5f",
            "b960a6e10feb99a7",
            "4bc01b77c9d3bacb",
            "cec5e4982ce4afa1",
            "409cf881f68b9752",
            "ad42f06dcb4eb1eb",
            "40a177edf60c7589",
            "cac1485e416830bb",
            "7ffa0b30b6b91318",
            "e097328f3afd162a",
            "be6cdfc7a6f5fa2c"
        ],
        "x": 204,
        "y": 2704,
        "w": 847,
        "h": 232
    },
    {
        "id": "b42e082536c528eb",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "3d124027146d0e22",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cc89ce1d1a0c4b1d",
            "a74a33a3ec7c7366",
            "58a55157342e41e1",
            "99496b3705baccc9",
            "bb6a645aae24c4e7",
            "27a6d7dd43730e07",
            "ea8a17ead36a0d69",
            "1b4cb03a20cec83f"
        ],
        "x": 734,
        "y": 2329,
        "w": 517,
        "h": 202
    },
    {
        "id": "3562e00f4ed04fb9",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "3d124027146d0e22",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ed66d4d907d05f90",
            "89dbbf6b0d6980b0",
            "804a3b4edd45745d",
            "9521d980da995953",
            "a62e3a70e91d913b"
        ],
        "x": 944,
        "y": 2179,
        "w": 357,
        "h": 142
    },
    {
        "id": "51320eb4ac48f6d8",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "3d124027146d0e22",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6cadbc88a52f084e",
            "7ca2acff2636e9cb",
            "3f3da9a9e6dfd77d",
            "e0a688609374d846",
            "1e1402bb46babf61"
        ],
        "x": 1314,
        "y": 2209,
        "w": 332,
        "h": 172
    },
    {
        "id": "2964739a3908b397",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "3d124027146d0e22",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d95a1a21640bfe9a",
            "c9a057f0fe0f1dcc",
            "688c8387f1d23514",
            "2006d95bd5b9c4fe",
            "cf6a4d15ad2bfcc3",
            "cdde2147dcc706fb",
            "da1b215d36cc79eb",
            "9ee84ad3aca6e773",
            "53965897f5958030"
        ],
        "x": 239,
        "y": 2569,
        "w": 1062,
        "h": 127
    },
    {
        "id": "74dd883b5669e797",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "c7aff72d1a698bfc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4018f9117b219836",
            "175cc861d4fdc430",
            "3b7aeec4f66ea82e",
            "e0acafe1e64fb69d",
            "7f3f720f5ffa9ec8"
        ],
        "x": 1079,
        "y": 634,
        "w": 247,
        "h": 172
    },
    {
        "id": "535ab9848c1b1849",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "20b3e86b59e03511",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3a7d35a0bfec5b49",
            "779b3f472d68db10",
            "102a8a782e378ec9",
            "ab0465821b20c46b",
            "d097048d7107f475",
            "0d5c11a801788b3f",
            "c1ec4a7757bf9a7c",
            "6ea5b0e752187a11",
            "eaf1e8f7876a0705",
            "a3a97f1cf85d0347",
            "335b885cb4328c74",
            "a318163988c8404a",
            "6ce016b7a2323a01",
            "d5d16f84ccc736a2",
            "24041115ac09d2d9",
            "9177fda6dbdb7382",
            "9e5f19ba303d1e7f",
            "226ddfe740d17c77",
            "cf4c3fc572e009ba",
            "1c5aecbefa89f3c9",
            "3490126aea58263e",
            "173599fe139ec4f9",
            "929252a9c840a64d",
            "fe811fa1d8709aae"
        ],
        "x": 894,
        "y": 1714,
        "w": 672,
        "h": 592
    },
    {
        "id": "7169425350ce858f",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f8159ca9b1e06221",
            "54e249861b152273",
            "7e2311ad76cb3c12",
            "d662ae27d28b1d56",
            "81c74a7bb0cf5c3f",
            "8cdecaaac60aee44",
            "9f4265f50b02e400",
            "d4ffa269abe8be44",
            "1bbf54fc1b8056eb"
        ],
        "x": 249,
        "y": 3319,
        "w": 735,
        "h": 210
    },
    {
        "id": "5290b04e5e87f604",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7ddb35334721dacc",
            "fcaae706643cc463",
            "04164ae60e60ec1f",
            "9607aeea9b35b53f",
            "2be7091d11a4cd0b",
            "d344700abc468e2f",
            "9c8b17a9a80fbb64",
            "ca44a98e624a94a4",
            "23eec5e679697f6b",
            "2ebcd64580ac460d",
            "e1eaca87a85fa4ab",
            "17247c321ff841aa"
        ],
        "x": 669,
        "y": 2329,
        "w": 912,
        "h": 157
    },
    {
        "id": "0d7119851507d372",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "6c37c577dff9338f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d650be45c00310ff",
            "c7aba2e30d55588e",
            "7ad872f26ea91270",
            "fd1ac7c0983a1ddf",
            "114253b55d9acd6d",
            "e1a3533d1dac46dd",
            "6a2d379b104394df",
            "3fb2b1056fa192d8",
            "22e383f27f1bc621",
            "8eefeac72777a334"
        ],
        "x": 1989,
        "y": 334,
        "w": 797,
        "h": 187
    },
    {
        "id": "9261c1f58513ca26",
        "type": "group",
        "z": "403f66717aac4ca2",
        "g": "6c37c577dff9338f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "38f55c7bd3e4d7d1",
            "05890cc60d2c4f02",
            "47685d9dadc18c07",
            "b8d6a4deda79af2d",
            "49b3f07c47904b98",
            "62beae31d5aba7c0",
            "ce2e0b1dbe348909",
            "6e8e0a6f4f415f21",
            "8e971b4f90300ea9",
            "f3b5110cbe550b62",
            "e7b7f92ede6d0942",
            "8be2693bfd6a9a13"
        ],
        "x": 1994,
        "y": 544,
        "w": 752,
        "h": 262
    },
    {
        "id": "c05cbc581f087383",
        "type": "group",
        "z": "467287adb311067b",
        "g": "7a4a549b398c4c30",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "de4853ea3edf7e99",
            "aa835b5d1cc02d9b",
            "1e4b67881e90dc1c",
            "fed8c45c180c3512",
            "60ad0ab445a162eb",
            "d577904798f15058"
        ],
        "x": 2104,
        "y": 409,
        "w": 752,
        "h": 122
    },
    {
        "id": "d07dfb333aed56ce",
        "type": "group",
        "z": "467287adb311067b",
        "g": "7a4a549b398c4c30",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ea8b50b73c73f985",
            "afac37083de7623f",
            "43fdf2a5a134b272",
            "dbe405c3c9e4b6f5",
            "4e11b2f45a32813c"
        ],
        "x": 2464,
        "y": 134,
        "w": 272,
        "h": 162
    },
    {
        "id": "c6691944eaed7410",
        "type": "group",
        "z": "467287adb311067b",
        "g": "015cd5895c17da64",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "74f782b5c9918cb1",
            "778d922066b06dc9",
            "1324ee68fb02e80c",
            "64cf467ff1198d60",
            "a30b7f56e3861d49",
            "76167b51b59bab4d",
            "aaacd9c0df2207bc",
            "e60338ef13bfc039"
        ],
        "x": 1844,
        "y": 794,
        "w": 972,
        "h": 122
    },
    {
        "id": "9fa3722a335cb332",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#046797",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "red",
                "default": "#4B7930",
                "baseColor": "#10bafa",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#ce3b3b",
                    "value": "#10bafa",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#10bafa",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0000a0",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#10bafa",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "red",
                "accents": "purple",
                "warn": "deep-purple",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "mouse",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 50,
                "sy": 50,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "533e203349de7f15",
        "type": "ui_tab",
        "name": "Status",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "de425a720011e6e9",
        "type": "ui_group",
        "name": "FIC NF119",
        "tab": "533e203349de7f15",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a5b84c011240052c",
        "type": "ui_tab",
        "name": "Impostazioni",
        "icon": "fa-cogs",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a2dc8e5cbc92778b",
        "type": "ui_group",
        "name": "Indicatore di Temperatura",
        "tab": "a5b84c011240052c",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d6dcf6dea0234745",
        "type": "ui_group",
        "name": "Indicatore di Pressione",
        "tab": "a5b84c011240052c",
        "order": 3,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc04b0c0c2689120",
        "type": "ui_group",
        "d": true,
        "name": "tmpTools",
        "tab": "533e203349de7f15",
        "order": 5,
        "disp": false,
        "width": "25",
        "collapse": false,
        "className": ""
    },
    {
        "id": "836adb2b4d67f4ce",
        "type": "ui_tab",
        "name": "Gestione Ordini",
        "icon": "fa-pencil-square",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "34ec8711cb2e9270",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.101",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "10000",
        "timeout": "3000",
        "name": "PLC prodExc Siemens 1500 ",
        "vartable": [
            {
                "addr": "DB30,X0.0",
                "name": "prod_cycleRun"
            }
        ]
    },
    {
        "id": "77dcdddb4f97461c",
        "type": "ui_group",
        "name": "queueTable",
        "tab": "836adb2b4d67f4ce",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fa784b598becc58c",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.101",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "3000",
        "name": "PLC prodExc Siemens 1500 ",
        "vartable": [
            {
                "addr": "DB30,X0.0",
                "name": "status_cycleActive_run"
            },
            {
                "addr": "DB30,X22.1",
                "name": "status_emergency_activeAlarm"
            },
            {
                "addr": "DB27,REAL0",
                "name": "status_pressPressata_autoclave"
            },
            {
                "addr": "DB28,REAL48",
                "name": "status_setpointPress_sp"
            },
            {
                "addr": "DB28,REAL0",
                "name": "status_temperaturaPianoSuperiore_averageAir"
            },
            {
                "addr": "DB28,REAL48",
                "name": "status_setpointTemp_sp"
            }
        ]
    },
    {
        "id": "b3c076eedf1fd2f8",
        "type": "ui_group",
        "name": "historyTable",
        "tab": "836adb2b4d67f4ce",
        "order": 3,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7f5c766a413446a",
        "type": "ui_group",
        "name": "completedTable",
        "tab": "836adb2b4d67f4ce",
        "order": 2,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff22d246a1b65b24",
        "type": "ui_group",
        "name": "Torri ZBRCETH",
        "tab": "0e782a15597a520f",
        "order": 4,
        "disp": true,
        "width": 11,
        "collapse": true,
        "className": ""
    },
    {
        "id": "0e782a15597a520f",
        "type": "ui_tab",
        "name": "Debug",
        "icon": "fa-bug",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "48311468c344555d",
        "type": "MySQLdatabase",
        "name": "InterVm OvenDB@nodeRedClient",
        "host": "192.168.33.44",
        "port": "3306",
        "db": "oven",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "c40ae317a7eb78f7",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "6b5d298de24e9e0f",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "8a02697eb2153456",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "dee40526c41046ab",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "4e4742392e07cdab",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "d6f03acb1bcf7203",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "a2e96e78ea2cfa5e",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "e18391145ed129b4",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "c6900e7efc8a1197",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 15,
        "width": 2,
        "height": 1
    },
    {
        "id": "e4c72ef2b67bc2b5",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "39f51fcafdb091a5",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "21b4620763c96036",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "a7d7c19c5a1cdb01",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "d0a8fc029674c2b6",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "817d784a03e674b0",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "a924ef1acd9cbb06",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "46165095e13f88ed",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 14,
        "width": 3,
        "height": 1
    },
    {
        "id": "8e9ecd3717b4bd99",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "7891cb7a9adac80d",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 19,
        "width": 6,
        "height": 1
    },
    {
        "id": "db63de8125d253b0",
        "type": "ui_group",
        "d": true,
        "name": "Indicatore di temperatura piano inferiore",
        "tab": "a5b84c011240052c",
        "order": 2,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "0435190387cd545b",
        "type": "ui_spacer",
        "z": "69a590bb3eaafea5",
        "name": "spacer",
        "group": "a2dc8e5cbc92778b",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "b4a7a0abfad9cc0b",
        "type": "ui_spacer",
        "z": "69a590bb3eaafea5",
        "name": "spacer",
        "group": "db63de8125d253b0",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "db5812820948f27e",
        "type": "ui_spacer",
        "z": "69a590bb3eaafea5",
        "name": "spacer",
        "group": "d6dcf6dea0234745",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "bcc9d4a1865e43c4",
        "type": "ui_group",
        "name": "popupGroup",
        "tab": "a5b84c011240052c",
        "order": 4,
        "disp": false,
        "width": "1",
        "collapse": false,
        "className": "hidden"
    },
    {
        "id": "8c268b6bfa27c24a",
        "type": "ui_group",
        "name": "PopupGroup",
        "tab": "836adb2b4d67f4ce",
        "order": 4,
        "disp": false,
        "width": "1",
        "collapse": false,
        "className": "hidden"
    },
    {
        "id": "e4455c60fa1954be",
        "type": "ui_template",
        "z": "2831664434f14a33",
        "group": "dc04b0c0c2689120",
        "name": "gaugesCommonStyle",
        "order": 11,
        "width": 9,
        "height": 1,
        "format": "<style>\n    margin:60px;\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 855,
        "y": 765,
        "wires": [
            []
        ]
    },
    {
        "id": "731ffc0d309290ae",
        "type": "ui_template",
        "z": "2831664434f14a33",
        "d": true,
        "group": "",
        "name": "dbgStylesheet",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style>\n    md-card {\n        border: 2px solid yellow;\n    }\n    div {\n        border: 1px solid purple;\n    }\n    .fitbox{\n        border: 3px solid red;\n    }\n    \n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 860,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "f055a55171647080",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "apply gauges configs",
        "func": "\nif(msg.config){\n    const globalConfig=context.get(\"config\");\n    const config = msg.config;\n\n    //node.warn(\"applying config\");\n   \n    if(config.copyColors){ //copyColors: false | gaugeIdString=cfgIdString\n        let copy = global.get(\"config\")[config.copyColors]\n        config.c1 = copy.c1;\n        config.c2 = copy.c2;\n        config.c3 = copy.c3;\n        \n    }\n    msg.ui_control={\n        min:config.min,\n        max:config.max,\n        options: {  //vedi https://github.com/toorshia/justgage/blob/master/justgage.js\n            min: config.min,\n            max: config.max,\n            humanFriendly: true,\n            noGradient: false,\n            customSectors: { // # settori a scelta\n                percents: true,\n                ranges: [{\n                    color: config.c1, //hexString\n                    lo: 0,    //percentuali inizio-fine settore\n                    hi: 20,\n                }, {\n                    color: config.c2, \n                    lo: 15.1,\n                    hi: 80\n                }, {\n                    color: config.c3,  \n                    lo: 80.1,\n                    hi: 100\n                }]\n\n            }\n        }\n    };\n    delete msg.config;\n    msg.payload=context.get(\"lastPayload\") ?? config.min;\n    //node.warn({ \"config\":config,\"msg\":msg});\n\n    return msg;\n}\nelse{\n    context.set(\"lastPayload\",msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1215,
        "wires": [
            [
                "ae1033ecbfde9a8d"
            ]
        ]
    },
    {
        "id": "d3d062196750b6e0",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "applyGaugesConfigs_in",
        "links": [],
        "x": 710,
        "y": 1215,
        "wires": [
            [
                "f055a55171647080"
            ]
        ]
    },
    {
        "id": "ae1033ecbfde9a8d",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "applyGaugesConfigs_outCall",
        "mode": "return",
        "links": [],
        "x": 1080,
        "y": 1215,
        "wires": []
    },
    {
        "id": "b056d055af2c2fc4",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "come clonare",
        "info": "\n    seleziona nodi\n\n    export come json\n\n    avranno un aspetto simile a\n        {\n            \"id\": \"8688db4c9c99cada\",               \n            \"type\": \"ui_led\",       //nodo semplice\n            \"order\": 3,\n            \"group\": \"f139ce507b5170da\",\n            \"width\": 7,\n            \"height\": 1,\n            \"label\": \"emergenza attiva\",\n            ..stuff..\n            \"x\": 940,\n            \"y\": 420,\n            \"wires\": []\n        },\n        ..stuff..\n        {\n            \"id\": \"f139ce507b5170da\",\n            \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n            \"name\": \"Pressa 2\",\n            \"tab\": \"533e203349de7f15\",\n            \"order\": 2,\n            \"disp\": true,\n            \"width\": 9,\n            \"collapse\": false,\n            \"className\": \"\"\n        },\n        {\n            \"id\": \"533e203349de7f15\",\n            \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n            \"name\": \"Stato Presse\",\n            \"icon\": \"dashboard\",\n            \"order\": 1,\n            \"disabled\": false,\n            \"hidden\": false\n        },\n    CON UTILITY\n        incolla in payload l'export limitato\n        modifica clone utility a piacere (piu info all interno)\n        se ricevi errori: esporta l'intero progetto tramite il menu in alto a destra ed incollalo in \"full export\"    //nota: non tutti i config-nodes vengono inclusi negli export: l'utilty cercherà in fullExport quelli mancanti\n        \n    CON NOTEPAD\n        usa find/replace su notepad per:\n        - trovare l'id del nuovo gruppo\n        - rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n        -fare altre eventuali modifiche\n\n",
        "x": 1240,
        "y": 690,
        "wires": []
    },
    {
        "id": "f18f51d80170296a",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "paste json export here",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "fullExport",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 1175,
        "y": 735,
        "wires": [
            [
                "92d9744aa1e9f22d",
                "6173c68c398eeee3"
            ]
        ]
    },
    {
        "id": "775ed5336618f048",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "copyResultFromConsole",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 735,
        "wires": []
    },
    {
        "id": "92d9744aa1e9f22d",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "7da3a158c918645d",
        "name": "clone utility",
        "func": "\nconst json=msg.payload;\nconst asString=JSON.stringify(json);\n    //case insensitive\nfunction getId(name,source,type){\n    const reg = new RegExp('\"id\":\\\\s*\"(\\\\w+)\",\\\\s+\"type\":\\\\s*\"' + type + '\",\\\\s+\"name\":\\\\s*\"' + name + '\"', 'gmi')\n    let matches=source.match(reg)\n    if(matches)\n        return matches[1];\n    else{\n        node.warn({info:\"\",json:json,asString:asString,reg:reg})\n        node.error(\"id di \"+name+\" non trovato\");\n        return '';\n    }\n}\nfunction getGroupId(name, source=asString) {\n    return getId(name, source, \"ui_group\");\n}\nfunction getTabId(name, source=asString) {\n    return getId(name, source, \"ui_tab\");\n}\nnode.send(getGroupId(\"pressa 2\"));\n\n\nmsg.result=asString.replaceAll(new RegExp('\"group\":(\\\\s*)\"(\\\\w+)\"','ig'),getGroupId(\"pressa 2\"));\nreturn msg;\n\n\n\n/*\nconst reg = new RegExp(\"/ciao/\", \"ig\")\nreturn {res:\"ciao\".match(/ia/ig) };\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 690,
        "wires": [
            [
                "775ed5336618f048"
            ]
        ]
    },
    {
        "id": "6173c68c398eeee3",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "clone utility",
        "func": "\nconst json=msg.payload;\nconst fallback=msg.fullExport;\nconst asString=JSON.stringify(json);\n\n\n\n    //case insensitive\nfunction getId(name,type=null,source=json){\n    name=name.toLowerCase();\n    for(let item of source)\n        if(item.name && item.name.toLowerCase()==name && (!type || type==type))\n            return item.id;\n    for(let item of fallback)\n        if (item.name && item.name.toLowerCase()==name && (!type || type==type))\n            return item.id;\n    node.error(\"id di \"+name+( !type ? \"\" : \" di tipo \"+type)+\" non trovato\");\n    node.warn({name,type,source,fallback});\n    return \"\";\n}\nfunction getGroupId(name, source=json) {\n    return getId(name, \"ui_group\", source);\n}\nfunction getTabId(name, source=json) {\n    return getId(name, \"ui_tab\", source);\n}\n\n\n\nfunction posOf(id,source=json){\n    for(let i =0;i<source.length;i++)\n        if (source[i].id==id)\n            return i;\n    node.error(\"id \"+id+\" non trovato\");\n    return 0;\n}\n\n/* switch groups */\nvar n=0;\nfor(let item of json){\n    if(item.group){\n        item.group = getGroupId(\"completedTable\");\n        n++;\n    }\n}\n/**/\n\n/* * /\nvar n = 0;\nfor (let item of json) {\n    \n}\n/* */\nmsg.res=json;\nmsg.edited=n;\n//node.log([\"clone utility: modificati \"+n+\" attributi\"]);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1375,
        "y": 735,
        "wires": [
            [
                "775ed5336618f048"
            ]
        ]
    },
    {
        "id": "94a755f368e072f5",
        "type": "ui_ui_control",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "",
        "events": "all",
        "x": 948,
        "y": 2864,
        "wires": [
            []
        ]
    },
    {
        "id": "8c17cb235692cd83",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoSup settingsButton",
        "group": "dc04b0c0c2689120",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-cog",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoSup",
        "topicType": "str",
        "x": 658,
        "y": 2474,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "6ee919044dca5266",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoSup graphButton",
        "group": "dc04b0c0c2689120",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-line-chart",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoSup",
        "topicType": "str",
        "x": 648,
        "y": 2429,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "dfae6536e47d96c1",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "toggle All But msg.press",
        "func": "// let newMsg={}\n\n// let groupIdx= Number.parseInt(msg.press.match(/pressa([0-9]+)/i)[1]);\n// groupIdx--;\n\n// getGroupId(tab,id){ (\"statoPresse\",\"Pressa1\")\n\n// }\n\n// const groups=global.get(\"ui\")[];\n\n// let groups=ui.tree[groupIdx]\n\n// for()\n\n// newMsg.payload={\n\n// }\n\n// /*\n// if(msg.payload){\n    \n//     msg={payload:{\n//         \"group\": { \n//             \"hide\": [\"StatoPresse_Pressa2\"], \n//             \"show\": [\"StatoPresse_Pressa1\"]\n//         }\n//     }}\n// }\n// else{\n//     msg = {payload:{\n//         \"group\": {\n//             \"hide\": [\"StatoPresse_Pressa1\"],\n//             \"show\": [\"StatoPresse_Pressa2\"]\n//         }\n//     }}\n\n// }\n// */\n// return msg;\n// /*\n// {\"group\":{\n//     \"hide\":[\"Home_Group_1\",\"Home_Group_2\"],\n//     \"show\":[\"Home_Group_3\"]\n//     }\n// }\n\n// { \n//     \"group\": { \n//         \"hide\": [\"tab_name_group_name_with_underscores\"], \n//         \"show\": [\"reveal_another_group\"],\n//         \"focus\": true,\n//      }\n// }\n// */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 728,
        "y": 2864,
        "wires": [
            [
                "94a755f368e072f5"
            ]
        ]
    },
    {
        "id": "f129b1cd09faa95a",
        "type": "change",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "add pressa1",
        "rules": [
            {
                "t": "set",
                "p": "pressa",
                "pt": "msg",
                "to": "pressa1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 938,
        "y": 2549,
        "wires": [
            [
                "b34226be7162078f"
            ]
        ]
    },
    {
        "id": "c9eb164e0cd29647",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoInf graphButton",
        "group": "dc04b0c0c2689120",
        "order": 5,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-line-chart",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoInf",
        "topicType": "str",
        "x": 648,
        "y": 2534,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "0b9259e05173ffcb",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoInf settingsButton",
        "group": "dc04b0c0c2689120",
        "order": 15,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-cog",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoInf",
        "topicType": "str",
        "x": 648,
        "y": 2579,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "363bd50b957a8410",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "pressPressata settingsButton",
        "group": "dc04b0c0c2689120",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-cog",
        "payload": "settings",
        "payloadType": "str",
        "topic": "pressPressata",
        "topicType": "str",
        "x": 658,
        "y": 2684,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "269e8baa56faef78",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "pressPressata graphButton",
        "group": "dc04b0c0c2689120",
        "order": 13,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-line-chart",
        "payload": "settings",
        "payloadType": "str",
        "topic": "pressPressata",
        "topicType": "str",
        "x": 648,
        "y": 2639,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "1f797f8d865e8ebd",
        "type": "link in",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "link in 7",
        "links": [
            "b34226be7162078f"
        ],
        "x": 588,
        "y": 2864,
        "wires": [
            [
                "dfae6536e47d96c1"
            ]
        ]
    },
    {
        "id": "b34226be7162078f",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "1f797f8d865e8ebd"
        ],
        "x": 1053,
        "y": 2549,
        "wires": []
    },
    {
        "id": "b7818a6107fc7c09",
        "type": "catch",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "",
        "scope": [
            "d9da898c0922e3a7",
            "1ea30b05f8dafd77",
            "a9888cb6c3d71618",
            "74ce7e7ffcdc83ee",
            "74d93a9f486336e2",
            "eedb33ae969dfe56",
            "59d1d69b47306a55",
            "a85291cf3f906e79",
            "04ad8981080a4bc2",
            "e1b5bc2e6c76d5ad",
            "f14a7d390f641315",
            "251f8db3f4f7739c"
        ],
        "uncaught": false,
        "x": 755,
        "y": 1170,
        "wires": [
            [
                "cdfe98ebc6268de8"
            ]
        ]
    },
    {
        "id": "cdfe98ebc6268de8",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "silence timeouts",
        "func": "\n\nif(msg.error){\n    if (msg.error.message !== \"timeout\")\n        node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 925,
        "y": 1170,
        "wires": [
            []
        ]
    },
    {
        "id": "0b39f4fe0d2dcc2d",
        "type": "ui_text_input",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "label": "setGauges",
        "tooltip": "",
        "group": "dc04b0c0c2689120",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1500,
        "y": 900,
        "wires": [
            [
                "15d6f446b735362b"
            ]
        ]
    },
    {
        "id": "1aaef86389397dcf",
        "type": "ui_switch",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "label": "setLeds",
        "tooltip": "",
        "group": "dc04b0c0c2689120",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1500,
        "y": 960,
        "wires": [
            [
                "b7700a2027731da3"
            ]
        ]
    },
    {
        "id": "15d6f446b735362b",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "d42b77739d8fd66f",
            "7423f19ef34f213c",
            "b7253dbf06695f76",
            "d5d16f84ccc736a2",
            "e4d090d0d4d5ad43",
            "a9b01087eed62675",
            "529157ba12f0adfe",
            "1daf29b0a1a85680",
            "cbe29d3cc5fedd24",
            "59b1cd6f5bc9dbd1",
            "f1066a75fb521eb7"
        ],
        "x": 1615,
        "y": 900,
        "wires": []
    },
    {
        "id": "b7700a2027731da3",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "07df8e33e64f6d76",
            "52f2657e8a481171",
            "a318163988c8404a",
            "0f3d48176741f667",
            "edf55c28507377c1",
            "9521a88236715cdd",
            "9a8ed9f8ca633688",
            "a68f69c9cd075166",
            "929ff1413fe086d0",
            "50c404e996c58b6e"
        ],
        "x": 1615,
        "y": 960,
        "wires": []
    },
    {
        "id": "31d694d58ddd3c6c",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "20b3e86b59e03511",
        "name": "Pressa1",
        "info": "",
        "x": 365,
        "y": 1315,
        "wires": []
    },
    {
        "id": "eedb33ae969dfe56",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 850,
        "y": 1450,
        "wires": [
            [
                "6f3718697fcc12eb",
                "3dc95c5ff11c4c05"
            ]
        ]
    },
    {
        "id": "cbaef8a2a29aec91",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1465,
        "wires": [
            [
                "eedb33ae969dfe56"
            ]
        ],
        "l": false
    },
    {
        "id": "dfe1c2a4c355b6c6",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 1645,
        "wires": [
            [
                "eedb33ae969dfe56",
                "74ce7e7ffcdc83ee",
                "74d93a9f486336e2"
            ]
        ],
        "l": false
    },
    {
        "id": "f762db553be7631d",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoSup_in",
        "links": [
            "a8390a294962caf5",
            "a5b87c54f0bc9f52",
            "0c1159e674965540",
            "270fa03be490aaf8"
        ],
        "x": 660,
        "y": 1435,
        "wires": [
            [
                "eedb33ae969dfe56",
                "0a7637311a10d33c"
            ]
        ]
    },
    {
        "id": "6f3718697fcc12eb",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoSup_out",
        "mode": "link",
        "links": [
            "eaf1e8f7876a0705",
            "f66c5e139be26935",
            "a2f9a4d89f31b3fe",
            "0b3137de890b52f4",
            "0cd3823a07c45d08",
            "02b34e28a35b0193"
        ],
        "x": 1025,
        "y": 1450,
        "wires": []
    },
    {
        "id": "3dc95c5ff11c4c05",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "cfg pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 985,
        "y": 1390,
        "wires": []
    },
    {
        "id": "8c105fb9ba332d83",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 555,
        "y": 1525,
        "wires": [
            [
                "cbaef8a2a29aec91",
                "4e5604e73bdb6a95",
                "83648648772ad6a5"
            ]
        ],
        "l": false
    },
    {
        "id": "74ce7e7ffcdc83ee",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 850,
        "y": 1570,
        "wires": [
            [
                "9442f133234af130"
            ]
        ]
    },
    {
        "id": "74d93a9f486336e2",
        "type": "link call",
        "z": "2831664434f14a33",
        "d": true,
        "g": "d4f58c108037d973",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 850,
        "y": 1510,
        "wires": [
            [
                "d9707a1ddd27e51f"
            ]
        ]
    },
    {
        "id": "c7f4104b21b3f0ed",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "onConfigUpdate_in",
        "links": [
            "d552f3455898102d",
            "ec61e58badd4618b",
            "ad42f06dcb4eb1eb",
            "3da3747f40c8f715"
        ],
        "x": 420,
        "y": 1525,
        "wires": [
            [
                "8c105fb9ba332d83"
            ]
        ],
        "l": true
    },
    {
        "id": "5b32c5c292fcbf85",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 1495,
        "wires": [
            [
                "8c105fb9ba332d83"
            ]
        ],
        "l": false
    },
    {
        "id": "4e5604e73bdb6a95",
        "type": "change",
        "z": "2831664434f14a33",
        "d": true,
        "g": "d4f58c108037d973",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1525,
        "wires": [
            [
                "74d93a9f486336e2"
            ]
        ],
        "l": false
    },
    {
        "id": "83648648772ad6a5",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1585,
        "wires": [
            [
                "74ce7e7ffcdc83ee"
            ]
        ],
        "l": false
    },
    {
        "id": "d0b5efc6d9553bf6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_pressPressata_in",
        "links": [
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "198980510e71b358"
        ],
        "x": 660,
        "y": 1555,
        "wires": [
            [
                "74ce7e7ffcdc83ee"
            ]
        ]
    },
    {
        "id": "9442f133234af130",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_pressPressata_out",
        "mode": "link",
        "links": [
            "6ea5b0e752187a11",
            "e4cb9dfb2e461e20",
            "bc58d4f9d5b92da4"
        ],
        "x": 1025,
        "y": 1570,
        "wires": []
    },
    {
        "id": "842f392e7b128179",
        "type": "link in",
        "z": "2831664434f14a33",
        "d": true,
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoInf_in",
        "links": [
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "ceec0c55061a2fd4",
            "ce4da829986578cc"
        ],
        "x": 660,
        "y": 1495,
        "wires": [
            [
                "74d93a9f486336e2"
            ]
        ]
    },
    {
        "id": "d9707a1ddd27e51f",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoInf_out",
        "mode": "link",
        "links": [
            "c2fd121fa884180a",
            "5fd6da994b8f7cd0"
        ],
        "x": 1025,
        "y": 1510,
        "wires": []
    },
    {
        "id": "d10978b2469ceff3",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "config update",
        "info": "\nseleziona nodi\n\nexport come json\n\navranno un aspetto simile a\n    {\n        \"id\": \"8688db4c9c99cada\",               \n        \"type\": \"ui_led\",       //nodo semplice\n        \"order\": 3,\n        \"group\": \"f139ce507b5170da\",\n        \"width\": 7,\n        \"height\": 1,\n        \"label\": \"emergenza attiva\",\n        ..stuff..\n        \"x\": 940,\n        \"y\": 420,\n        \"wires\": []\n    },\n    ..stuff..\n    {\n        \"id\": \"f139ce507b5170da\",\n        \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n        \"name\": \"Pressa 2\",\n        \"tab\": \"533e203349de7f15\",\n        \"order\": 2,\n        \"disp\": true,\n        \"width\": 9,\n        \"collapse\": false,\n        \"className\": \"\"\n    },\n    {\n        \"id\": \"533e203349de7f15\",\n        \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n        \"name\": \"Stato Presse\",\n        \"icon\": \"dashboard\",\n        \"order\": 1,\n        \"disabled\": false,\n        \"hidden\": false\n    },\n\nusa find/replace su notepad per:\n- trovare l'id del nuovo gruppo\n- rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n-fare altre eventuali modifiche",
        "x": 470,
        "y": 1390,
        "wires": []
    },
    {
        "id": "d2baf0268056e3cc",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "sort data by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alife",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emergency",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cycleActive",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoSup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setpointTemp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressPressata",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setpointPress",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idPressa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 540,
        "y": 2000,
        "wires": [
            [
                "b04dae3690891cd4"
            ],
            [
                "0dd9833c9af4a1b1"
            ],
            [
                "7e8e0c5575861e5a"
            ],
            [
                "0c1159e674965540"
            ],
            [
                "3be8e0ee10cd410f"
            ],
            [
                "198980510e71b358"
            ],
            [
                "0264fb6e41a9c278"
            ],
            [],
            [
                "849493312f6d785b"
            ]
        ]
    },
    {
        "id": "9890c53475b90fa6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_mixedDataIn",
        "links": [
            "f496db4601480ad7",
            "48f4e0f84560c01c",
            "258898fad92ce0cb",
            "e858a984e03cc590",
            "b4f724b9014050f9",
            "40055290bca1310c",
            "ba09a3480ecac734",
            "92a5a0ca4441d597"
        ],
        "x": 325,
        "y": 2000,
        "wires": [
            [
                "d2baf0268056e3cc"
            ]
        ],
        "l": true
    },
    {
        "id": "b04dae3690891cd4",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_alifeDataIn_dataIn_out",
        "mode": "link",
        "links": [
            "335b885cb4328c74"
        ],
        "x": 705,
        "y": 1880,
        "wires": []
    },
    {
        "id": "0dd9833c9af4a1b1",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_emergency_dataIn_out",
        "mode": "link",
        "links": [
            "a3a97f1cf85d0347"
        ],
        "x": 705,
        "y": 1910,
        "wires": []
    },
    {
        "id": "0c1159e674965540",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_tempPianoSup_dataIn_out",
        "mode": "link",
        "links": [
            "eaf1e8f7876a0705",
            "f762db553be7631d"
        ],
        "x": 705,
        "y": 1970,
        "wires": []
    },
    {
        "id": "198980510e71b358",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_pressPressata_dataIn_out",
        "mode": "link",
        "links": [
            "6ea5b0e752187a11",
            "d0b5efc6d9553bf6",
            "bc58d4f9d5b92da4"
        ],
        "x": 705,
        "y": 2030,
        "wires": []
    },
    {
        "id": "849493312f6d785b",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "error",
        "func": "node.error({err:\"unknown topic in pressa1_sortData\",topic:msg.topic,msg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "70b67eb3bb9797ac",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "data inputs",
        "info": "",
        "x": 295,
        "y": 1880,
        "wires": []
    },
    {
        "id": "cd5be50a30e65857",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "nota: all data inputs must use this group (read me)",
        "info": "\nall inputs should either use the mixed input \n OR the single link-outs INSIDE THIS GROUP to be properly handled and formatted\n\nfor example all inputs to gauges must also be sent to \"apply gauges config\"",
        "x": 415,
        "y": 1910,
        "wires": []
    },
    {
        "id": "7446c855e9d2de4f",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_alifeDataIn_in",
        "links": [
            "24665e32e9b393a2",
            "f22eaeab0459ee15",
            "666043918c5da376",
            "6177200045e07c4e",
            "92df3ab13e5ca91a",
            "83681412164bda60"
        ],
        "x": 520,
        "y": 1835,
        "wires": [
            [
                "3a7d35a0bfec5b49"
            ]
        ],
        "l": true
    },
    {
        "id": "2032554750613969",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "sort data by press",
        "property": "press",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pressa1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 575,
        "y": 955,
        "wires": [
            [
                "48f4e0f84560c01c"
            ],
            [
                "de2490372a9afcf4"
            ],
            [
                "1adb6c93eb34ea15"
            ],
            [
                "16e2194c68ce854b"
            ],
            [
                "afa57d1c3ef490ec"
            ]
        ]
    },
    {
        "id": "e1a8c1010541c5e9",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "mixed uiPresse mixedDataIn in",
        "links": [],
        "x": 300,
        "y": 955,
        "wires": [
            [
                "2032554750613969"
            ]
        ],
        "l": true
    },
    {
        "id": "48f4e0f84560c01c",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "pressa1_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "9890c53475b90fa6"
        ],
        "x": 845,
        "y": 875,
        "wires": [],
        "l": true
    },
    {
        "id": "afa57d1c3ef490ec",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "error",
        "func": "node.error({ err: \"unknown press in mixed sort\", press: msg.press, msg: msg });\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 775,
        "y": 1035,
        "wires": [
            []
        ]
    },
    {
        "id": "de2490372a9afcf4",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "89618de1371e00e8",
        "name": "pressa2_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "56377c4577552212"
        ],
        "x": 845,
        "y": 915,
        "wires": [],
        "l": true
    },
    {
        "id": "1adb6c93eb34ea15",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "89618de1371e00e8",
        "name": "pressa3_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "f0e330b3f6e390be"
        ],
        "x": 845,
        "y": 955,
        "wires": [],
        "l": true
    },
    {
        "id": "16e2194c68ce854b",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "89618de1371e00e8",
        "name": "pressa4_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "f53db4bd109ccc20"
        ],
        "x": 845,
        "y": 995,
        "wires": [],
        "l": true
    },
    {
        "id": "23908ba29a765ed4",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "sort press for data inputs",
        "info": "",
        "x": 280,
        "y": 865,
        "wires": []
    },
    {
        "id": "3a7d35a0bfec5b49",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "order": 2,
        "group": "de425a720011e6e9",
        "width": 5,
        "height": 1,
        "label": "connessione",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#fdc61e",
                "value": "warn",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "alife",
        "x": 1490,
        "y": 1800,
        "wires": []
    },
    {
        "id": "779b3f472d68db10",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "order": 5,
        "group": "de425a720011e6e9",
        "width": 5,
        "height": 1,
        "label": "emergenza attiva",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#c1bdbd",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "emergenza",
        "x": 1375,
        "y": 1860,
        "wires": []
    },
    {
        "id": "102a8a782e378ec9",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "order": 8,
        "group": "de425a720011e6e9",
        "width": 5,
        "height": 1,
        "label": "ciclo in corso",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#c1bdbd",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "cycleActive",
        "x": 1380,
        "y": 1905,
        "wires": []
    },
    {
        "id": "ab0465821b20c46b",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "",
        "group": "de425a720011e6e9",
        "order": 10,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1375,
        "y": 1995,
        "wires": []
    },
    {
        "id": "d097048d7107f475",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "",
        "group": "de425a720011e6e9",
        "order": 14,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Pressione",
        "label": "units",
        "format": "{{value}} Bar",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1370,
        "y": 2205,
        "wires": []
    },
    {
        "id": "0d5c11a801788b3f",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "UI Pressa1",
        "info": "",
        "x": 1010,
        "y": 1755,
        "wires": []
    },
    {
        "id": "c1ec4a7757bf9a7c",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1245,
        "y": 2205,
        "wires": [
            [
                "d097048d7107f475"
            ]
        ]
    },
    {
        "id": "6ea5b0e752187a11",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_pressPressata_in",
        "links": [
            "9442f133234af130",
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "198980510e71b358"
        ],
        "x": 1070,
        "y": 2205,
        "wires": [
            [
                "c1ec4a7757bf9a7c"
            ]
        ]
    },
    {
        "id": "eaf1e8f7876a0705",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_tempPianoSup_in",
        "links": [
            "6f3718697fcc12eb",
            "a8390a294962caf5",
            "b4b16a9caa54f7d3",
            "a5b87c54f0bc9f52",
            "0c1159e674965540",
            "270fa03be490aaf8"
        ],
        "x": 1070,
        "y": 1995,
        "wires": [
            [
                "9177fda6dbdb7382"
            ]
        ]
    },
    {
        "id": "a3a97f1cf85d0347",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_emergency_in",
        "links": [
            "061b06fe8569e1a9",
            "729dd9d4d28de4c8",
            "8930f22e16dd5e06",
            "0dd9833c9af4a1b1"
        ],
        "x": 1190,
        "y": 1845,
        "wires": [
            [
                "779b3f472d68db10"
            ]
        ]
    },
    {
        "id": "335b885cb4328c74",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_alife_in",
        "links": [
            "b04dae3690891cd4"
        ],
        "x": 1145,
        "y": 1780,
        "wires": [
            [
                "9e5f19ba303d1e7f"
            ]
        ]
    },
    {
        "id": "a318163988c8404a",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "link in 16",
        "links": [
            "b7700a2027731da3"
        ],
        "x": 1055,
        "y": 1860,
        "wires": [
            [
                "6ce016b7a2323a01"
            ]
        ]
    },
    {
        "id": "6ce016b7a2323a01",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1105,
        "y": 1860,
        "wires": [
            [
                "779b3f472d68db10",
                "102a8a782e378ec9"
            ]
        ],
        "l": false
    },
    {
        "id": "d5d16f84ccc736a2",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "link in 17",
        "links": [
            "15d6f446b735362b"
        ],
        "x": 935,
        "y": 2100,
        "wires": [
            [
                "24041115ac09d2d9"
            ]
        ]
    },
    {
        "id": "24041115ac09d2d9",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 2100,
        "wires": [
            [
                "c1ec4a7757bf9a7c",
                "9177fda6dbdb7382"
            ]
        ],
        "l": false
    },
    {
        "id": "9177fda6dbdb7382",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1235,
        "y": 1995,
        "wires": [
            [
                "ab0465821b20c46b"
            ]
        ]
    },
    {
        "id": "9e5f19ba303d1e7f",
        "type": "trigger",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1280,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "5c169683e0be423b",
        "type": "catch",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "catchAll",
        "scope": null,
        "uncaught": true,
        "x": 370,
        "y": 96,
        "wires": [
            [
                "3b516af17cb05a18"
            ]
        ]
    },
    {
        "id": "da6f9a7c33d7d7bb",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "set global utils",
        "func": "//look into start tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let thisClassName = \"utils\";\n/** collection of callbacks like (def) => {//do some work here}.\n *      used to generate stuff that depends on other stuff, or is a function of it */\nlet postGen = []; let afterDef = (func) => { postGen.push(func); return \"toBeSet_afterward\"; };\n//defined object\nlet def = {\n    \"errorBlink\": function (node, last = 1500, text = \"\") {\n        node.status({ fill: \"red\", text: text });\n        setTimeout(() => {\n            node.status({ fill: \"\", text: text });\n        }, 250);\n        setTimeout(() => {\n            node.status({ fill: \"yellow\", text: text });\n        }, 350);\n        setTimeout(() => {\n            node.status({ fill: \"\", text: text });\n        }, last)\n    },\n\n    \"##litEndian2int\": function (a, b) {\n        return a << 16 | b;\n    }, //msg.payload[0] << 16) | msg.payload[1]\n\n    \"isObject\"(v) {\n        return (typeof (v) == \"object\" && !Array.isArray(v) && v !== null)\n    },\n    /**\n     * converts a binary array to a single number\n     */\n    \"bitArrayToInt\"(arr) {\n        var res = 0;\n        for (let i = 0, minLen = Math.min(arr.length, 8 * 8); i < minLen; i++) {\n            if (arr[i])\n                res += Math.pow(2, i);\n        }\n        return res;\n    },\n\n    /** @summary capitalize the first character of a given string\n        * @param {string} word \n        * @return {string} new processed string\n        */\n    \"firstCharUp\"(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    },\n\n    /**\n    * @summary recursively merge two Objects\n        * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n        * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n        * - -res.a===main.a\n        * - -res.c===sec.c\n        * - -res.b!==sec.b2\n        * @param {Object} main \n        * @param {Object} sec \n        */\n    \"mergeRec\": function thisFun(main, sec) {\n        for (let p in sec) {\n            //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n            //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n            //main[p] = sec[p];\n            if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                thisFun(main[p], sec[p]);\n            else\n                main[p] = sec[p];\n        }\n        return main;\n    }.bind(this),\n\n    /** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\n    \"callWhenDef\": function callWhenDef(cb, opts, ...varNames) {\n        //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n        if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n            var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n        //check for opts presence\n        if (typeof (opts) == \"string\")\n            varNames.push(opts);\n        let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n        var tout, intv, tmp;\n        //switch context to the one specified in ctx\n        var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n        //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n        //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n        let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n        //try immediately, before doing any work\n        if (varNames.every(name => store.get(name) !== undefined))\n            return wrappedCb()\n        //set timeout unless false or not specified\n        if (timeout) {\n            tout = setTimeout(() => {\n                clearInterval(intv);\n                errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n            }, timeout);\n        }\n        //set store-checking interval\n        intv = setInterval(() => {\n            if (!varNames.every(name => store.get(name) !== undefined))\n                return\n            clearTimeout(tout);\n            clearInterval(intv);\n            wrappedCb();\n        }, retryDelay)\n    },\n    /** pseudo random string generator\n     */\n    \"randomHexString4\": function () {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); //1.X * 2^16 toString(radix) clipFirst //== 4 characters hex\n    },\n    /** returns an iterator-maker that uses the keys in orderedKeys to access its parent's properties\n         * @param {string[]} orderedKeys\n         * @returns {function} f() -> iterator object.\n         */\n    \"makeKeyIterator\": function (orderedKeys) {\n        return function () {\n            //console.log(\"2# this\",this); this === parent object\n            let keys = orderedKeys, idx = 0;\n            return {\n                next: () => {\n                    //console.log(this, idx, orderedKeys);\n                    return (idx < keys.length ? { value: this[keys[idx++]], done: false } : { done: true });\n                }\n            }\n        }\n    },\n    /** attach a general iterator going through all the enumerable obj's key.\n        * -Not very memory-performant as a redundant key[] array is stored\n        * @param {object} the object to which attach the iterator\n        * @returns {function} the attached iterator\n        */\n    \"generateIteratorFor\": function (obj) {\n        obj[Symbol.iterator] = this.makeKeyIterator(Object.keys(obj));\n        return obj[Symbol.iterator];\n    },\n    \"errorLog\"(...param) { return this.logError(...param); },\n    \"logError\": function thisFun(nodeRef, err) {\n        if (arguments.length != thisFun.length) throw new SyntaxError(`expected ${thisFun.length} arguments, got ${arguments.length}`);\n        var error = (typeof (err) == \"string\" ? { err: err } : err);\n        nodeRef.error(error);\n    },\n\n    /** the first time the property is accessed the value is calculated calling valueGetter() in obj, and the result is stored in propName_cache.\n        * - Subsequent calls will return propName_cache's value.\n        */\n    \"defineCachedProp\": function defineCachedProp(obj, propName, valueGetter) {\n        if (arguments.length != 3) throw new SyntaxError(\"defineCachedGetter() arguments mismatch\");\n        const propName_cache = propName + \"_cache\";\n\n        Object.defineProperty(obj, propName_cache, { value: undefined, writable: true, configurable: true }); //not enumerable\n        Object.defineProperty(obj, propName, {\n            get() {\n                return this[propName_cache] ?? (this[propName_cache] = valueGetter.call(this, this))\n            },\n            set(v) { this[propName_cache] = v },\n            enumerable: true,\n            configurable: true\n        })\n    },\n    \"addAliasTo\": function thisFunc(obj, srcName, aliasName, isEnumerable = false) {\n        const utils = global.get(thisClassName);\n        if ([...arguments].some(arg => utils.isNotSet(arg))) throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\" + item)}`);\n        if(obj[srcName] === undefined) throw new Error(\"trying to alias undefined prop \"+srcName+\". (with \"+aliasName+\"). Wrong argument order..?\");\n        \n        Object.defineProperty(obj, aliasName, {\n            enumerable: false,\n            get() { return this[srcName]; },\n            set(val) { return this[srcName] = val; }\n        });\n        return obj;\n    },\n    \"removeIdx\": (arr, i) => (i == arr.length - 1) ? arr.pop() : arr[i] = arr.pop(),\n    \"removeAllOccurrences\": function (arr, val) {\n        for (let i = 0; i < arr.length; i++)\n            if (arr[i] == val)\n                (i == arr.length - 1) ? arr.pop() : arr[i] = arr.pop();\n    },\n    /* range(5) <=> range(0,5) */\n    \"range\":function range(startAt, endAt = undefined){\n        endAt ?? ([startAt, endAt] = [0, startAt]);\n        if(startAt < endAt)\n            if(startAt == 0)\n                return [...Array(endAt).keys()]; //#MNOTE micro optimization\n            else\n                return [...Array(endAt - startAt).keys()].map(i => i + startAt);\n        else\n            return range(endAt, startAt).reverse(); range(0,5).map(i=>i*2)\n    },\n    /** uses ASCII codes.\n     *  charRange('z') <=> charRange('a','z') */\n    \"charRange\":function charRange(startChar, endChar = undefined){\n        const utils = global.get(thisClassName);\n        endChar ?? ([startChar, endChar] = ['a', startChar]);\n        if(startChar < endChar)\n            return String.fromCharCode(...utils.range(\n                endChar.charCodeAt(0) - startChar.charCodeAt(0),\n                startChar.charCodeAt(0)\n            ));\n        else\n            return charRange(endChar, startChar).reverse();\n    },\n    /** force a number to stay within a certain range, wrapping the value around.\n     *   ex wrap(-2,0,10) <=> 10-2 <=> 8\n    */\n    \"wrapIntAround\": function wrapIntAround(val, start, end) {\n        return val < start ? wrapIntAround(end - (start - val - 1), start, end)\n            : val > end ? wrapIntAround(start + (val - end -1), start, end)\n                : val\n    },\n    \"clone\": function (obj) {\n        return JSON.parse(global.get(thisClassName).safeStringify(obj));\n    },\n\n    \"safeStringify\": function safeStringify(obj, indent) {\n        var cache = [];\n        var cacheKeys = [];\n        return JSON.stringify(obj, (key, value) => {\n            if (typeof value === 'object' && value !== null) { //arrays and null are also \"objects\" //functions are too, but typeof returns \"function\" instead\n                //Duplicate reference found -> discard key / store\n                const idx = cache.indexOf(value)\n                //if duplicate found\n                //return twin's key instead\n                if (idx != -1) //-1 means not present\n                    return \"dupOf_\" + (cacheKeys[idx].toString() ?? \"root\");\n                //else store it\n                else {\n                    cache.push(value);\n                    cacheKeys.push(key);\n                }\n            }\n            return value;\n        }, indent);\n    },\n    /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n         * @param {any} value accepts anything\n         * @returns {boolean}\n         *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n         */\n    \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n        return !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n            // it has a prototype that's also truthy\n            !!(value = Object.getPrototypeOf(value)) &&\n            // which has `null` as parent prototype\n            !Object.getPrototypeOf(value);\n    },\n    /** check if obj is an instance of Date()\n     *      a surpisingly troublesome matter.\n     *      Cannot trust proto-chain cuz global context may not be kept across js-vms (so no instanceof Date either).\n     *      you can: -use duck typing (check for characteristic member existence)\n     *               -use object.toString() == [object date]\n     *               -swear    */\n    \"isDateObject\":function isDateObject(dateObj, beStrict=false, outParam_reasonKey){\n        return !!dateObj?.toLocaleDateString\n            && !!dateObj?.setFullYear\n            //base.toString parse\n            && (!beStrict || (\n                Object.toString.call(dateObj).match(/^\\h*\\[?object\\h*date\\]?\\h*$/i)\n            ));\n    },\n    /** recursively looks up a target object enumerable childrens for properties that would need to be restored after a JSON conversion.\n         * @returns a mask of the original Object containing only the (restored) properties to restore.\n         */\n    \"toRestoreOf\": function toRestoreOf(origin) {\n        //let isPlainObj = global.get(thisClassName).isPlainObj;\n        let needsRecursion = (prop, target) => this.isPlainObj(target?.[prop]) //target is an object and target.prop is an object too\n        let needsRestoration = (prop, target) => {\n            return typeof (target[prop]) === \"function\"// && !node.warn(\"restored \"+prop+\":\"+typeof(target[prop]))\n        }\n        let empty = true; //optimize performance, avoiding recursive Object.keys calls\n        var toRes = {};\n        if (this.isPlainObj(origin))\n            Object.keys(origin).forEach(key => { //#TODO extend to non-enumerables\n                if (origin.toRestore)\n                    toRes[key] = origin.toRestore(origin[key])\n                else if (needsRecursion(key, origin)) {\n                    let tmp = toRestoreOf.call(this, origin[key]);\n                    if (tmp !== null)\n                        toRes[key] = tmp;\n                    // if(Object.keys(toRes[key]).length==0)\n                    //     delete toRes[key];\n                }\n                else if (needsRestoration(key, origin)) { //if is function\n                    toRes[key] = origin[key]\n                } else {\n                    //skip\n                }\n                if (toRes[key])\n                    empty = false;\n                //toRes[key] && node.warn(key+\" set\")\n            })\n        //return Object.keys(target).filter( key => needsRestoration(key, target))\n\n        return empty ? null : toRes;\n    },\n    /** pseudo alias of Object.assign\n        * only ADDS props and keeps the original refs for plain objects.\n        * ex.               {a:4, b:{a1:5, b1:6}},              //target\n        *                        {b:{      b1:\"v\", c1:7}, c:8}  //source\n        *   assign     ->   {a:4, b:{      b1:\"v\", c1:7}, c:8}  //b is a reference to source.b //a1 was lost\n        *   recAssign  ->   {a:4, b:{a1:5, b1:\"v\", c1:7}, c:8}  \n        */\n    \"recAssign\": function recAssign(target, source) {\n        for (let k in source)\n            target[k] = (this.isPlainObj(source[k]) ? recAssign.call(this, target[k] ?? {}, source[k]) : source[k])\n        return target;\n    },\n    /** \n        * \n        */\n    \"inflate\": function (target, source) {\n        let mask = this.toRestoreOf(source) ?? {};\n        return this.recAssign(target, mask);\n    },\n\n    // \"genericInflater\":function inflated(target, origin=this){ //assume target is a mask of origin, meaning origin has AT LEAST all props of target.\n    //     let utils=global.get(thisClassName);\n    //     let hasOwnInflater = targ => targ?.inflated\n    //     let restore = (prop, target, origin) => {\n    //         var tmp;\n    //         if(!(tmp=Object.getOwnPropertyDescriptor(origin, prop).enumerable))\n    //             Object.defineProperty(target,prop,tmp)\n    //         else if(typeof origin[prop]==\"function\")\n    //             target[prop] = origin[prop]\n    //         return target[prop];\n    //     }\n    //     //CHOOSE AN APPROACH: init all missing target vals\n    //     //target can be anything, origin is an object\n    //     //parse origin for all keys that need to be restored on a version of themselves that went throug a JSON.stringify(JSON.parse())\n    //         //set those keys using either an inflater defined by the key or a generic one. Feed the original value to the inflater, or undefined.\n    //     //returns an inflated version of target\n\n    //     let allKeysOf = obj => Object.keys(obj);\n    //     if(utils.isPlainObj(origin))\n    //         for(let k of allKeysOf(origin))\n    //             inflatedTarget[k] = inflated(target?.[k], origin[k])\n\n\n    //     //if is inflatable\n    //     var inflatedTarget={};\n    //     if(utils.isPlainObj(origin)){\n    //         //inflate all keys //#TODO include non-enumerables\n    //         for(let k of origin)\n    //             //use own inflation method //responsible for that key and all its children\n    //             if(hasOwnInflater(origin[k]))\n    //                 inflatedTarget[k] = origin[k].inflated(target?.[k]);\n    //             //recurse\n    //             else if(utils.isPlainObj(origin[k]))\n    //                 inflatedTarget[k] = inflated(target?.[k], origin[k])\n    //             //generic restoration //mutates target[k] if necessary, then returns it\n    //             else\n    //                 inflatedTarget[k] = target?.[k]!==undefined ? restore(k, target, origin)\n    //     }\n    //     else\n    //         return inflatedTarget;\n    // },\n    // /** recursively traverse object children calling the inflate/inflater method on all of them\n    //      * the method is supposed to restore all the properties that would not survive a JSON.parse(JSON.stringify()).\n    //      * restoring a class from its json, or restoring non enumerable properties and functions, for example.\n    //      * NOTE: a parent that implements \"inflate\" or \"inflater\" is responsible for all its children restoration, and \n    //      *       should therefore call the genericInflater() on all properties it chooses to not explicitly handle\n    //      */\n    // \"inflate\"(target){ return global.get(thisClassName).genericInflater.call(this, target) },\n    // \"ggenericInflater\":function inflate(target){\n    //     //looks for and calls inflate() methods for all keys\n    //         //recursing over objects\n    //     for(let k in target){\n    //         //if has inflate method\n    //         if(this && typeof(this[k])==\"object\" && this[k].inflate)\n    //             target[k] = this[k].inflate(target[k]);\n    //         else    //else recurse over object props\n    //             if(typeof(target[k])==\"object\" && this && typeof(this[k])==\"object\")\n    //                 inflate.call(this[k], target[k])\n    //     }\n    //     return target;\n    // },\n\n\n    /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n     *      skip non-function, assign wrapped to their original key\n     *  @param root {Object} the object to parse for functions\n     *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n    \"wrapFunctions\": function wrapFunctions(root, prefix) {\n        prefix ?? node.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n        const isPlainObj = this.isPlainObj;\n        //recursively parse root\n        //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n        let desc;\n        for (let k in root) {\n            if (isPlainObj(root[k]))\n                root[k] = wrapFunctions.call(this, root[k], prefix + `.${k}`);\n            else if (//is a simple function, or an arrow function\n                //value of root[k] has type function\n                typeof (root[k]) == \"function\"\n                //root[k] itself is a function, not the result of it's getter call\n                && (desc = Object.getOwnPropertyDescriptor(root, k)).value !== undefined    // @ts-ignore\n                && !desc.get\n            ) {\n                //wrap in an exception catching function\n                //trace errors back to their source, independently of the caller\n                let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                root[k] = function (...args) {\n                    try {\n                        return cb.call(this, ...args)\n                    } catch (e) {\n                        e.nrStack = (e.nrStack ?? []);\n                        e.nrStack.push({ summ: `at ${k}(${args.join(\", \")}) of ${prefix}`, fName: k, args: args, root: prefix, err: e.message, e: e });\n                        e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                        //node.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                        throw e;\n                    }\n                }\n            }\n        }\n        return root;\n    },\n    \"sortByType\": function sortByType(source, ...types) {\n\n        if (!Array.isArray(source))\n            if (typeof (source) == \"object\") { //assume it's an argument object\n                try {\n                    let tmp = [];\n                    for (var arg of source)\n                        tmp.push(arg);\n                    source = tmp;\n                } catch {\n                    return node.error({ txt: \"global.\" + thisClassName + \".sortByType(): source is not an array\", source: source, args: arguments });\n                }\n            }\n            else\n                return node.error({ txt: \"global.\" + thisClassName + \".sortByType(): source is not an array\", source: source, args: arguments });\n        if (source.length !== types?.length)\n            return node.error({ txt: \"global.\" + thisClassName + \".sortByType(): source lenght doesn't match types[]'s\", source: source, types: types, args: arguments });\n\n        const typedPairs = source.map(item => new Object({ val: item, type: typeof (item) }));\n        let findType = (type) => typedPairs.find(pair => pair.type == type) ?? node.warn({ txt: \"missing param typed \" + type });\n\n        var errors;\n        var ret = [];\n        for (var type of types) {\n            let idx = typedPairs.findIndex(pair => pair.type == type);\n            if (idx < 0) {\n                errors ?? (errors = []);\n                errors.push(type);\n                ret.push(null);\n            }\n            else {\n                ret.push(typedPairs[idx]);\n            }\n        }\n        if (errors)\n            node.error({ txt: `global.${thisClassName}.${sortByType.name}(): missing param typed ${errors.length > 1 ? `[${errors}]` : errors[0]}`, args: arguments });\n        return ret;\n    },\n    /** self explaining */\n    \"isSet\": function thisFun(val) {\n        return val !== null && val !== undefined;\n    },\n    /** php-like name */\n    \"isset\": function alias() { return global.get(thisClassName)[\"isSet\"](...arguments); },\n    /** self explaining */\n    \"isNotSet\": function thisFun(val) {\n        return val === null || val === undefined;\n    },\n    \"notIsset\": function alias() { return global.get(thisClassName)[\"isNotSet\"](...arguments); },\n    /**   scales ms down to a more confortable unit returns it as a string with said unit as suffix. \n        *    int -> scaledFloat+'unit'     ex. '2.1h', '3.2gg', '26.3s' etc\n        */\n    \"msToScaledString\": function msToScaledString(ms) {\n        let units = [\"ms\", \"s\", \"min\", \"h\", \"gg\"];\n        let treshHoldMult = new Array(units.length).fill(2); //in terms of the associated unit // 1 hour == 3600ms -> if treshholdMult==2 then threshHold==3600*2\n        let unitFactors = [1, 1000, 60, 60, 24]; //in terms of the preceding unit //ex. min are 1*1000*60\n        //let getUnitFactor = (idx) => { var ret=0; for(let i=0;i<idx;i++) ret*=factor[i]; return ret; }\n\n        var unitFactor = unitFactors[0];\n        for (let i = 1; i < units.length; i++) {\n            let lastUF = unitFactor;\n            unitFactor *= unitFactors[i];\n            if (Math.abs(ms) < unitFactor * treshHoldMult[i])\n                return (ms / lastUF).toFixed(1) + units[i - 1];\n        }\n        return (ms / unitFactor).toFixed(1) + units[units.length - 1];\n    },\n    /**\n     * non implementato * /\n    \"logToFile\": () => { },s\n    /**\n     * insieme a dbgLevelsMap rappresenta un enum di livelli di debug */\n    \"dbgLevels\": [\"error\", \"warning\", \"debug\", \"verbose\"],\n    \"dbgLevelsMap\": afterDef(def => { var tmp = {}; def.dbgLevels.forEach((name, i) => tmp[name] = i); def.dbgLevelsMap=tmp; }),\n    /*v da testare v* /\n    /**\n     * Stampa un messaggio, con strategie diverse a seconda del tipo e del debugLevel globale.  \n     * Tutti i log dovrebbero passare di qui.  \n     * Gli argomenti vengono riordinati automaticamente. dbgPrint({extra:5},\"messaggio\"), dbgPrint(\"verbose\", \"something happened\") sono tutte chiamate legali\n     * \n     * @param _txt testo messaggio\n     * @param _infoObj campi extra da allegare, oltre a quelli automatici. In caso di clash vince infoObj.\n     * @param _level tipologia messaggio. accetta sia interi che stringhe. gli interi mappano utils.dbgLevels * /\n    \"dbgPrint\": function dbgPrint(_txt, _infoObj, _level) {\n        const utils = global.get(thisClassName);\n        const dbgLevelsMap = utils.dbgLevelsMap;\n\n        //compile-like check: all expected level ids exist\n        utils.assert([\"warning\", \"error\", \"debug\", \"verbose\"].every(key => (utils?.dbgLevelsMap?.[key] ?? null) !== null), \"dpgPrint(): missing one or more expected dbg level\", { exp: [\"warning\", \"error\", \"debug\", \"verbose\"], got: dbgLevelsMap });\n        \n        node.warn({txt:\"args pre sort\",args:{txt:_txt,level:_level,infoObj:_infoObj}})\n\n        //sort arguments, filling them with def vals when necessary\n        let argArray = [_level, _txt, _infoObj];\n        var typedPairs = argArray.map(item => new Object({ val: item, type: typeof (item) }));\n        \n        //pops a value from typedPairs, or returns defVal if nothing matches\n        let popValOfType = (type, defVal) => {\n            var idx = typedPairs.findIndex(pair => pair.type == type);\n            if (idx >= 0) {\n                var val = typedPairs[idx].val;\n                utils.removeIdx(typedPairs, idx);\n                return val;\n            }\n            else\n                return defVal;\n        }\n        var txt = popValOfType(\"string\",\"noTxt\");\n        var level = popValOfType(\"number\", null) ?? popValOfType(\"string\", null) ?? dbgLevelsMap[\"debug\"];\n        var infoObj = popValOfType(\"object\", {});\n\n        if(typeof level == \"string\"){\n            //sort txt and type, as they are both strings\n            let validLiterals = [\"warning\", \"warn\", \"error\", \"err\", \"debug\", \"dbg\", \"console\", \"stdout\"];\n            if (txt.length <= 7 && level.length > 7\n                || validLiterals.includes(txt))\n                [level, txt] = [txt, level];\n            //convert to numeric id\n            switch (level) {\n                case \"warning\":\n                case \"warn\":\n                    level = dbgLevelsMap[\"warning\"];\n                    break;\n                case \"error\":\n                case \"err\":\n                    level = dbgLevelsMap[\"error\"];\n                    break;\n                case \"debug\":\n                case \"dbg\":\n                    level = dbgLevelsMap[\"debug\"];\n                    break;\n                case \"verbose\":\n                case \"verb\":\n                    level = dbgLevelsMap[\"verbose\"];\n                    break;\n                default:\n                    node.error(\"error\", \"unknown log level: \" + level);//, { valid: validLiterals, got: level, args: arguments });\n                    break;\n            }\n        }\n\n        node.warn({ txt: \"args post sort\", args: { txt: txt, level: level, infoObj: infoObj } });\n\n        //define log vars\n        if (true || level <= global.get(\"dbgLevel\")){\n            //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n            var fName;\n            try { fName = dbgPrint.caller; } catch { fName = \"unreadable\" }\n            var nodeJsStack;\n            try { nodeJsStack = new Error().stack } catch { nodeJsStack = \"unreadable\" }\n            //default logging strategy\n            let defEditorLog = (logger) => logger.call(this,\n                utils.mergeRec({\n                    txt: txt,\n                    n: this.node.name,\n                    auto: {\n                        f: fName,\n                        id: this.node.id,\n                        _this: this,\n                        nodeJsStack: nodeJsStack\n                    }\n                }, infoObj));\n            node.warn({ txt: \"context\", ctx: [Object.getOwnPropertyNames(dbgPrint.caller).map(name => name + \":\" + dbgPrint.caller[name]), Object.getOwnPropertyNames(arguments.callee).map(name => name + \":\" + arguments.callee[name])]});\n            //pick logging strategy\n            switch (level) {\n                case dbgLevelsMap[\"warning\"]:\n                    defEditorLog(this.warn);\n                    break;\n                case dbgLevelsMap[\"error\"]:\n                    defEditorLog(this.warn);\n                    break;\n                case dbgLevelsMap[\"debug\"]:\n                    defEditorLog(this.warn);\n                    break;\n                case dbgLevelsMap[\"verbose\"]:\n                    defEditorLog(this.warn);\n                    break;\n                default:\n                    node.error(\"unknown log level \" + level);\n                    break;\n            }\n        }\n\n    },\n\n    \"assert\": function assert(isOk, cb = \"assertion failed\", infoObj = {}) {\n        if (!global.get(\"isDbgMode\"))\n            return true;\n        if (typeof (isOk) == \"function\")\n            isOk = isOk();\n        if (!isOk)\n            if (typeof (cb) == \"function\")\n                // @ts-ignore\n                cb();\n            else\n                node.error(global.get(thisClassName).mergeRec({txt:cb},infoObj));\n                //global.get(thisClassName).dbgPrint(\"error\", cb, infoObj);\n        return isOk\n    },\n\n\n    \"pushGlobalClassInfo\": function pushGlobalClass(_class, name = null) {\n        if (global.get(\"isDbgMode\")) {\n            const utils = global.get(thisClassName);\n\n            name ?? _class.name;\n            utils.assert(typeof (_class) == \"function\", \"arg for class \" + name + \" is not a class\", { _class: _class });\n            utils.assert(typeof (name) == \"string\", \"type mismatch for arg 'name'. expected string, got \" + typeof (name));\n\n            if (!global.get(\"classesCheatSheet\"))\n                global.set(\"classesCheatSheet\", {});\n\n            let cs = global.get(\"classesCheatSheet\");\n            var methods = {};\n            var props = {};\n            for (var propName of Object.getOwnPropertyNames(_class)) {\n                if (typeof (_class[propName] == \"function\"))\n                    methods[propName] = Object.getOwnPropertyDescriptor(_class, propName);\n                else\n                    props[propName] = Object.getOwnPropertyDescriptor(_class, propName);\n            }\n            cs[name] = {\n                \"name\": _class.name,\n                \"methods\": methods,\n                \"props\": props\n            }\n        }\n    }\n    /*^ da testare ^*/\n};\n\npostGen.forEach(cb => cb(def));\n//def.dbgLevelsMap = (() => { var tmp = {}; def.dbgLevels.forEach((name, i) => tmp[name] = i); return tmp; })()\n\n\n\n\ndef.wrapFunctions(def, \"[\" + thisClassName + \"]\");\nglobal.set(thisClassName, def);\nnode.send(def);\nnode.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 171,
        "wires": [
            [
                "02531d3dbb4a7cfa",
                "dca0193f9acb2785"
            ]
        ]
    },
    {
        "id": "3b516af17cb05a18",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "catchAll",
        "func": "if(msg.error){\n    node.error({\"err\":msg.error.message,\"src\":msg.error.source.id,\"n\":msg.error.source.name,\"nrStack\":msg._error?.nrStack,\"full\":msg});\n}\nelse{\n    node.error(msg);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 515,
        "y": 96,
        "wires": [
            [
                "0b2bbbb8fc430d23"
            ]
        ]
    },
    {
        "id": "0b18ce3fa23e0ba6",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "GLOBALI",
        "info": "",
        "x": 225,
        "y": 96,
        "wires": []
    },
    {
        "id": "02531d3dbb4a7cfa",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "def List class as global & utils.list",
        "func": "let utils = msg;\nvar isObject = utils.isObject;\n\n\n/* javascript class cheatsheet\n    //everything is public.\n        #varname == private\n        *method() == private\n        get varname()/get varname:f() = getter for varname\n    //; at each line's end */\nclass List {\n    head;\n    //#lastPrev;\n    //get last(){ return (this.#lastPrev ? this.#lastPrev.next : this.head) }\n    last;\n\n    constructor() {\n        this.head = null;\n        this.last = this.head;\n    }\n\n    static isListNode(val){\n        return (isObject(val) && Object.hasOwnProperty(\"next\"))\n    }\n    static isTwoWayListNode(val){\n        return (List.isListNode(val) && Object.hasOwnProperty(\"prev\"));\n    }\n\n    peekFirst() {\n        return (this.head ? this.head.value : null);\n    }\n\n    popFirst() {\n        let res = this.peekFirst();\n        //remove\n        if (this.head && this.head.next)\n            this.head = this.head.next;\n        return res;\n    }\n\n    peekLast() {\n        return (this.last ? this.last.value : null);\n    }\n\n    popLast() {\n        if (!this.head)\n            return null;\n\n        let res = this.peekLast();\n\n        let n = this.head,\n            n2last = null; //'next-to-last' <=> 'penultimate'\n        while (n.next) {\n            n2last = n;\n            n = n.next;\n        }\n        n2last.next = null;\n        this.last = n2last;\n\n        return res;\n    }\n\n    /** creates a one-way list node with value=val */\n    static newNode(val) {\n        return { value: val, next: null }\n    }\n    /** creates a two-way list node with value=val and empty prev */\n    static newTwoWayNode(val) {\n        return { value: val, prev: null, next: null }\n    }\n    /** creates a two-way list node with value=val and empty prev */\n    static _append(el, listHead){\n        if (listHead) {\n            let node = listHead;\n            while (node.next) {\n                node = node.next;\n            }\n            node.next = (List.isListNode(el) ? el : List.newNode(el))\n            return node.next;\n        }\n        else {\n            return (List.isListNode(el) ? el : List.newNode(el));\n        }\n    }\n    append(el) { List._append(el, this.head) }\n\n    static _appendTwoWay(el, listHead) {\n        if (List.isTwoWayListNode(el))\n            List._append(el, listHead)\n        else\n            List._append(List.newTwoWayNode(el), listHead);\n    }\n\n\n    static _prepend(el, listHead){\n        let newHead  = (List.isListNode(el) ? el : List.newNode(el))\n        newHead.next = listHead;\n        return newHead;\n    }\n    prepend(el) {\n        this.head = List._prepend(el, this.head)\n    }\n\n    static _prependTwoWay(el,listHead){\n        let newHead = List._prepend(el, listHead);\n        if(listHead)\n            listHead.prev = newHead;\n        return newHead;\n    }\n\n    static iterator(listHead) {\n        return {\n            last: listHead,\n            next() {\n                if (this.last === null)\n                    return { done: true }\n                else {\n                    let ret = { value: this.last.value, done: false }\n                    this.last = this.last.next;\n                }\n            },\n            return(){} //optional, do cleanup routine (close db connection and such)\n        }\n    }\n\n    *[Symbol.iterator](){\n        return List.iterator(this.head);\n    }\n\n    toArray(){\n        var ret = [];\n        for(let val of this.head)\n            ret.push(val)\n        return ret;\n    }\n\n    toString(){\n        return this.toArray.toString();\n    }\n\n    values(){\n        return this.toArray();\n    }\n\n}\n\nconst twoWayListClass = class TwoWayList extends List {\n    //head\n    //last\n    constructor(){\n        super();\n    }\n\n    popLast(){\n        if(!this.head)\n            return null;\n        //pop\n        let ret = this.last ? this.last.value : null;\n        this.last = this.last.prev;\n        //pop() on \"lenght == 1\" => last===head===null -> skip\n        if(this.last)\n            this.last.next=null;\n        return ret;\n    }\n\n    static _prepend(...args){List._prependTwoWay.apply(null,args)};\n    prepend(el){\n       this.head = List._prependTwoWay(el);\n    }\n\n    static iterator(listHead){\n        let oneWay = List.iterator(listHead);\n        oneWay.prev = (function () {\n            if (this.last === null)\n                return { done: true }\n            else {\n                // @ts-ignore\n                let ret = { value: this.last.prev.value, done: false }\n                // @ts-ignore\n                this.last = this.last.prev;\n            }\n        }).bind(oneWay)\n        return oneWay;\n    }\n\n    inverseIterator(){\n        let it = TwoWayList.iterator(this.last);\n        [it.next, it.prev] = [it.prev, it.next];\n        return it;\n    }\n\n\n    \n}\n\nglobal.set(\"List\", List.prototype);\nglobal.set(\"TwoWayList\", twoWayListClass);\nglobal.set(\"List_list\", Object.getOwnPropertyNames(List));\n\nutils.List = List; global.set(\"utils\", utils);\n\nutils[\"pushGlobalClass\"] = function pushGlobalClass(_class, name){\n    \n}\n\n\n/* TypeError    \nnode.status({\n    fill: \"green\",\n    text: Object.keys(\n        utils.mergeRec(\n            new List(),\n            new twoWayListClass()\n        )\n    ).join(' & ')\n});\n/**/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 515,
        "y": 216,
        "wires": [
            []
        ]
    },
    {
        "id": "dca0193f9acb2785",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "utils isDefinedEvent",
        "mode": "link",
        "links": [
            "3502536b287b497d",
            "e60ddb3d97dea1f3"
        ],
        "x": 510,
        "y": 171,
        "wires": [],
        "l": true
    },
    {
        "id": "984edf458e7e0e43",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "allMain isDefinedEvent",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/** alternative to using link-nodes on libraries (which requires a ton of overhead and structures)\n * \n*/\nfunction callWhenDef(cb, ...globalNames) {\n    for (let name of globalNames)\n        if (global.get(name) === undefined || global.get(name) === null) {\n            setTimeout(callWhenDef, 300, cb, ...globalNames)\n            return\n        }\n    cb();\n}\n\nconst tout = setTimeout(()=>{\n    node.error(node.name+\" timeout. check node \"+node.id+\" for typos\")\n}, 10000)\ncallWhenDef(function () {\n   node.send({topic:\"isDefinedEvent\", payload:\"allMain\"})\n   clearTimeout(tout);\n}, \"utils\"/*,\"towersControl\",\"towersBitArray\",\"signalCells\"*/)",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 126,
        "wires": [
            [
                "003fe15518af93a5"
            ]
        ]
    },
    {
        "id": "003fe15518af93a5",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "allMain isDefinedEvent out",
        "mode": "link",
        "links": [
            "685e7e2495833654",
            "cc9d5b0b240172ae",
            "8a7b266f172db654",
            "41052036e4260285",
            "5fe604351ee66213",
            "eb51da252c184f8b",
            "ee47774db553980b",
            "2585275db935f830",
            "a92151a1a1d8a360",
            "fb72aaf30f378de5",
            "53f5b685a1ec4809",
            "807fcc0a56e37f7a"
        ],
        "x": 665,
        "y": 126,
        "wires": [],
        "l": true
    },
    {
        "id": "685e7e2495833654",
        "type": "link in",
        "z": "2831664434f14a33",
        "d": true,
        "g": "b7be1fbf76a073e2",
        "name": "allMain isDefinedEvent out",
        "links": [
            "003fe15518af93a5"
        ],
        "x": 769,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "cd52247e35a7ae55",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "7ea99ce57f3030da",
        "name": "shared catchAll",
        "func": "/** shared by common catchAll nodes. Standardize error outputs.\n    * NOTICE: must be called with thisArg, like catchAll.call(this, msg) or the error messages will originate here */\nmsg.sharedErrorOutput = {\n    \"err\": msg.error.message, \n    \"src\": msg.error.source.id, \n    \"n\": msg.error.source.name, \n    \"fName\": msg._error?.nrStack?.[0]?.fName,\n    \"args\": msg._error?.nrStack?.[0]?.args?.join?.() ?? \"missing error stack\",\n    \"nrStack\": msg._error?.nrStack, \n    \"full\": msg\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 135,
        "wires": [
            [
                "3a30aaa183361fa4",
                "6ea16fe6b150b577"
            ]
        ]
    },
    {
        "id": "844951f9a7ddc5de",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "7ea99ce57f3030da",
        "name": "shared catchAll",
        "links": [],
        "x": 940,
        "y": 135,
        "wires": [
            [
                "cd52247e35a7ae55"
            ]
        ]
    },
    {
        "id": "3a30aaa183361fa4",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "7ea99ce57f3030da",
        "name": "shared catchAll",
        "mode": "return",
        "links": [],
        "x": 1165,
        "y": 135,
        "wires": []
    },
    {
        "id": "6ea16fe6b150b577",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "7ea99ce57f3030da",
        "name": "count",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 1235,
        "y": 135,
        "wires": []
    },
    {
        "id": "6ed432e955eed2af",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "7ea99ce57f3030da",
        "name": "set msg.sharedOutput",
        "info": "",
        "x": 1055,
        "y": 105,
        "wires": []
    },
    {
        "id": "9b87b406f46f8707",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "OPEN/CLOSE ALL DBG UI GATES",
        "info": "",
        "x": 1070,
        "y": 255,
        "wires": []
    },
    {
        "id": "3e0ffd98e82e4dfa",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 980,
        "y": 300,
        "wires": [
            [
                "74b05539a15866cc"
            ]
        ],
        "l": false
    },
    {
        "id": "f2c88c2fc92c55ef",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "all dbgGates",
        "mode": "link",
        "links": [
            "b1b26324a134cc2d",
            "7f3f720f5ffa9ec8",
            "ff4d8fe7b4d510fc",
            "c607bf35e3292560",
            "c4aefeb3271ffd19",
            "22eff3ffb0bed0bb",
            "8bb1049bc22ea9df",
            "72fd60d9b9326fd5",
            "f5d7f2274f0bfaab",
            "136fc326302a8398",
            "341b965237eba473",
            "e4b6be72cf200767",
            "999a607a12d7b26c"
        ],
        "x": 1245,
        "y": 330,
        "wires": [],
        "l": true
    },
    {
        "id": "7d5e880ea27a4b9b",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "onStartup 0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1035,
        "y": 375,
        "wires": [
            [
                "f980de469977c37f"
            ]
        ]
    },
    {
        "id": "74b05539a15866cc",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 300,
        "wires": [
            [
                "f2c88c2fc92c55ef"
            ]
        ]
    },
    {
        "id": "e4c7fdbeb50da316",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 985,
        "y": 330,
        "wires": [
            [
                "f980de469977c37f"
            ]
        ],
        "l": false
    },
    {
        "id": "f980de469977c37f",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "eaa0ab9108712f87",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 330,
        "wires": [
            [
                "f2c88c2fc92c55ef"
            ]
        ]
    },
    {
        "id": "57b9c2d6e11c5cb7",
        "type": "ui_switch",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "label": "uiControl",
        "tooltip": "",
        "group": "dc04b0c0c2689120",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1505,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6c287487702754f2",
        "type": "inject",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "0b39f4fe0d2dcc2d"
            ]
        ],
        "l": false
    },
    {
        "id": "7e90142dbb2a2111",
        "type": "comment",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "tmp stuff",
        "info": "",
        "x": 1400,
        "y": 855,
        "wires": []
    },
    {
        "id": "dd90145cd4293ec4",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "set global dbgStuff",
        "func": "//look in onStart",
        "outputs": 1,
        "noerr": 0,
        "initialize": "callWhenDef(\"utils\", () => {\n    const utils = global.get(\"utils\");\n    let lvlName = \"verbose\"\n    let lvl = utils.dbgLevelsMap[lvlName] ?? node.error(\"undefined dbgLevel: \" + lvlName + \" lvlCount:\" + utils.dbgLevelsMap?.length) ?? 0\n    let isDbgMode = true;\n    global.set(\"dbgLevel\", lvl);\n    global.set(\"isDbgMode\", isDbgMode);\n\n    node.status({ fill: isDbgMode ? \"green\" : \"gray\", text: `isDbgMode: ${isDbgMode.toString().toUpperCase()} | level: ${utils.dbgLevels[lvl].toUpperCase()}` });\n})\n\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 255,
        "y": 261,
        "wires": [
            []
        ]
    },
    {
        "id": "7e8e0c5575861e5a",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_cycleActive_dataIn_out",
        "mode": "link",
        "links": [
            "226ddfe740d17c77"
        ],
        "x": 705,
        "y": 1940,
        "wires": []
    },
    {
        "id": "226ddfe740d17c77",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_cycleActive_in",
        "links": [
            "7e8e0c5575861e5a"
        ],
        "x": 1145,
        "y": 1905,
        "wires": [
            [
                "102a8a782e378ec9"
            ]
        ]
    },
    {
        "id": "cf4c3fc572e009ba",
        "type": "ui_text",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "group": "de425a720011e6e9",
        "order": 12,
        "width": 4,
        "height": 1,
        "name": "Setpoint Temp",
        "label": "Setpoint  ",
        "format": "{{msg.payload}} °C",
        "layout": "row-left",
        "className": "SetpointTxt",
        "x": 1390,
        "y": 2060,
        "wires": []
    },
    {
        "id": "1c5aecbefa89f3c9",
        "type": "ui_text",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "group": "de425a720011e6e9",
        "order": 16,
        "width": 4,
        "height": 1,
        "name": "Setpoint Press",
        "label": "Setpoint  ",
        "format": "{{msg.payload}} Bar",
        "layout": "row-left",
        "className": "SetpointTxt",
        "x": 1380,
        "y": 2265,
        "wires": []
    },
    {
        "id": "3490126aea58263e",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1235,
        "y": 2060,
        "wires": [
            [
                "cf4c3fc572e009ba"
            ]
        ]
    },
    {
        "id": "173599fe139ec4f9",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_setPointTemp_in",
        "links": [
            "3be8e0ee10cd410f"
        ],
        "x": 1140,
        "y": 2060,
        "wires": [
            [
                "3490126aea58263e"
            ]
        ]
    },
    {
        "id": "929252a9c840a64d",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "pressa1_setPointPress_in",
        "links": [
            "4520eaa7bb0621d3",
            "0264fb6e41a9c278"
        ],
        "x": 1135,
        "y": 2265,
        "wires": [
            [
                "fe811fa1d8709aae"
            ]
        ]
    },
    {
        "id": "fe811fa1d8709aae",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "535ab9848c1b1849",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 2265,
        "wires": [
            [
                "1c5aecbefa89f3c9"
            ]
        ]
    },
    {
        "id": "3be8e0ee10cd410f",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_setPointTemp_out",
        "mode": "link",
        "links": [
            "173599fe139ec4f9"
        ],
        "x": 705,
        "y": 2000,
        "wires": []
    },
    {
        "id": "0264fb6e41a9c278",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_setPointPress_out",
        "mode": "link",
        "links": [
            "929252a9c840a64d"
        ],
        "x": 705,
        "y": 2060,
        "wires": []
    },
    {
        "id": "0a7637311a10d33c",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "gauge input pressa1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1395,
        "wires": []
    },
    {
        "id": "3bb76117f9c818d6",
        "type": "file",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "",
        "filename": ".\\logs\\allUncaugthErrors.log",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 565,
        "y": 480,
        "wires": [
            [
                "75841d635b83f19a"
            ]
        ]
    },
    {
        "id": "20f8b05e488b35ac",
        "type": "json",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 550,
        "y": 450,
        "wires": [
            [
                "e6cae62bf0e0392c"
            ]
        ],
        "l": false
    },
    {
        "id": "0b2bbbb8fc430d23",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "log uncaught out",
        "mode": "link",
        "links": [
            "f07a5882094bb355",
            "f06c3b8f566b9d90"
        ],
        "x": 666,
        "y": 96,
        "wires": [],
        "l": true
    },
    {
        "id": "f07a5882094bb355",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "log uncaught in",
        "links": [
            "0b2bbbb8fc430d23",
            "6d9e1f49eb50606d",
            "b18d526eca1b0a2a",
            "12d506e3c36cb1e0",
            "07f96e7c3e05f85a",
            "d54be42788f5e0ad"
        ],
        "x": 300,
        "y": 450,
        "wires": [
            [
                "ae12a813b456520f"
            ]
        ],
        "l": true
    },
    {
        "id": "da49e272d92e10a6",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "GLOBAL ERR LOG v1.2",
        "info": "",
        "x": 338,
        "y": 377,
        "wires": []
    },
    {
        "id": "e3ada4f65829a2e4",
        "type": "catch",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "",
        "scope": [
            "3bb76117f9c818d6",
            "20f8b05e488b35ac",
            "28b5bab842c22e19",
            "f07a5882094bb355"
        ],
        "uncaught": false,
        "x": 580,
        "y": 405,
        "wires": [
            [
                "aa98e911ba741a0f"
            ]
        ]
    },
    {
        "id": "aa98e911ba741a0f",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "err",
        "func": "//caution! do not throw to catch nodes from here, or you ll have an infinite loop\nif (msg.error) {\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"nrStack\": msg._error?.nrStack, \"full\": msg });\n}\nelse {\n    node.error(msg);\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 695,
        "y": 405,
        "wires": []
    },
    {
        "id": "e6089c8b916b072f",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "prevent infinite loops",
        "info": "throw error > write to log > throws again..",
        "x": 635,
        "y": 375,
        "wires": []
    },
    {
        "id": "ae12a813b456520f",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "format err",
        "func": "const utils = global.get(\"utils\");\nmsg.error ?? (msg.error = {});\nmsg.error.printTime = Date.now();\nif(utils){\n    msg.error.printTimeString = new Date().toLocaleString('it-IT');\n    msg.error.printTime_scaled = utils.msToScaledString(msg.error.printTime - context.get(\"nodeStartTime\"));\n}\nreturn {\n    \"payload\":msg\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"nodeStartTime\",Date.now());\n\nnode.send({\"payload\":{\n    \"#\":\"\",\n    \"##\": \"\",\n    txt: `[${new Date().toLocaleString('it-IT')}] --- SERVER STARTUP ---`,\n    \"@@\": \"\",\n    \"@\": \"\"\n}});",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 450,
        "wires": [
            [
                "20f8b05e488b35ac"
            ]
        ]
    },
    {
        "id": "d0e6977effe6770a",
        "type": "file",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "",
        "filename": ".\\logs\\allUncaugthErrors.log",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2265,
        "y": 510,
        "wires": [
            []
        ]
    },
    {
        "id": "7265b1919f9e07f4",
        "type": "json",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2115,
        "y": 510,
        "wires": [
            [
                "d0e6977effe6770a"
            ]
        ],
        "l": false
    },
    {
        "id": "f06c3b8f566b9d90",
        "type": "link in",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "log uncaught in",
        "links": [
            "0b2bbbb8fc430d23",
            "6d9e1f49eb50606d",
            "b18d526eca1b0a2a",
            "12d506e3c36cb1e0",
            "07f96e7c3e05f85a",
            "d54be42788f5e0ad"
        ],
        "x": 1745,
        "y": 510,
        "wires": [
            [
                "f3d1f322fb94736c"
            ]
        ],
        "l": true
    },
    {
        "id": "9f2bed35aeb95372",
        "type": "comment",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "GLOBAL ERR LOG v2.0",
        "info": "",
        "x": 1783,
        "y": 377,
        "wires": []
    },
    {
        "id": "7d64bdd2796145d9",
        "type": "catch",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "",
        "scope": [
            "d0e6977effe6770a",
            "7265b1919f9e07f4",
            "28b5bab842c22e19",
            "f06c3b8f566b9d90"
        ],
        "uncaught": false,
        "x": 1920,
        "y": 585,
        "wires": [
            [
                "9ed67694a15b7476"
            ]
        ]
    },
    {
        "id": "9ed67694a15b7476",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "err",
        "func": "//caution! do not throw to catch nodes from here, or you ll have an infinite loop\nif (msg.error) {\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"nrStack\": msg._error?.nrStack, \"full\": msg });\n}\nelse {\n    node.error(msg);\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 585,
        "wires": []
    },
    {
        "id": "98d46761319b90c1",
        "type": "comment",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "prevent infinite loops",
        "info": "throw error > write to log > throws again..",
        "x": 1760,
        "y": 585,
        "wires": []
    },
    {
        "id": "f3d1f322fb94736c",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "format err",
        "func": "const utils = global.get(\"utils\");\nmsg.error ?? (msg.error = {});\nmsg.error.printTime = Date.now();\nif(utils){\n    msg.error.printTimeString = new Date().toLocaleString('it-IT');\n    msg.error.printTime_scaled = utils.msToScaledString(msg.error.printTime - context.get(\"nodeStartTime\"));\n}\nreturn {\n    \"payload\":msg\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"nodeStartTime\",Date.now());\n\nnode.send({\"payload\":{\n    txt: `\n\n\n    \n    [${new Date().toLocaleString('it-IT')}] --- SERVER STARTUP ---\n    \n    \n    \n    `\n}});",
        "finalize": "",
        "libs": [],
        "x": 1905,
        "y": 510,
        "wires": [
            [
                "1ae5fb7db5b5a628"
            ]
        ]
    },
    {
        "id": "1ae5fb7db5b5a628",
        "type": "q-gate",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "hold",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 2055,
        "y": 510,
        "wires": [
            [
                "7265b1919f9e07f4"
            ]
        ],
        "l": false
    },
    {
        "id": "8268429f1feb024e",
        "type": "inject",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "onStartup 1s",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1760,
        "y": 420,
        "wires": [
            [
                "02aba362db627a55"
            ]
        ]
    },
    {
        "id": "48e3507448e85d41",
        "type": "change",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1910,
        "y": 480,
        "wires": [
            [
                "1ae5fb7db5b5a628"
            ]
        ]
    },
    {
        "id": "02aba362db627a55",
        "type": "exec",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "command": "C:\\Users\\Admin\\.node-red\\app\\logs\\allUncaugthErrors_rollup.bat",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "30",
        "winHide": false,
        "oldrc": false,
        "name": "run allUncaugthErrors_rollup.bat",
        "x": 1990,
        "y": 420,
        "wires": [
            [
                "0b11d06ac709bda3"
            ],
            [
                "0b11d06ac709bda3"
            ],
            [
                "7c5b32b1c627b9db",
                "79dc657bda4deff8"
            ]
        ]
    },
    {
        "id": "7c5b32b1c627b9db",
        "type": "debug",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "LOG ROLLUP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2245,
        "y": 405,
        "wires": []
    },
    {
        "id": "a619f3ada281e010",
        "type": "file",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "",
        "filename": ".\\logs\\allUncaugthErrors.log",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2405,
        "y": 435,
        "wires": [
            [
                "48e3507448e85d41"
            ]
        ]
    },
    {
        "id": "79dc657bda4deff8",
        "type": "change",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "empty",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2215,
        "y": 435,
        "wires": [
            [
                "a619f3ada281e010"
            ]
        ]
    },
    {
        "id": "c2f6799a8cff1f0a",
        "type": "inject",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1800,
        "y": 480,
        "wires": [
            [
                "48e3507448e85d41"
            ]
        ],
        "l": false
    },
    {
        "id": "0b11d06ac709bda3",
        "type": "debug",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4f6ba307d600dc0a",
        "name": "LOG ROLLUP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2245,
        "y": 375,
        "wires": []
    },
    {
        "id": "f53a561750d7f97c",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "14gg",
        "props": [],
        "repeat": "1209600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 255,
        "y": 555,
        "wires": [
            [
                "46f9e9cb766e41d7"
            ]
        ]
    },
    {
        "id": "ca69dd8f880ea4b6",
        "type": "exec",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "command": "del",
        "addpay": "",
        "append": "\"C:\\Users\\Admin\\.node-red\\app\\logs\\allUncaugthErrors.log\"",
        "useSpawn": "false",
        "timer": "30",
        "winHide": true,
        "oldrc": false,
        "name": "delete log",
        "x": 570,
        "y": 555,
        "wires": [
            [
                "6173218e958825e3",
                "9ea440f4ddc62c52"
            ],
            [
                "6173218e958825e3"
            ],
            [
                "6173218e958825e3"
            ]
        ]
    },
    {
        "id": "6173218e958825e3",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "LOG ROLLUP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 745,
        "y": 555,
        "wires": []
    },
    {
        "id": "e6cae62bf0e0392c",
        "type": "q-gate",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "hold",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 390,
        "y": 480,
        "wires": [
            [
                "3bb76117f9c818d6"
            ]
        ],
        "l": false
    },
    {
        "id": "46f9e9cb766e41d7",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 555,
        "wires": [
            [
                "e6cae62bf0e0392c",
                "de8c6cd68163eb0b"
            ]
        ]
    },
    {
        "id": "f5918baacf9781f1",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 285,
        "y": 480,
        "wires": [
            [
                "e6cae62bf0e0392c"
            ]
        ]
    },
    {
        "id": "8e9b1b3c07f45a40",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 205,
        "y": 480,
        "wires": [
            [
                "f5918baacf9781f1"
            ]
        ],
        "l": false
    },
    {
        "id": "b3317967965f13ea",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "14gg: queue > delete > open",
        "info": "throw error > write to log > throws again..",
        "x": 370,
        "y": 525,
        "wires": []
    },
    {
        "id": "9ea440f4ddc62c52",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 525,
        "wires": [
            [
                "e6cae62bf0e0392c"
            ]
        ]
    },
    {
        "id": "cd0c540feef6a208",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 585,
        "y": 525,
        "wires": [
            [
                "9ea440f4ddc62c52"
            ]
        ],
        "l": false
    },
    {
        "id": "de8c6cd68163eb0b",
        "type": "delay",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 475,
        "y": 555,
        "wires": [
            [
                "ca69dd8f880ea4b6"
            ]
        ],
        "l": false
    },
    {
        "id": "75841d635b83f19a",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "98103edf08989487",
        "name": "LOGGED",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 480,
        "wires": []
    },
    {
        "id": "88534f4f764fdb99",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "catchAll",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"src\":msg.error.source.id,\"n\":msg.error.source.name,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 855,
        "y": 195,
        "wires": [
            [
                "6d9e1f49eb50606d"
            ]
        ]
    },
    {
        "id": "d8cfb4d7d6f20c04",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 695,
        "y": 195,
        "wires": [
            [
                "88534f4f764fdb99"
            ]
        ]
    },
    {
        "id": "9da7d4d6e4e7a495",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "set flow.tabUtils",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nfunction twoDigit(x) {\n    if (typeof x == \"string\")\n        x = parseInt(x);\n    return x < 10 ? '0' + x : x;\n}\n\ncallWhenDef(\"utils\",()=>{\n    const utils = global.get(\"utils\");\n    \n    const thisClassName = \"tabUtils\";\n    const def = {\n        /**\n         * returns the index of the row with rowId==rowId in the provided table, -1 if not found\n         * \n         * @param {number} rowId name of the button to affect, like \"sendToPressa1\"\n         * @param {object} tableRef reference to the row to check, must have a fieldName button.\n         * @return {number} the index of the row with rowId==rowId in the provided table, -1 if not found\n        */\n        posOf(rowId, tableRef) {\n            if (rowId < tableRef.length && tableRef[rowId].rowId == rowId)\n                return rowId;\n            for (let i = 0; i < tableRef.length; i++)\n                if (tableRef[i].rowId == rowId)\n                    return i;\n            return -1; //not found\n        },\n\n        hasRow(rowId, tableRef) {\n            return this.posOf(rowId, tableRef) >= 0;\n        },\n\n        deleteRowId(rowId, tableRef) {\n            let pos = this.posOf(rowId, tableRef);\n            if (pos >= 0) {\n                this.deleteRow(pos, tableRef);\n                return true;\n            }\n            else\n                return false\n        },\n\n        deleteRow(rowIdx, tableRef) {\n            for (let i = rowIdx; i < tableRef.length - 1; i++) {\n                tableRef[i] = tableRef[i + 1];\n            }\n            tableRef.pop();\n            return true;\n        },\n        newRowId(table) {\n            //if table empty assign first \n            if (table.length == 0)\n                return 0; //first rowId\n            //if rowId equals its table's index -> use shortcut\n            if (table[table.length - 1].rowId == table.length - 1)\n                return table.length;\n            //else\n            //load all possible indexes\n            var indexes = new Array()\n            let i = 0;\n            for (let row of table)\n                indexes[i++] = true;\n            indexes[i++] = true;\n            //flag off the used ones\n            for (let row of table)\n                indexes[row.rowId] = false;\n            //return the first available one\n            i = 0;\n            while (!indexes[i])\n                i++;\n            return i;\n        },\n        queue: {\n            /** \n             * @borrows setStateInRow as setSingleState \n             * */\n            sendToPressButton: {\n                //states the button can be in\n                //\"state\" are effimerous, will change on its own\n                //\"button\" will stay as they are until clicked\n                states: {\n                    //button //onClick: enqueue writes to plc\n                    \"clickToSend\": \"<center><span ><i class='fa fa-arrow-up' style=\\\"margin-right:5px\\\"></i>  abilita  </span></center>\",\n                    //state //onClick: reset to clickTosend and enqueue empty plc action\n                    \"queued\": \"<center><span ><i class='fa fa-arrow-up' style=\\\"margin-right:5px; color:gray;\\\"></i>  in attesa  </span></center>\",\n                    //button //onClick: reset to clearing and enqueue empty plc action\n                    \"loaded\": \"<center><span ><i class='fa fa-minus' style=\\\"margin-right:5px\\\"></i>  disabilita  </span></center>\",\n                    //state //onClick: reset to clearing and enqueue empty plc action\n                    \"clearing\": \"<center><span ><i class='fa fa-minus' style=\\\"margin-right:5px; color:gray;\\\"></i> disabilita </span></center>\",\n                    //not used\n                    \"fail\": \"<center><span ><i class='fa fa-times' style=\\\"color:red;\\\"></i></span></center>\",\n                    //something went wrong in a function\n                    \"tableError\": \"<span style=\\\"color: red\\\"> tableError </span>\"\n                },\n\n                getStateString(state) {\n                    var stateString;\n                    switch (state) {\n                        case 0: { stateString = \"clickToSend\"; break; }\n                        case 1: { stateString = \"queued\"; break; }\n                        case 2: { stateString = \"loaded\"; break; }\n                        case 3: { stateString = \"clearing\"; break; }\n                        case -1: { stateString = \"fail\"; break; }\n                        default: { node.error(\"unknown button state \" + state + \" \") }\n                        case false: { stateString = \"tableError\"; break }\n                    }\n                    //node.warn({stateStringSetTo:stateString});\n                    return stateString;\n                },\n                getStateInt(stateString) {\n                    var state;\n                    switch (stateString) {\n                        case \"clickToSend\": { state = 0; break; }\n                        case \"queued\": { state = 1; break; }\n                        case \"loaded\": { state = 2; break; }\n                        case \"clearing\": { state = 3; break; }\n                        case \"fail\": { state = -1; break; }\n                        default: { node.error(\"unknown button state \" + state + \" \") }\n                        case \"tableError\": { state = false; break; }\n                    }\n                    //node.warn({ stateIntSetTo: state });\n                    return state;\n                },\n\n\n\n                /** \n                 * @param {(-1|\"fail\"|0|\"clickToSend\"|1|\"queued\"|2|\"loaded\"|3|\"clearing\")} state state to set\n                 * @param {string} fieldName name of the button to affect, like \"sendToPressa1\"\n                 * @param {object} reference to the row to edit, must have a fieldName button.\n                */\n                \"setStateInRow\": function setStateInRow(state, fieldName, rowRef) {\n                    if (arguments.length != setStateInRow.length) throw new SyntaxError(\"missing args\");\n                    var stateString = state;\n                    if (typeof (state) == \"string\")\n                        state = this.getStateInt(state);\n                    else\n                        stateString = this.getStateString(state);\n                    //node.warn({f:\"setStateInRow\",params:{state:state,fieldName:fieldName,rowRef:rowRef,stateString:stateString}});\n\n                    if (!rowRef.hasOwnProperty(fieldName) || !this.states.hasOwnProperty(stateString)) {\n                        node.error(\"no \" + fieldName + \" button or unknown state \" + stateString)\n                        stateString = \"tableError\";\n                        state = this.getStateInt(stateString);\n                    }\n                    rowRef[fieldName] = this.states[stateString];\n                    rowRef[fieldName + \"State\"] = state;\n                    //node.warn({applied:state,toBtn:fieldName,inRow:rowRef});\n                    return;\n                },\n                setSingleState(state, fieldName, rowRef) {\n                    return this.setStateInRow(state, fieldName, rowRef);\n                },\n\n                /* not working\n                setStateInTable(state, fieldName, rowRef, tableRef) {\n                    var stateString = state;\n                    if (typeof (state) == \"string\")\n                        state = this.getStateInt(state);\n                    else\n                        stateString = this.getStateString(state);\n                    \n                    switch(stateString){\n                        case \"clickToSend\": {\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                        //there can only be 1 per column\n                        case \"queued\":{\n                            for(let row of tableRef){\n                                if(row.rowId!=rowRef.rowId){\n                                    //queued -> clickToSend\n                                    if(row[fieldName+\"State\"] == 1) \n                                        this.setStateInRow(0,fieldName,rowRef);\n                                    //loaded -> clearing\n                                    else if(row[fieldName+\"State\"] == 2)\n                                        this.setStateInRow(3,fieldName,rowRef);\n                                }\n                            }\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                        //there can only be 1 per column\n                        case \"loaded\":{\n                            for(let row of tableRef){\n                                if (row.rowId != rowRef.rowId) {\n                                    //loaded || clearing -> clickToSend\n                                    if(row[fieldName+\"State\"] == 2 || row[fieldName+\"State\"] == 3) \n                                        this.setStateInRow(0,fieldName,rowRef);\n                                }\n                            }\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                        case \"clearing\":{\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                    }\n                    return;\n                },\n                */\n\n\n                /**\n                 * true if referenced press is currently loaded into the plc\n                 * @param {string} fieldName name of the button to affect, like \"sendToPressa1\"\n                 * @param {object} reference to the row to check, must have a fieldName button.\n                */\n                isLoaded(fieldName, rowRef) { //true se questa riga è attualmente caricata nel plc\n                    let stateString = this.getStateString(rowRef[fieldName + \"State\"]);\n                    return (stateString == \"clearing\" || stateString == \"loaded\");\n                }\n            },\n\n            newRow(rowId) {\n                var row = {\n                    rowId: rowId,\n                    deleteButton: \"<center><i class='fa fa-trash-o' ></i></center>\",\n                    id: \"\",\n                    quantToDo: 1,\n                    quantProd: 0,\n                    progress: this.quantProd / this.quantToDo,\n                    note: \"\"\n                    //sendToPressa1,2,3.. :\n                    //sendToPressa1(2,3..)State: 0 (click2Send) | 1 (sentAndOk) | -1 (loading?)\n                }\n\n                let presse = [\"Pressa1\", \"Pressa2\", \"Pressa3\", \"Pressa4\"];\n                for (let p of presse) {\n                    row[\"sendTo\" + p] = `<center>\n                    <span style=\"display:inline; \"><i class='fa fa-arrow-up' style=\"padding-right:5px;\"></i>load</span>\n                    <span style=\"display:none; \"><i class='fa fa-check' style=\"color:green;\"></i></span>\n                    <span style=\"display:none; \"><i class='fa fa-cross' style=\"color:red; padding-right:5px; \"></i> errore</span>\n                </center>`; //onCLick works\n                    row[\"sendTo\" + p + \"State\"] = null;\n                    this.sendToPressButton.setStateInRow(\"clickToSend\", \"sendTo\" + p, row);\n                }\n                return row;\n            }\n        },\n        history: {\n            newRow(rowId, doneByPressNum = 1) {\n                const dateObj = new Date();\n                let d = dateObj;\n                var row = {\n                    rowId: rowId, //hidden\n                    doneByPressNum: doneByPressNum,\n                    cycleNumber: 0,\n                    dateObj: new Date(),\n                    date: twoDigit(d.getDate()) + \".\" + twoDigit(1 + d.getMonth()) + \".\" + d.getFullYear(),\n                    time: twoDigit(d.getHours()) + \":\" + twoDigit(d.getMinutes()) + \":\" + twoDigit(d.getSeconds()),\n                    millis: Date.now(),\n                    id: \"\",\n                    quantProd: 0,\n                    note: \"\",\n                }\n\n                return row;\n            }\n        },\n        completed: {\n            newRow(rowId) {\n                const dateObj = new Date();\n                let d = dateObj;\n                var row = {\n                    rowId: rowId, //hidden\n                    //doneByPressNum: doneByPressNum, //hidden\n                    cycleNumber: 0,\n                    dateObj: new Date(),\n                    date: twoDigit(d.getDate()) + \".\" + twoDigit(1 + d.getMonth()) + \".\" + d.getFullYear(),\n                    time: twoDigit(d.getHours()) + \":\" + twoDigit(d.getMinutes()) + \":\" + twoDigit(d.getSeconds()),\n                    millis: Date.now(),\n                    id: \"\",\n                    quantProd: 0,\n                    quantToDo: 0,\n                    quantSumm: this.quantProd + \"/\" + this.quantToDo,\n                    note: \"\",\n                }\n\n                return row;\n            }\n        }\n\n    }\n\n\n    utils.wrapFunctions(def, \"[\" + thisClassName + \"]\");\n    flow.set(thisClassName, def);\n    node.send(def);\n    node.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n});\n\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 275,
        "y": 225,
        "wires": [
            []
        ]
    },
    {
        "id": "891c7b3250aa152a",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "set globals and utilities",
        "info": "tabUtils\n    ha funzioni comuni a tutte le tabelle,\n    in aggiunta a quelle specifiche per le singole.",
        "x": 290,
        "y": 180,
        "wires": []
    },
    {
        "id": "c309c3ce8e145478",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "send completedTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completedTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 1695,
        "wires": [
            [
                "f17c0cf3a34f7116"
            ]
        ]
    },
    {
        "id": "db96dc0c6dbe7244",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "completedJsonUpdate in",
        "links": [
            "4bbe87c68c5eee68",
            "0f442f62dc9f61be"
        ],
        "x": 240,
        "y": 1695,
        "wires": [
            [
                "c309c3ce8e145478"
            ]
        ]
    },
    {
        "id": "f17c0cf3a34f7116",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 610,
        "y": 1680,
        "wires": [
            [
                "511afb106e173130"
            ]
        ]
    },
    {
        "id": "2dd33717ef5a3b58",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "triggerCompletedJsonUpdate_in",
        "links": [
            "5bebd7ba13d78561"
        ],
        "x": 240,
        "y": 1665,
        "wires": [
            [
                "88cd5d005aff3219"
            ]
        ]
    },
    {
        "id": "511afb106e173130",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 710,
        "y": 1680,
        "wires": [
            [
                "08b368484118e203"
            ]
        ],
        "l": false
    },
    {
        "id": "08b368484118e203",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 845,
        "y": 1680,
        "wires": [
            [
                "90168b3986aea043"
            ]
        ],
        "l": false
    },
    {
        "id": "90168b3986aea043",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "",
        "filename": ".\\orders\\completed.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 1680,
        "wires": [
            [
                "f3dcda45cbe40ac0"
            ]
        ]
    },
    {
        "id": "f3dcda45cbe40ac0",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "written completed.json",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1680,
        "wires": []
    },
    {
        "id": "189a3eca588f92de",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "forceCompletedJsonUpdate in",
        "links": [
            "1b6fb1593a697369",
            "1ff2b9c7e81f175d",
            "513dc6bfb2e965e7",
            "77ed67b82e2a4816"
        ],
        "x": 355,
        "y": 1740,
        "wires": [
            [
                "0299f7d430301eb2"
            ]
        ],
        "l": true
    },
    {
        "id": "0299f7d430301eb2",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "send completedTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completedTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 625,
        "y": 1740,
        "wires": [
            [
                "f17c0cf3a34f7116",
                "08b368484118e203"
            ]
        ]
    },
    {
        "id": "88cd5d005aff3219",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 1665,
        "wires": [
            [
                "f17c0cf3a34f7116"
            ]
        ]
    },
    {
        "id": "a692f16371e4c1bb",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "send historyTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "historyTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 1485,
        "wires": [
            [
                "230325d8fabed91c"
            ]
        ]
    },
    {
        "id": "a614abde4e2ab03e",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "historyJsonUpdate in",
        "links": [
            "892a21e16fd8d586"
        ],
        "x": 240,
        "y": 1485,
        "wires": [
            [
                "a692f16371e4c1bb"
            ]
        ]
    },
    {
        "id": "230325d8fabed91c",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 605,
        "y": 1470,
        "wires": [
            [
                "f5779068e059be4c"
            ]
        ]
    },
    {
        "id": "a1bf31c1f4982c36",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "triggerHistoryJsonUpdate_in",
        "links": [
            "2883b97684d92288"
        ],
        "x": 240,
        "y": 1455,
        "wires": [
            [
                "bdb744443037f6f5"
            ]
        ]
    },
    {
        "id": "f5779068e059be4c",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 705,
        "y": 1470,
        "wires": [
            [
                "59c0617b8993f309"
            ]
        ],
        "l": false
    },
    {
        "id": "59c0617b8993f309",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 840,
        "y": 1470,
        "wires": [
            [
                "ce8907e4ba09b5c8"
            ]
        ],
        "l": false
    },
    {
        "id": "ce8907e4ba09b5c8",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "",
        "filename": ".\\orders\\history.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 965,
        "y": 1470,
        "wires": [
            [
                "a87b7f1bb3d8030d"
            ]
        ]
    },
    {
        "id": "a87b7f1bb3d8030d",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "written history.json",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1470,
        "wires": []
    },
    {
        "id": "16e8c34d1250478f",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "send historyTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "historyTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1530,
        "wires": [
            [
                "59c0617b8993f309",
                "230325d8fabed91c"
            ]
        ]
    },
    {
        "id": "508fc7244c0c3621",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "forceHistoryJsonUpdate in",
        "links": [
            "180f9e3f0a29978d",
            "44ede18dded35aa0",
            "fefbd67b181182ce",
            "f129c68931c20f25"
        ],
        "x": 335,
        "y": 1530,
        "wires": [
            [
                "16e8c34d1250478f"
            ]
        ],
        "l": true
    },
    {
        "id": "bdb744443037f6f5",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1455,
        "wires": [
            [
                "230325d8fabed91c"
            ]
        ]
    },
    {
        "id": "ad0438c3cae94f40",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 320,
        "y": 765,
        "wires": [
            [
                "25779228f81e2d81",
                "84013a96084c3eeb",
                "599095620e383bff"
            ]
        ]
    },
    {
        "id": "25779228f81e2d81",
        "type": "file in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\queue.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 720,
        "wires": [
            [
                "1e6921618ed22e2b"
            ]
        ]
    },
    {
        "id": "84013a96084c3eeb",
        "type": "file in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\history.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 765,
        "wires": [
            [
                "0a853593a0797f46"
            ]
        ]
    },
    {
        "id": "599095620e383bff",
        "type": "file in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\completed.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 810,
        "wires": [
            [
                "f3493b385f266d87"
            ]
        ]
    },
    {
        "id": "1e6921618ed22e2b",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 755,
        "y": 720,
        "wires": [
            [
                "60cf7836015914f7",
                "bc155cd9a662d3f9"
            ]
        ],
        "l": false
    },
    {
        "id": "0a853593a0797f46",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 755,
        "y": 765,
        "wires": [
            [
                "74af4f94b7346e0d"
            ]
        ],
        "l": false
    },
    {
        "id": "f3493b385f266d87",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 755,
        "y": 810,
        "wires": [
            [
                "c2ffd0fb87377ef2"
            ]
        ],
        "l": false
    },
    {
        "id": "60cf7836015914f7",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1165,
        "y": 750,
        "wires": [
            [
                "92972af8c5f549ce",
                "3c58a737bee31258"
            ]
        ]
    },
    {
        "id": "92972af8c5f549ce",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read queue.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 750,
        "wires": []
    },
    {
        "id": "3c58a737bee31258",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1470,
        "y": 720,
        "wires": [],
        "l": true
    },
    {
        "id": "8ae9fd411bc78cb9",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "20s trigger",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "control",
        "payload": "trigger",
        "payloadType": "str",
        "x": 335,
        "y": 885,
        "wires": [
            [
                "fd4bd9bffc26442c",
                "2883b97684d92288",
                "5bebd7ba13d78561"
            ]
        ]
    },
    {
        "id": "fd4bd9bffc26442c",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "triggerQueueJsonUpdate_out",
        "mode": "link",
        "links": [
            "df13ffa0e29a0380"
        ],
        "x": 590,
        "y": 855,
        "wires": [],
        "l": true
    },
    {
        "id": "2883b97684d92288",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "triggerHistoryJsonUpdate_out",
        "mode": "link",
        "links": [
            "a1bf31c1f4982c36"
        ],
        "x": 590,
        "y": 885,
        "wires": [],
        "l": true
    },
    {
        "id": "5bebd7ba13d78561",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "triggerCompletedJsonUpdate_out",
        "mode": "link",
        "links": [
            "2dd33717ef5a3b58"
        ],
        "x": 600,
        "y": 915,
        "wires": [],
        "l": true
    },
    {
        "id": "90631bdf8d9f93ae",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read",
        "info": "",
        "x": 350,
        "y": 735,
        "wires": []
    },
    {
        "id": "5f2272efb6d89c79",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "write",
        "info": "",
        "x": 360,
        "y": 855,
        "wires": []
    },
    {
        "id": "74af4f94b7346e0d",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "historyTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1165,
        "y": 795,
        "wires": [
            [
                "95a4cfea0458c7b9",
                "6f329cf07ae77335"
            ]
        ]
    },
    {
        "id": "c2ffd0fb87377ef2",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "completedTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1175,
        "y": 840,
        "wires": [
            [
                "92ada735b313aded",
                "bd2747c35b481472"
            ]
        ]
    },
    {
        "id": "d662599943fbc2bd",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "name": "load/save tables to files",
        "info": "",
        "x": 325,
        "y": 450,
        "wires": []
    },
    {
        "id": "da664ace067df2dc",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "send flow.queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 605,
        "y": 3255,
        "wires": [
            [
                "90f4c3e098f997c4",
                "8dfcb46d23e73d53"
            ]
        ]
    },
    {
        "id": "3bea7933e72005a0",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "refreshQueueTable_in",
        "links": [
            "e5503f35f4093a0f",
            "c3628dd8cae730f9",
            "a8a3e1a0ebead94e",
            "32a4d22f15811fa3",
            "8b2c8f3ad083a6ad",
            "3c58a737bee31258",
            "c81a146f4493c402",
            "5cd9e3ef9922f088",
            "d8494b7bda6c8ad6",
            "cb5e93613642409a",
            "7f049357115c53e0",
            "e40d5d76ae5e5cdb",
            "9607aeea9b35b53f",
            "23eec5e679697f6b",
            "c53439603f4e4208",
            "e09c6a7a8f66e98e",
            "57e142f7eea02841"
        ],
        "x": 260,
        "y": 3255,
        "wires": [
            [
                "f8159ca9b1e06221"
            ]
        ],
        "l": true
    },
    {
        "id": "90f4c3e098f997c4",
        "type": "ui_etable",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "payload": "[{\"title\":\"rowId\",\"field\":\"rowId\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"\",\"field\":\"deleteButton\",\"hozAlign\":\"center\",\"formatter\":\"html\",\"editor\":false},{\"title\":\"id\",\"field\":\"id\",\"hozAlign\":\"left\",\"width\":180,\"editor\":\"input\"},{\"title\":\"Prodotte\",\"field\":\"quantProd\",\"hozAlign\":\"center\",\"editor\":\"number\"},{\"title\":\"Da Prod.\",\"field\":\"quantToDo\",\"hozAlign\":\"center\",\"editor\":\"number\"},{\"title\":\"controllo\",\"field\":\"sendToPressa1\",\"formatter\":\"html\",\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"note\",\"field\":\"note\",\"hozAlign\":\"textarea\",\"editor\":\"input\"}]",
        "payloadType": "json",
        "options": "{\"movableColumns\":true,\"resizableColumns\":true,\"selectable\":false,\"responsiveLayout\":\"collapse\",\"autoResize\":true,\"layout\":\"fitDataStretch\",\"pagination\":\"local\",\"height\":\"450px\",\"width\":\"100%\",\"groupBy\":false,\"groupStartOpen\":true}",
        "group": "77dcdddb4f97461c",
        "name": "queueTable",
        "order": 7,
        "width": "18",
        "height": "8",
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 935,
        "y": 3255,
        "wires": [
            [
                "99a287f71f858ba2",
                "d111c07926a908c5"
            ]
        ]
    },
    {
        "id": "8dfcb46d23e73d53",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "flow.QueueTable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 3210,
        "wires": []
    },
    {
        "id": "9cb2558db9346cae",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "updateQueueJson_out",
        "mode": "link",
        "links": [
            "ed112941d5cdd4e7"
        ],
        "x": 575,
        "y": 3210,
        "wires": [],
        "l": true
    },
    {
        "id": "99a287f71f858ba2",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "clicked row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1155,
        "y": 3210,
        "wires": []
    },
    {
        "id": "de78cb844f1f00d8",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "injectRows",
        "func": "\nmsg.payload=[\n    {\n        id: \"firstId\",\n        quantToDo: 10,\n        quantProd: 10,\n        progress:10,\n    },\n];\nlet presse = [\"Pressa1\", \"Pressa2\", \"Pressa3\", \"Pressa4\"];\nlet i=0;\nfor(let item of msg.payload){\n    item.rowNum= i++;\n    item.deleteButton = \"<center><i class='fa fa-trash-o' ></i></center>\"; //onCLick works\n    for(let p of presse){\n        item[\"sendTo\"+p] = \"<center><span ><i class='fa fa-arrow-up' style=\\\"padding-right:5px\\\"></i>load</span></center>\"; //onCLick works\n    }\n    \n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 3105,
        "wires": [
            [
                "c3130d1334678fc5"
            ]
        ]
    },
    {
        "id": "1099581654481fc9",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 580,
        "y": 3105,
        "wires": [
            [
                "de78cb844f1f00d8"
            ]
        ],
        "l": false
    },
    {
        "id": "c3130d1334678fc5",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 875,
        "y": 3105,
        "wires": [
            [
                "a8a3e1a0ebead94e"
            ]
        ]
    },
    {
        "id": "a8a3e1a0ebead94e",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1125,
        "y": 3105,
        "wires": [],
        "l": true
    },
    {
        "id": "15c9bf7efe404627",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "load example table",
        "group": "77dcdddb4f97461c",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "load example table",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-update",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 495,
        "y": 3060,
        "wires": [
            [
                "f8d09635394baaab"
            ]
        ]
    },
    {
        "id": "f8d09635394baaab",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "injectRows",
        "func": "\n/*\nmsg.payload=[\n    {\n        id: \"id that takes a lot of space\",\n        quantToDo: 10,\n        quantProd: 10,\n        progress:10,\n    },\n    {\n        id: \"secondId\",\n        quantToDo: 12,\n        quantProd: 10,\n        progress: 50,\n    }\n];\nlet presse = [\"Pressa1\", \"Pressa2\", \"Pressa3\", \"Pressa4\"];\nlet i=0;\nfor(let item of msg.payload){\n    item.rowId= i++;\n    item.deleteButton = \"<center><i class='fa fa-trash-o' ></i></center>\"; //onCLick works\n    for(let p of presse){\n        item[\"sendTo\"+p] = \"<center><span ><i class='fa fa-arrow-up' style=\\\"padding-right:5px\\\"></i>load</span></center>\"; //onCLick works\n    }\n}\n*/\nconst tabUtils=flow.get(\"tabUtils\");\n\nlet ids=[\n    \"id that takes a lot of space\",\n    \"secondId\",\n    \"thirdId\"\n];\n\nmsg.payload=[];\nlet i=0\nfor(let id of ids){\n    let row = tabUtils.queue.newRow(i++);\n    row.id = id;\n    row.quantToDo = Math.round(5 + Math.random()*10);\n    row.quantProd = Math.round(Math.random() * row.quantToDo / 2);\n    msg.payload.push(row);\n}\nnode.warn(msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 685,
        "y": 3060,
        "wires": [
            [
                "e504bebeacdd75dd"
            ]
        ]
    },
    {
        "id": "416b85ed1defe292",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 545,
        "y": 3030,
        "wires": [
            [
                "f8d09635394baaab"
            ]
        ],
        "l": false
    },
    {
        "id": "e504bebeacdd75dd",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 3060,
        "wires": [
            [
                "e5503f35f4093a0f"
            ]
        ]
    },
    {
        "id": "e5503f35f4093a0f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1110,
        "y": 3060,
        "wires": [],
        "l": true
    },
    {
        "id": "eed42b268cafd4c4",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "salva",
        "group": "77dcdddb4f97461c",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "salva",
        "tooltip": "salva la tabella attuale, verrà ricaricata al prossimo avvio. Vengono in ogni caso effettuati salvataggi periodici automatici",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-floppy-o",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 2850,
        "wires": [
            [
                "f97cc9e5d5d42826"
            ]
        ]
    },
    {
        "id": "8f9a1f49027a6915",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "forceQueueJsonUpdate out",
        "mode": "link",
        "links": [
            "3cc72650169eec95"
        ],
        "x": 585,
        "y": 2835,
        "wires": [],
        "l": true
    },
    {
        "id": "a0706941e62ef95e",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 375,
        "y": 2820,
        "wires": [
            [
                "f97cc9e5d5d42826"
            ]
        ],
        "l": false
    },
    {
        "id": "19565f2c5b691bf7",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "nuovo ordine",
        "group": "77dcdddb4f97461c",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "nuovo ordine",
        "tooltip": "aggiungi un nuovo ordine alla tabella",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-plus-square",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 2775,
        "wires": [
            [
                "22a43313b4628e06"
            ]
        ]
    },
    {
        "id": "cd2a3e7d433fb3e9",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "addRow",
        "func": "const tabUtils=flow.get(\"tabUtils\");\n\nlet table = flow.get(\"queueTable\")\nlet row = tabUtils.queue.newRow(tabUtils.newRowId(table));\nnode.warn({added:row});\ntable.push(row)\nflow.set(\"queueTable\",table);\nreturn {payload:table}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465,
        "y": 2775,
        "wires": [
            [
                "8b2c8f3ad083a6ad",
                "f34fa6789deaa4e6"
            ]
        ]
    },
    {
        "id": "e24cdeb55a9a6f68",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 300,
        "y": 2745,
        "wires": [
            [
                "22a43313b4628e06"
            ]
        ],
        "l": false
    },
    {
        "id": "8b2c8f3ad083a6ad",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 670,
        "y": 2775,
        "wires": [],
        "l": true
    },
    {
        "id": "f34fa6789deaa4e6",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "debug 61",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2730,
        "wires": []
    },
    {
        "id": "7452dc34b018aaac",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "queueTable topside buttons",
        "info": "",
        "x": 305,
        "y": 2700,
        "wires": []
    },
    {
        "id": "513dc6bfb2e965e7",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "forceCompletedJsonUpdate out",
        "mode": "link",
        "links": [
            "189a3eca588f92de"
        ],
        "x": 610,
        "y": 2865,
        "wires": [],
        "l": true
    },
    {
        "id": "44ede18dded35aa0",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "forceHistoryJsonUpdate out",
        "mode": "link",
        "links": [
            "508fc7244c0c3621"
        ],
        "x": 615,
        "y": 2895,
        "wires": [],
        "l": true
    },
    {
        "id": "823428c64dadbb25",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "QUEUE TABLE",
        "info": "",
        "x": 230,
        "y": 2625,
        "wires": []
    },
    {
        "id": "7f11448ec8122f29",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "HISTORY TABLE",
        "info": "",
        "x": 210,
        "y": 3615,
        "wires": []
    },
    {
        "id": "0933e76415d3b0d8",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "refreshHistoryTable_in",
        "links": [
            "6a1ff5c039948610",
            "c3628dd8cae730f9",
            "11683abf612a1a4b",
            "bb54ea204f3d1f70",
            "9fdb650b24779323",
            "95a4cfea0458c7b9",
            "23a5a7bba4747615",
            "787b16cc56aacf5d",
            "c107574f5dfa4bb5",
            "b2cfef37ff094752"
        ],
        "x": 210,
        "y": 4095,
        "wires": [
            [
                "a4e2b321a1dc18d5",
                "892a21e16fd8d586"
            ]
        ],
        "l": true
    },
    {
        "id": "a4e2b321a1dc18d5",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "send flow.historyTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "historyTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 4095,
        "wires": [
            [
                "f15ed631a334ae18",
                "2bd07d0a756e3fd5"
            ]
        ]
    },
    {
        "id": "892a21e16fd8d586",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "updateHistoryJson_out",
        "mode": "link",
        "links": [
            "a614abde4e2ab03e"
        ],
        "x": 430,
        "y": 4050,
        "wires": [],
        "l": true
    },
    {
        "id": "f15ed631a334ae18",
        "type": "ui_etable",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "payload": "[{\"title\":\"rowId\",\"field\":\"rowId\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"data\",\"field\":\"date\",\"visible\":true,\"hozAlign\":\"left\",\"headerSortStartingDir\":\"desc\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"ora\",\"field\":\"time\",\"visible\":true,\"hozAlign\":\"left\",\"headerSortStartingDir\":\"desc\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"millis\",\"field\":\"millis\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"Ciclo\",\"field\":\"cycleNumber\",\"visible\":true,\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"id\",\"field\":\"id\",\"hozAlign\":\"left\",\"width\":180,\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"Esito\",\"field\":\"statusAsString\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"note\",\"field\":\"note\",\"hozAlign\":\"textarea\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":\"input\"}]",
        "payloadType": "json",
        "options": "{\"movableColumns\":true,\"resizableColumns\":true,\"selectable\":false,\"responsiveLayout\":\"collapse\",\"autoResize\":true,\"layout\":\"fitDataStretch\",\"pagination\":\"local\",\"height\":\"940px\",\"width\":\"100%\",\"groupBy\":false,\"groupStartOpen\":true,\"initialSort\":[{\"column\":\"press\",\"dir\":\"asc\"},{\"column\":\"time\",\"dir\":\"desc\"},{\"column\":\"date\",\"dir\":\"desc\"}]}",
        "group": "b3c076eedf1fd2f8",
        "name": "historyTable",
        "order": 3,
        "width": "14",
        "height": "18",
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 790,
        "y": 4095,
        "wires": [
            [
                "ecf7ba24682eae0d",
                "73bd49c19cb4ea06"
            ]
        ]
    },
    {
        "id": "2bd07d0a756e3fd5",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "flow.HistoryTable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 675,
        "y": 4050,
        "wires": []
    },
    {
        "id": "ecf7ba24682eae0d",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "clicked row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 4050,
        "wires": []
    },
    {
        "id": "104a98d5dd421a19",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "salva",
        "group": "b3c076eedf1fd2f8",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "salva",
        "tooltip": "salva la tabella attuale, verrà ricaricata al prossimo avvio. \\n vengono in ogni caso effettuati salvataggi periodici automatici",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-floppy-o",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 3840,
        "wires": [
            [
                "180f9e3f0a29978d"
            ]
        ]
    },
    {
        "id": "180f9e3f0a29978d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "forceHistoryJsonUpdate out",
        "mode": "link",
        "links": [
            "508fc7244c0c3621"
        ],
        "x": 535,
        "y": 3840,
        "wires": [],
        "l": true
    },
    {
        "id": "91ec12ac87115cdc",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 340,
        "y": 3810,
        "wires": [
            [
                "180f9e3f0a29978d"
            ]
        ],
        "l": false
    },
    {
        "id": "d02b6fbde106437f",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "70b9c5719558ad66",
        "name": "historyTable topside buttons",
        "info": "",
        "x": 275,
        "y": 3690,
        "wires": []
    },
    {
        "id": "b16cccaa62171b60",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "COMPLETED TABLE",
        "info": "",
        "x": 230,
        "y": 4260,
        "wires": []
    },
    {
        "id": "15870b35cd8f1905",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "refreshCompletedTable_in",
        "links": [
            "4b5acc982887ac5d",
            "c3628dd8cae730f9",
            "1e234f2b95dd6989",
            "50a2ac2cbfb5f142",
            "103b0946998d0bcc",
            "92ada735b313aded",
            "1fbf3d438abed790",
            "a976f8361278473b",
            "5ec80f3a7f9f5fd9",
            "87f7ce05c7d80d59"
        ],
        "x": 220,
        "y": 4740,
        "wires": [
            [
                "e330946719521da8",
                "0f442f62dc9f61be"
            ]
        ],
        "l": true
    },
    {
        "id": "e330946719521da8",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "send flow.completedTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completedTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 4740,
        "wires": [
            [
                "51c7d7b3525d3ca6",
                "28c5c8c6a8cbdd41"
            ]
        ]
    },
    {
        "id": "0f442f62dc9f61be",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "updateCompletedJson_out",
        "mode": "link",
        "links": [
            "db96dc0c6dbe7244"
        ],
        "x": 440,
        "y": 4695,
        "wires": [],
        "l": true
    },
    {
        "id": "51c7d7b3525d3ca6",
        "type": "ui_etable",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "payload": "[{\"title\":\"rowId\",\"field\":\"rowId\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"data\",\"field\":\"date\",\"visible\":true,\"hozAlign\":\"left\",\"headerFilter\":\"input\",\"headerSortStartingDir\":\"desc\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"ora\",\"field\":\"time\",\"visible\":true,\"hozAlign\":\"left\",\"headerFilter\":\"input\",\"headerSortStartingDir\":\"desc\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"N°Ciclo\",\"field\":\"cycleNumber\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":\"false\"},{\"title\":\"millis\",\"field\":\"millis\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"id\",\"field\":\"id\",\"hozAlign\":\"left\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"width\":180,\"editor\":\"false\"},{\"title\":\"Prodotte\",\"field\":\"quantProd\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"note\",\"field\":\"note\",\"hozAlign\":\"textarea\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":\"input\"}]",
        "payloadType": "json",
        "options": "{\"movableColumns\":true,\"resizableColumns\":true,\"selectable\":false,\"responsiveLayout\":\"collapse\",\"autoResize\":true,\"layout\":\"fitDataStretch\",\"pagination\":\"local\",\"height\":\"450px\",\"width\":\"100%\",\"groupBy\":false,\"groupStartOpen\":true,\"initialSort\":[{\"column\":\"time\",\"dir\":\"desc\"},{\"column\":\"date\",\"dir\":\"desc\"}]}",
        "group": "b7f5c766a413446a",
        "name": "completedTable",
        "order": 3,
        "width": "18",
        "height": "8",
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 800,
        "y": 4740,
        "wires": [
            [
                "f0d5683c1d5e6fa4",
                "34fe2b838d57bdf8"
            ]
        ]
    },
    {
        "id": "28c5c8c6a8cbdd41",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "flow.CompletedTable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 4695,
        "wires": []
    },
    {
        "id": "f0d5683c1d5e6fa4",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "clicked row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 4695,
        "wires": []
    },
    {
        "id": "21776dac0e1ffac5",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "3714a803248cefeb",
        "name": "salva",
        "group": "b7f5c766a413446a",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "salva",
        "tooltip": "salva la tabella attuale, verrà ricaricata al prossimo avvio. \\n vengono in ogni caso effettuati salvataggi periodici automatici",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-floppy-o",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 4485,
        "wires": [
            [
                "1ff2b9c7e81f175d"
            ]
        ]
    },
    {
        "id": "1ff2b9c7e81f175d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "3714a803248cefeb",
        "name": "forceCompletedJsonUpdate out",
        "mode": "link",
        "links": [
            "189a3eca588f92de"
        ],
        "x": 545,
        "y": 4485,
        "wires": [],
        "l": true
    },
    {
        "id": "88e3d23a3ec9d6b0",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "3714a803248cefeb",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 350,
        "y": 4455,
        "wires": [
            [
                "1ff2b9c7e81f175d"
            ]
        ],
        "l": false
    },
    {
        "id": "d27598503a5b31c1",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "3714a803248cefeb",
        "name": "completedTable topside buttons",
        "info": "",
        "x": 285,
        "y": 4335,
        "wires": []
    },
    {
        "id": "9e7d5e610f97bb9a",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 345,
        "y": 3215,
        "wires": [
            [
                "f8159ca9b1e06221"
            ]
        ],
        "l": false
    },
    {
        "id": "e198712935d863ce",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "ee1fd54ec57a959c",
        "name": "set flow.uiConfig",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 525,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "0fce669fac8b246c",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "ee1fd54ec57a959c",
        "name": "set flow.params",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 515,
        "y": 315,
        "wires": [
            []
        ]
    },
    {
        "id": "ceb2f1af58e4621a",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "ee1fd54ec57a959c",
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 295,
        "y": 300,
        "wires": [
            [
                "e198712935d863ce",
                "0fce669fac8b246c"
            ]
        ]
    },
    {
        "id": "9145dcd7afd55580",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "scope": [
            "84013a96084c3eeb"
        ],
        "uncaught": false,
        "x": 325,
        "y": 600,
        "wires": [
            [
                "972b3c581c06be97"
            ]
        ]
    },
    {
        "id": "f28eb465e5ea874e",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "catch tables fileNotFound",
        "func": "\nif(/ENOENT/.test(msg.error?.message)){\n    if(!context.get(msg.origin+\"_triedOnce\")){\n        context.set(msg.origin+\"_triedOnce\");\n        return msg;\n    }\n    else\n        node.error(\"Failed Twice:\" +msg.error?.message, msg);\n}\nelse{\n    node.error(msg.error?.message, msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 725,
        "y": 600,
        "wires": [
            [
                "dca5936e80add879"
            ]
        ]
    },
    {
        "id": "6fbb1b9edbfec062",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "msg.origin",
        "property": "origin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "queue",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "completed",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 4,
        "x": 1150,
        "y": 600,
        "wires": [
            [
                "083e54e2bf6c88c0"
            ],
            [
                "d9fdf272d0dc630c"
            ],
            [
                "9ec25ad7f772805f"
            ],
            [
                "a99d6bf6adb7c08b"
            ]
        ]
    },
    {
        "id": "d9fdf272d0dc630c",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\history.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1355,
        "y": 585,
        "wires": [
            [
                "bf7a7388b5301e71",
                "fad7e78f46d1c5dc",
                "a649d4fecb2ca56a"
            ]
        ]
    },
    {
        "id": "9ec25ad7f772805f",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\completed.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1365,
        "y": 630,
        "wires": [
            [
                "ad642f1caae66ae0",
                "fad7e78f46d1c5dc",
                "4ca48d54d222612f"
            ]
        ]
    },
    {
        "id": "083e54e2bf6c88c0",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\queue.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1355,
        "y": 540,
        "wires": [
            [
                "94522e8fcaf7234f",
                "fad7e78f46d1c5dc",
                "12bdad34026ac79d"
            ]
        ]
    },
    {
        "id": "bf06b4c02ad79ffa",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "scope": [
            "25779228f81e2d81"
        ],
        "uncaught": false,
        "x": 325,
        "y": 555,
        "wires": [
            [
                "9180b7c3e7a90c3b"
            ]
        ]
    },
    {
        "id": "0abd1e62f1abfb13",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "scope": [
            "599095620e383bff"
        ],
        "uncaught": false,
        "x": 325,
        "y": 645,
        "wires": [
            [
                "d7df7b218b99fd38"
            ]
        ]
    },
    {
        "id": "dca5936e80add879",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "set to []",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 600,
        "wires": [
            [
                "c141b9aa3a1d6d25"
            ]
        ]
    },
    {
        "id": "94522e8fcaf7234f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "8b1597117f2c51ff"
        ],
        "x": 1495,
        "y": 540,
        "wires": []
    },
    {
        "id": "8b1597117f2c51ff",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link in 13",
        "links": [
            "94522e8fcaf7234f"
        ],
        "x": 475,
        "y": 720,
        "wires": [
            [
                "25779228f81e2d81"
            ]
        ]
    },
    {
        "id": "bf7a7388b5301e71",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "8ca8bba88825bbbf"
        ],
        "x": 1495,
        "y": 585,
        "wires": []
    },
    {
        "id": "8ca8bba88825bbbf",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link in 14",
        "links": [
            "bf7a7388b5301e71"
        ],
        "x": 480,
        "y": 765,
        "wires": [
            [
                "84013a96084c3eeb"
            ]
        ]
    },
    {
        "id": "ad642f1caae66ae0",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "7a96fcc940243435"
        ],
        "x": 1515,
        "y": 630,
        "wires": []
    },
    {
        "id": "7a96fcc940243435",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link in 15",
        "links": [
            "ad642f1caae66ae0"
        ],
        "x": 480,
        "y": 810,
        "wires": [
            [
                "599095620e383bff"
            ]
        ]
    },
    {
        "id": "9180b7c3e7a90c3b",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 555,
        "wires": [
            [
                "f28eb465e5ea874e"
            ]
        ]
    },
    {
        "id": "972b3c581c06be97",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "history",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 600,
        "wires": [
            [
                "f28eb465e5ea874e"
            ]
        ]
    },
    {
        "id": "d7df7b218b99fd38",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "completed",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 645,
        "wires": [
            [
                "f28eb465e5ea874e"
            ]
        ]
    },
    {
        "id": "7df2d1f5915898bf",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "create file if it does not exist",
        "info": "",
        "x": 405,
        "y": 525,
        "wires": []
    },
    {
        "id": "aaf22c351dd47989",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "write to completed.json",
        "info": "",
        "x": 365,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e8a45a4aa7a22874",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "write to history.json",
        "info": "",
        "x": 335,
        "y": 1410,
        "wires": []
    },
    {
        "id": "ba3c1b4d0beb6c45",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "send queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1080,
        "wires": [
            [
                "db7b2ef040edf421"
            ]
        ]
    },
    {
        "id": "c8587dfc70e3e4c5",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "queueJsonUpdate in",
        "links": [
            "9378b1ab33eb5d57"
        ],
        "x": 240,
        "y": 1080,
        "wires": [
            [
                "ba3c1b4d0beb6c45"
            ]
        ]
    },
    {
        "id": "ed112941d5cdd4e7",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "queueJsonUpdate in",
        "links": [
            "5770aad48055a0a4",
            "d60c51234f236dd7",
            "802f8ed5c059822d",
            "9cb2558db9346cae",
            "c652b7a0d3a05071"
        ],
        "x": 240,
        "y": 1245,
        "wires": [
            [
                "ba3c1b4d0beb6c45",
                "76eee9a189e80361"
            ]
        ]
    },
    {
        "id": "db7b2ef040edf421",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 600,
        "y": 1065,
        "wires": [
            [
                "d54b27e714abae2f"
            ]
        ]
    },
    {
        "id": "76eee9a189e80361",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "send queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1245,
        "wires": [
            [
                "df7a8363391ef95f"
            ]
        ]
    },
    {
        "id": "80dd2ac395ededd3",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "send queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 615,
        "y": 1320,
        "wires": [
            [
                "db7b2ef040edf421",
                "5714ac0a75f5ed73"
            ]
        ]
    },
    {
        "id": "8d2ad3a3e8ccf1ed",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1050,
        "wires": [
            [
                "db7b2ef040edf421"
            ]
        ]
    },
    {
        "id": "d54b27e714abae2f",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 700,
        "y": 1065,
        "wires": [
            [
                "5714ac0a75f5ed73"
            ]
        ],
        "l": false
    },
    {
        "id": "df7a8363391ef95f",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 615,
        "y": 1215,
        "wires": [
            [
                "a54e9d7aad7ac38c"
            ]
        ]
    },
    {
        "id": "3cc72650169eec95",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "forceQueueJsonUpdate in",
        "links": [
            "8f9a1f49027a6915",
            "791b4bdbf17ea41b"
        ],
        "x": 345,
        "y": 1320,
        "wires": [
            [
                "80dd2ac395ededd3"
            ]
        ],
        "l": true
    },
    {
        "id": "5714ac0a75f5ed73",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 835,
        "y": 1065,
        "wires": [
            [
                "e1d5767241a4aac7"
            ]
        ],
        "l": false
    },
    {
        "id": "df13ffa0e29a0380",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "triggerQueueJsonUpdate_in",
        "links": [
            "fd4bd9bffc26442c",
            "a835f7dcfb37a653",
            "83756693d2a8dde5",
            "302229dd36a529de",
            "54c15219622965ed"
        ],
        "x": 240,
        "y": 1050,
        "wires": [
            [
                "8d2ad3a3e8ccf1ed"
            ]
        ]
    },
    {
        "id": "50a1ab1b5b2e763e",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "1s",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "control",
        "payload": "trigger",
        "payloadType": "str",
        "x": 390,
        "y": 1215,
        "wires": [
            [
                "df7a8363391ef95f"
            ]
        ]
    },
    {
        "id": "a54e9d7aad7ac38c",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 735,
        "y": 1215,
        "wires": [
            [
                "ca8e8ce8b25e297e"
            ]
        ],
        "l": false
    },
    {
        "id": "b3b14f1983dbbd12",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "filter",
        "func": "const table=msg.payload;\nconst last = context.get(\"last\") ?? {};\n\nfunction passThrough(){\n    context.set(\"last\", table);\n    node.send(msg);\n}\n\nfor(let row of table){\n    let keys=Object.keys(row);\n    if(!keys)\n        if(!Object.keys(last)){\n            passThrough();\n            node.warn(\"bothEmpty\");\n            return;\n        }\n            \n    if(table.length != last.length){\n        passThrough();\n        node.warn(\"different lengths\");\n        return;\n    }\n    let i=0;\n    for(let k of keys)\n        if(!last[i].hasOwnProperty(k) || row[k]!==last[i][k]){\n            node.warn({l:last,n:row,k:k,i:i});\n            passThrough();\n            return\n        }\n}\n\n//if you get here they were equal\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 585,
        "y": 1125,
        "wires": [
            [
                "5714ac0a75f5ed73"
            ]
        ]
    },
    {
        "id": "e1d5767241a4aac7",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "",
        "filename": ".\\orders\\queue.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 960,
        "y": 1065,
        "wires": [
            [
                "8135493bd3dc4370"
            ]
        ]
    },
    {
        "id": "ca8e8ce8b25e297e",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "orders.queue.table",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 1215,
        "wires": [
            [
                "3b4e5ec5a43dcaa1",
                "9378b1ab33eb5d57"
            ]
        ]
    },
    {
        "id": "bd4440f663b8fa9f",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "poll 20s flow.queue",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "orders.queue",
        "payloadType": "flow",
        "x": 405,
        "y": 1125,
        "wires": [
            [
                "b3b14f1983dbbd12"
            ]
        ]
    },
    {
        "id": "8135493bd3dc4370",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "written queue.json",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1175,
        "y": 1065,
        "wires": []
    },
    {
        "id": "c4e6970ead724f13",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "filter",
        "func": "const table=msg.payload;\nconst last = context.get(\"last\") ?? {};\n\nfunction passThrough(){\n    context.set(\"last\", table);\n    node.send(msg);\n}\n\nfor(let row of table){\n    let keys=Object.keys(row);\n    if(!keys)\n        if(!Object.keys(last)){\n            passThrough();\n            node.warn(\"bothEmpty\");\n            return;\n        }\n            \n    if(table.length != last.length){\n        passThrough();\n        node.warn(\"different lengths\");\n        return;\n    }\n    let i=0;\n    for(let k of keys)\n        if(!last[i].hasOwnProperty(k) || row[k]!==last[i][k]){\n            node.warn({l:last,n:row,k:k,i:i});\n            passThrough();\n            return\n        }\n}\n\n//if you get here they were equal\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1275,
        "wires": [
            [
                "ca8e8ce8b25e297e"
            ]
        ]
    },
    {
        "id": "3b4e5ec5a43dcaa1",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "set orders.queue.table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1230,
        "wires": []
    },
    {
        "id": "9378b1ab33eb5d57",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "write queue.json out",
        "mode": "link",
        "links": [
            "c8587dfc70e3e4c5",
            "cd5102106b5a9578"
        ],
        "x": 1185,
        "y": 1200,
        "wires": []
    },
    {
        "id": "232ea9b29c931a62",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "poll 1s flow.queueTable",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "queueTable",
        "payloadType": "flow",
        "x": 545,
        "y": 1275,
        "wires": [
            [
                "c4e6970ead724f13"
            ]
        ]
    },
    {
        "id": "be43df984cc12219",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "write to queue.json",
        "info": "",
        "x": 330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d111c07926a908c5",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "queueTable event out",
        "mode": "link",
        "links": [
            "2304d8a10ed9b149",
            "34fe0f797682d4b7"
        ],
        "x": 1155,
        "y": 3255,
        "wires": [],
        "l": true
    },
    {
        "id": "bc155cd9a662d3f9",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "reset buttons & plc",
        "func": "let table = msg.payload;\nconst tabUtils = flow.get(\"tabUtils\");\n\n/*\nfunction updateButtons(table){\n    const tabUtils = flow.get(\"tabUtils\");\n    const button=tabUtils.queue.sendToPressButton;\n\n    for(let row of table){\n        let i=0,fieldName;\n        while(fieldName=\"sendToPressa\"+(i++) && row.hasOwnProperty(fieldName)){\n            if (button.getStateString(row[fieldName+\"State\"]) == \"queued\"){\n                \n                //setSingleState(\"clickToSend\")\n                node.send({ topic: fieldName, payload: row });\n                \n            }\n            else if(button.getStateString(row[fieldName+\"State\"]) == \"clearing\")\n                button.setSingleState(\"loaded\")\n            \n        }\n        \n    }\n}*/\n\nfunction resetButtons(table){\n    const tabUtils = flow.get(\"tabUtils\");\n    const button = tabUtils.queue.sendToPressButton;\n\n    if(table.length){\n        let row = table[0];\n        let i = 1, fieldName;\n        while ((fieldName = \"sendToPressa\" + (i++)) && row.hasOwnProperty(fieldName))\n            node.send({ topic: fieldName, action: \"clear\", payload: row }, { press: \"pressa\" + i, topic: fieldName, action: \"clear\", payload: row });\n    }\n\n    /*//for each sendTo button of each row\n    for (let row of table) {\n        let i = 1, fieldName;\n        while ((fieldName = \"sendToPressa\" + (i++)) && row.hasOwnProperty(fieldName)) {\n            //button.setSingleState(\"loaded\",); //not strictly necessary..\n            let pressNum = i;\n            //emulate \"clear\" feedback\n            node.warn({\"sent\": { topic: fieldName, action: \"clear\", payload: row }})\n            node.send({topic:fieldName, action:\"clear\", payload:row}, {press:\"pressa\"+pressNum, topic:fieldName, action:\"clear\", payload:row});\n        }\n    }*/\n}\n\n\nfunction wait(callback,param){\n    if(!flow.get(\"tabUtils\"))\n        context.set(\"id\",  setTimeout(wait, 1000, callback, param),  ()=>{node.error(\"asyncContextError in 'reset buttons & plc'\")})\n    else\n        callback(param);\n}\n\nwait(resetButtons,table);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nclearTimeout(context.get(\"id\"));",
        "libs": [],
        "x": 890,
        "y": 690,
        "wires": [
            [
                "55d2fb1e2f4239c6"
            ],
            [
                "c30ca4565e0d218f"
            ]
        ]
    },
    {
        "id": "c30ca4565e0d218f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "mixed sendToPressRequests out",
        "mode": "link",
        "links": [
            "8cc8b8736d1102b3",
            "584b8fd433a7e2cd"
        ],
        "x": 1160,
        "y": 705,
        "wires": [],
        "l": true
    },
    {
        "id": "55d2fb1e2f4239c6",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "sendToPressRequest done out",
        "mode": "link",
        "links": [
            "db8b2173015ac88c",
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "ee7df6ca341a90cc",
            "c6c146143c41ddfa",
            "9b865d08e3a9ac6c",
            "f3860e59347fd377",
            "8c2c42bc9a8767e9",
            "645349eefb80cd73"
        ],
        "x": 1150,
        "y": 675,
        "wires": [],
        "l": true
    },
    {
        "id": "73bd49c19cb4ea06",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "historyTable event out",
        "mode": "link",
        "links": [],
        "x": 1030,
        "y": 4095,
        "wires": [],
        "l": true
    },
    {
        "id": "34fe2b838d57bdf8",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "completedTable event out",
        "mode": "link",
        "links": [],
        "x": 1050,
        "y": 4740,
        "wires": [],
        "l": true
    },
    {
        "id": "9f767a4b86454460",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "pressa1 allProdExc oncePerCycleEnd in",
        "links": [
            "479532ec132fba80",
            "4f79875f6a420854"
        ],
        "x": 2095,
        "y": 1950,
        "wires": [
            [
                "7f9c0ab46277a85f"
            ]
        ],
        "l": true
    },
    {
        "id": "7f9c0ab46277a85f",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2355,
        "y": 1950,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "935ab1c92ceb192a",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2500,
        "y": 2010,
        "wires": [
            [
                "ba40bf7df49ff334",
                "1357b3ee16a3cc63",
                "8437a7d22a9f64c3"
            ]
        ],
        "l": false
    },
    {
        "id": "d2554bc4cfd2945f",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2355,
        "y": 1990,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "a0ea58ab11051947",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2355,
        "y": 2030,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "545e9a9385547c1a",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2355,
        "y": 2070,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "ba40bf7df49ff334",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "push to historyTable",
        "func": "var plcData = msg.payload;\nlet refreshMsg = msg;\nvar historyTable = flow.get(\"historyTable\");\nconst tabUtils = flow.get(\"tabUtils\");\n\nlet row=tabUtils.history.newRow(tabUtils.newRowId(historyTable));\n\nrow.id = plcData.prod_id;\nrow.quantProd = plcData.prod_quantProd;\nrow.status = plcData.exc_status;\nrow.cycleNumber = plcData.prod_cycleNumber;\nrow.press = msg.press;\nrow.statusAsString = (plcData.exc_status == \"2\" || plcData.exc_status == 2) ? \"parz.\" : \"compl.\";\n\nhistoryTable.push(row);\n\n\nflow.set(\"historyTable\", historyTable);\nnode.send(refreshMsg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2665,
        "y": 2020,
        "wires": [
            [
                "23a5a7bba4747615",
                "36bdb368ddeac984"
            ]
        ]
    },
    {
        "id": "1357b3ee16a3cc63",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "ifOrderCompleted -> update tables",
        "func": "var plcData=msg.payload;\nvar queueTable=flow.get(\"queueTable\");\nconst tabUtils = flow.get(\"tabUtils\");\nconst button = tabUtils.queue.sendToPressButton;\nconst pressNum = msg.press.match(/([0-9]+)$/)[1];\nconst db = global.get(\"db\");\n\n\n   /* data as associative array\nvar posOf={};\nfor (let i=0, item; i<plcData.length; i++) {\n    item = plcData[i];\n    posOf[item.topic]=i;\n} */\n//let posOf=msg.posOf; //data as associative array //like payload[posOf[\"fieldName\"]];\n\n//select the row with the produced id\nlet idx = 0;\nfor(let row of queueTable){\n    if(row.id == plcData.prod_id){\n        //if(button.isLoaded(\"sendToPressa\"+pressNum,queueTable[idx])){\n            node.warn(\"editing row \"+idx);\n            break;\n        //}\n    }\n    idx++;\n}\n\n//check if the row needs moving\nif(idx < queueTable.length && queueTable.length && (plcData.exc_quantProd != null && plcData.exc_quantToDo != null)){\n    node.warn(\"should update \"+(idx+1)+\"° row\");\n    //plc is actually in charge of increment/decrement (necessary? no. requested? yes.)\n    queueTable[idx].quantProd = plcData.exc_quantProd; //updated elsewhere as well\n    queueTable[idx].quantToDo = plcData.exc_quantToDo;\n\n    const deleteQueryTemplate = \"DELETE FROM oven.italmatic_exchange WHERE ORDER_ID = ? AND STATUS <> 'w'\";\n    //if prod >= toDo\n        //move to completed\n    if (plcData.exc_quantProd >= plcData.exc_quantToDo) {\n        var completedTable = flow.get(\"completedTable\");\n            //crea nuova riga\n        let row = tabUtils.completed.newRow(tabUtils.newRowId(completedTable));\n        node.warn({newrow:row}); //DBG\n        row.cycleNumber = plcData.prod_cycleNumber;\n        row.id = plcData.prod_id;\n        row.quantProd = queueTable[idx].quantProd;\n        row.note = queueTable[idx].note;\n            //move\n        completedTable.push(row);\n        node.send([null, null, db.attachQuery(db.sqlString.format(deleteQueryTemplate, queueTable[idx].id))])\n        tabUtils.deleteRow(idx, queueTable);\n\n        node.send([null, { topic: \"refresh\", payload: \"completedTable\" }]);\n        node.warn(\"moved\");\n    }\n    else{\n        node.warn(\"not done\")\n        node.send([{ topic: \"refresh\", payload: \"queueTable\" }, null]);\n    }\n}\nelse{\n    node.warn({txt:\"no matching id in queueTable for \"+plcData.prod_id,plcData:plcData,qTab:queueTable});\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2705,
        "y": 1950,
        "wires": [
            [
                "5cd9e3ef9922f088"
            ],
            [
                "1fbf3d438abed790"
            ],
            [
                "bcbe8427d40b3549"
            ]
        ]
    },
    {
        "id": "2751f8a9a425be69",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "pressa2 allProdExc oncePerCycleEnd in",
        "links": [
            "ca8804a273a54375"
        ],
        "x": 2095,
        "y": 1990,
        "wires": [
            [
                "d2554bc4cfd2945f"
            ]
        ],
        "l": true
    },
    {
        "id": "85e4a01c096f28a3",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "pressa3 allProdExc oncePerCycleEnd in",
        "links": [
            "9c82842ac58cdc40"
        ],
        "x": 2095,
        "y": 2030,
        "wires": [
            [
                "a0ea58ab11051947"
            ]
        ],
        "l": true
    },
    {
        "id": "92d32ee8e1251cea",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "pressa4 allProdExc oncePerCycleEnd in",
        "links": [
            "bf32410fd1d62452"
        ],
        "x": 2095,
        "y": 2070,
        "wires": [
            [
                "545e9a9385547c1a"
            ]
        ],
        "l": true
    },
    {
        "id": "23a5a7bba4747615",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "refreshHistoryTable_out",
        "mode": "link",
        "links": [
            "0933e76415d3b0d8",
            "1d1e8e2742a7dcf8",
            "a6ed287fa626363b"
        ],
        "x": 2965,
        "y": 2030,
        "wires": [],
        "l": true
    },
    {
        "id": "36bdb368ddeac984",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "refresh hist",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2925,
        "y": 2070,
        "wires": []
    },
    {
        "id": "5cd9e3ef9922f088",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 3015,
        "y": 1895,
        "wires": [],
        "l": true
    },
    {
        "id": "1fbf3d438abed790",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "refreshCompletedTable_out",
        "mode": "link",
        "links": [
            "15870b35cd8f1905"
        ],
        "x": 3025,
        "y": 1940,
        "wires": [],
        "l": true
    },
    {
        "id": "b83d044ecee3faf8",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "update tables with plcData",
        "info": "",
        "x": 2095,
        "y": 1870,
        "wires": []
    },
    {
        "id": "4c8e5c82af533d36",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "handle clicked rows interactivity",
        "func": "//aliases for readablility\nlet activeRow = msg.payload;\nlet activeFieldName = msg.topic;\nlet refreshMsg = msg;\n//params //may someday move to a flow.variable or obj\nconst allowMultRowSel = flow.get(\"allowMultRowSel\") ?? true; //t|f if set it allows user to set an order to track multiple presses at once, by ticking more than one button on the same row\nconst requestPopup = (id)=>{return {\"popupId\":id, \"srcMsg\":msg}}\nconst isDbgOn = false;\n//restituisce l'indice della riga con rowId==rowId in table\n//const posOf = flow.get(\"tabUtils\").posOf;\n/*\nfunction posOf(rowId,table){\n    //node.warn(\"posOf\"); \n        //probable shortcut\n    if(table[rowId].rowId==rowId)\n        return rowId;\n    let i=0\n    for(let row of table) {\n        //node.warn(\"posOf:\"+i); \n        if(row.rowId==rowId)\n            return i;\n        i++;\n    }\n}*/\n\n\n\n\n//deleteButton\n//create a NEW table without the row that needs to be deleted //preserves table[rowId].rowId == rowId\n//then refresh frontend\nif (activeFieldName == \"deleteButton\") {\n    const tabUtils = flow.get(\"tabUtils\");\n    //check that the order is not loaded (deny if it is)\n    const button = tabUtils.queue.sendToPressButton;\n    if ([0,1, 2, 3].some(idx => button.getStateString(activeRow[\"sendToPressa\" + (idx + 1) + \"State\"]) != \"clickToSend\")){\n        return [refreshMsg, null, requestPopup(\"deleteDenied_inUse\")]\n    }\n    \n\n    let table = flow.get(\"queueTable\");\n    let updatedTable = new Array();\n    for (let row of table) {\n        if (row.rowId != msg.payload.rowId)\n            updatedTable.push(row);\n    }\n\n    flow.set(\"queueTable\", updatedTable);\n    //refresh frontend\n    return refreshMsg;\n}\n\n//sendToPressa\nelse if (/sendToPressa/.test(activeFieldName)) {\n    let table = flow.get(\"queueTable\");\n    let tabUtils = flow.get(\"tabUtils\");\n    let button = tabUtils.queue.sendToPressButton;\n    let activeRowIdx = tabUtils.posOf(activeRow.rowId, table);\n    let pressNum = activeFieldName.match(/sendToPressa([0-9]+)/)[1];\n\n    \n    let state = activeRow[activeFieldName + \"State\"] //ex. sendToPressa1State // 0 \"clickToSend\" | 1 \"loaded\" | -1 \"error\"\n    //state = !state; //loaded/error -> clickToSend   |   clickToSend -> loaded\n\n    let updateAndRefresh = ()=>{\n        flow.set(\"queueTable\", table);\n        node.warn({ clicked: button.getStateString(state), fr0m: activeFieldName, appliedTo: activeRow });\n        msg.press = \"pressa\" + pressNum;\n        return [refreshMsg, msg];\n    }\n\n    switch (button.getStateString(state)) {\n        //load order in db\n        case \"clickToSend\": {\n            //set it to queued\n            button.setSingleState(\"queued\", activeFieldName, table[activeRowIdx]);\n            msg.action = \"load\";\n            return updateAndRefresh();\n        }\n        case \"queued\": {\n            return null;\n        }\n        //delete order from db\n        case \"loaded\": {\n            //just set it to clearing\n            button.setSingleState(\"clearing\", activeFieldName, table[activeRowIdx]);\n            msg.action = \"delete\";\n            return updateAndRefresh();\n        }\n        case \"clearing\": {\n            return null;\n        }\n    }\n}\n//updates flow.table without refreshing frontend\nelse {\n    //flow.set(\"queueTable\", msg.options.data);\n\n\n    let table = flow.get(\"queueTable\");\n    let tabUtils = flow.get(\"tabUtils\");\n    let button = tabUtils.queue.sendToPressButton;\n    let activeRowIdx = tabUtils.posOf(activeRow.rowId, table);\n\n\n    /*let inUse=false,i=0,stateString=\"\";\n    while (stateString =  && stateString !== undefined){\n        \n    }\n    */\n    let inUse = false;\n    for (let i = 0; i < 4; i++) {\n        if (button.getStateString(activeRow[\"sendToPressa\" + (i + 1) + \"State\"]) != \"clickToSend\") {\n            inUse = true;\n            break;\n        }\n    }\n    /*\n        //loop isGateOpen, breaks on false holding edit=false or on undefined holding edit=true\n    let editable=true,i=0;\n    do{\n        editable = global.get(\"pressa\" + (++i) + \"_isGateOpen\");\n    }while (global.get(\"pressa\" + (i+1) + \"_isGateOpen\"))\n    */\n    if (inUse) {\n        //return [refreshMsg] //de-update table\n        return [refreshMsg, null, requestPopup(\"editDenied_inUse\")];\n    }\n    else {\n        if(activeFieldName == \"id\"){\n            if (table.some(row => row.rowId != activeRow.rowId && row.id == activeRow.id)){\n                return [refreshMsg, null, requestPopup(\"editDenied_dupId\")];\n            }\n        }\n        flow.set(\"queueTable\", msg.options.data);\n        return null;\n    }\n\n\n\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2220,
        "wires": [
            [
                "7f049357115c53e0"
            ],
            [
                "b841b6eefb58def0"
            ],
            [
                "fd35a10f22e96156"
            ]
        ]
    },
    {
        "id": "34fe0f797682d4b7",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "queueTable event in",
        "links": [
            "d111c07926a908c5"
        ],
        "x": 305,
        "y": 2220,
        "wires": [
            [
                "4c8e5c82af533d36"
            ]
        ],
        "l": true
    },
    {
        "id": "e579796d389a173e",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6c4911811d83d44b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isFeedback",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 655,
        "y": 2280,
        "wires": [
            [
                "4c8e5c82af533d36"
            ]
        ]
    },
    {
        "id": "7f049357115c53e0",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1105,
        "y": 2205,
        "wires": [],
        "l": true
    },
    {
        "id": "b841b6eefb58def0",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "route?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 935,
        "y": 2280,
        "wires": [
            [
                "7c8bd303c63bc52d",
                "2be7091d11a4cd0b"
            ]
        ]
    },
    {
        "id": "ee7df6ca341a90cc",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6c4911811d83d44b",
        "name": "pressa1 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "a992bf0170cdc157"
        ],
        "x": 345,
        "y": 2280,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "f3860e59347fd377",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6c4911811d83d44b",
        "name": "pressa2 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "597b8d08f336dbe5"
        ],
        "x": 345,
        "y": 2320,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "8c2c42bc9a8767e9",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6c4911811d83d44b",
        "name": "pressa3 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "6deb423e38b82d31"
        ],
        "x": 345,
        "y": 2360,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "645349eefb80cd73",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6c4911811d83d44b",
        "name": "pressa4 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "e645d7e9aa1008c1"
        ],
        "x": 345,
        "y": 2400,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "7c8bd303c63bc52d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6c4911811d83d44b",
        "name": "mixed sendToPressRequests out",
        "mode": "link",
        "links": [
            "8cc8b8736d1102b3",
            "584b8fd433a7e2cd"
        ],
        "x": 1175,
        "y": 2280,
        "wires": [],
        "l": true
    },
    {
        "id": "c9fa4cba41fe88a7",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "",
        "info": "no msg.press\npress inferred from topic: like \"sendToPressa1\"",
        "x": 570,
        "y": 2320,
        "wires": [],
        "l": false
    },
    {
        "id": "5e7a9cab577dae64",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "handle button clicks and field edits",
        "info": "",
        "x": 380,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8437a7d22a9f64c3",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "tables max length",
        "func": "//leftshift history when longer than maxLength\nlet table = flow.get(\"historyTable\");\nlet maxLength = 5000;\nlet newLength = 4200;\nif(table.length >= 5000){\n    let diff = table.length - newLength;\n    for(let i=0; i<newLength; i++)\n        table[i] = table[i+diff];\n    table.length = newLength;\n}\nflow.set(\"historyTable\",table);\n\n//leftshift completed when longer than maxLength\ntable = flow.get(\"completedTable\");\nmaxLength = 5000;\nnewLength = 4200;\nif (table.length >= 5000) {\n    let diff = table.length - newLength;\n    for (let i = 0; i < newLength; i++)\n        table[i] = table[i + diff];\n    table.length = newLength;\n}\nflow.set(\"completedTable\",table);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2655,
        "y": 2070,
        "wires": [
            []
        ]
    },
    {
        "id": "a72b1c3580f09904",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "group": "b7f5c766a413446a",
        "name": "completedTable title",
        "order": 2,
        "width": "8",
        "height": "1",
        "format": "<span style=\"margin-left:60px;position:relative;top:10px;color=#0000a0;\"><h3> Ultimi Ordini Completati<h3></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 265,
        "y": 4650,
        "wires": [
            []
        ]
    },
    {
        "id": "78a704a3e466fce3",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "group": "b3c076eedf1fd2f8",
        "name": "historyTable title",
        "order": 2,
        "width": "8",
        "height": "1",
        "format": "<span style=\"margin-left:60px;position:relative;top:10px;color=#0000a0;\"><h3> Cronologia Cicli di Produzione<h3></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 3990,
        "wires": [
            []
        ]
    },
    {
        "id": "0ca3c958633a0c8b",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "7ca93f3dda4c162e",
        "group": "77dcdddb4f97461c",
        "name": "queueTable title",
        "order": 1,
        "width": "8",
        "height": "1",
        "format": "<span style=\"margin-left:60px;position:relative;top:10px;color=#0000a0;\"><h3> Nuovi Ordini<h3></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 425,
        "y": 2625,
        "wires": [
            []
        ]
    },
    {
        "id": "d460bca0cbc1bb94",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "update from db",
        "group": "77dcdddb4f97461c",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": true,
        "label": "aggiorna",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 410,
        "y": 2970,
        "wires": [
            [
                "012df9c64212c06a"
            ]
        ]
    },
    {
        "id": "f8159ca9b1e06221",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "update from db",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 430,
        "y": 3390,
        "wires": [
            [
                "54e249861b152273"
            ]
        ]
    },
    {
        "id": "54e249861b152273",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "get all exc",
        "func": "\n\nreturn global.get(\"db\").attachQuery(\"SELECT * FROM italmatic_exchange\", msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605,
        "y": 3390,
        "wires": [
            [
                "7e2311ad76cb3c12"
            ]
        ]
    },
    {
        "id": "7e2311ad76cb3c12",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "Query Oven DB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 625,
        "y": 3420,
        "wires": [
            [
                "d662ae27d28b1d56"
            ]
        ]
    },
    {
        "id": "d662ae27d28b1d56",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "set queueTable",
        "func": "const tabUtils = flow.get(\"tabUtils\");\nconst utils = global.get(\"utils\");\nconst isDbgOn = false;\n\nlet table = flow.get(\"queueTable\");\nlet dbTable = msg.payload;\n\nlet table_idMap = {};\ntable.forEach(row => table_idMap[row.id] = row);\n\nlet dbTable_idMap = {};\ndbTable.forEach(row => dbTable_idMap[row.ORDER_ID] = row);\n\n//merge dbTable on top of table\nfor(var row of dbTable){\n    let id = row.ORDER_ID\n    let tabRow = table_idMap[id];\n    //create new row if necessary\n    if (tabRow === undefined){\n        isDbgOn && node.warn({ txt: \"dbSync added row for \" + id, _from: row });\n        tabRow = tabUtils.queue.newRow(tabUtils.newRowId(table));\n        table.push(tabRow);\n        table_idMap[tabRow.id] = tabRow;\n    }\n    //merge\n    tabRow.id = id;\n    tabRow.quantToDo = row.QUANT_TO_DO;\n    tabRow.quantProd = row.QUANT_PROD;\n    tabRow.opStatus = row.STATUS;\n}\n\n// //check no id are dupes\nvar sorted = table.map(row => row).sort((r1,r2) => r1.id > r2.id ? 1 : -1);\nvar dupes = {};\nsorted.forEach((row,i) => {\n    if(i>0 && row.id == sorted[i-1].id){\n        if (!dupes[row.id]){\n            dupes[row.id] = new Array();\n            dupes[row.id].push(sorted[i - 1])\n        }\n        dupes[row.id].push(row);\n    }\n});\n\nisDbgOn && node.warn({sorted:sorted});\nfor(var [key,dupArr] of Object.entries(dupes)){\n    isDbgOn && node.warn({ \"err\": \"dupes found\", \"id\": dupArr?.[0]?.id, \"dupes\": dupArr });\n    let dupId = dupArr[0].id;\n    //salva la riga proveniente dal db, o arbitrariamente la prima se non esiste.\n    var validRow = dbTable.find(row => row.id == dupId) ?? utils.mergeRec({}, dupArr[0]);\n    //elimina tutte le righe duplicate\n    var rowIdToDelete = [];\n    table.forEach(row => {\n        if(row.id == dupId)\n            rowIdToDelete.push(row.rowId);\n    })\n    rowIdToDelete.forEach(rowId => tabUtils.deleteRowId(rowId, table));\n    //aggiungi riga sana\n    var newRow = tabUtils.queue.newRow(tabUtils.newRowId(table));\n    for(var key in newRow){\n        if(key != \"rowId\")\n            newRow[key] = validRow[key];\n    }\n}\n\n//update table buttons state\nlet button = tabUtils.queue.sendToPressButton;\nfor(var row of table){\n    //if is loaded\n    if (dbTable_idMap[row.id] !== undefined){\n        button.setSingleState(\"loaded\", \"sendToPressa1\", row);\n        isDbgOn && node.warn({txt:\"riga \"+row.id+\" set to loaded\",row:row});\n    }\n    else{\n        button.setSingleState(\"clickToSend\", \"sendToPressa1\", row);\n        isDbgOn && node.warn({ txt: \"riga \" + row.id + \" set to clickToSend\", row: row });\n    }\n}\n\nisDbgOn && node.warn({txt:\"queueTable set to\",tab:table,tabMap:table_idMap,dbMap:dbTable_idMap});\n\nmsg.queueTable_idMap = table_idMap;\nmsg.dbExcTable_idMap = dbTable_idMap;\nmsg.dbExcTable = dbTable;\nmsg.payload = table;\nflow.set(\"queueTable\", table);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 3450,
        "wires": [
            [
                "d4ffa269abe8be44",
                "53b729e6e0afd102"
            ]
        ]
    },
    {
        "id": "81c74a7bb0cf5c3f",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "",
        "info": "aggiorna tutti i campi della tabella ed i relativi bottoni\nusando il db come fonte di verità",
        "x": 300,
        "y": 3420,
        "wires": [],
        "l": false
    },
    {
        "id": "e77d995be2094fb5",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 450,
        "y": 2940,
        "wires": [
            [
                "012df9c64212c06a"
            ]
        ],
        "l": false
    },
    {
        "id": "012df9c64212c06a",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 510,
        "y": 2970,
        "wires": [
            [
                "5f3b07e62ec175fb"
            ]
        ],
        "l": false
    },
    {
        "id": "8cdecaaac60aee44",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "queueTable_updateFromDb",
        "links": [
            "5f3b07e62ec175fb"
        ],
        "x": 395,
        "y": 3360,
        "wires": [
            [
                "f8159ca9b1e06221"
            ]
        ],
        "l": true
    },
    {
        "id": "5f3b07e62ec175fb",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "queueTable_updateFromDb",
        "mode": "link",
        "links": [
            "8cdecaaac60aee44"
        ],
        "x": 690,
        "y": 2970,
        "wires": [],
        "l": true
    },
    {
        "id": "22a43313b4628e06",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 360,
        "y": 2775,
        "wires": [
            [
                "cd2a3e7d433fb3e9"
            ]
        ],
        "l": false
    },
    {
        "id": "f97cc9e5d5d42826",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 420,
        "y": 2850,
        "wires": [
            [
                "8f9a1f49027a6915",
                "513dc6bfb2e965e7",
                "44ede18dded35aa0"
            ]
        ],
        "l": false
    },
    {
        "id": "a90666131d7bec15",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 450,
        "y": 3255,
        "wires": [
            [
                "9cb2558db9346cae",
                "da664ace067df2dc"
            ]
        ],
        "l": false
    },
    {
        "id": "9f4265f50b02e400",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 895,
        "y": 3408,
        "wires": [
            [
                "a90666131d7bec15"
            ]
        ],
        "l": false
    },
    {
        "id": "bcbe8427d40b3549",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "Query Oven DB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2985,
        "y": 1985,
        "wires": [
            [
                "f1dbd319d32509fd",
                "c6aaa02b97c6aeb4"
            ]
        ]
    },
    {
        "id": "f1dbd319d32509fd",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "error",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3140,
        "y": 1985,
        "wires": [
            [
                "5cd9e3ef9922f088"
            ],
            [
                "5cd9e3ef9922f088"
            ]
        ]
    },
    {
        "id": "9092a021f289e095",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "name": "dbQIsErr(msg);",
        "func": "\nreturn msg.dbQIsErr(msg) ? [msg, null] : [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3340,
        "y": 1995,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c6aaa02b97c6aeb4",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "6b0818d4a0baca5e",
        "name": "warn if nothing deleted",
        "func": "\nif(msg.sql)\n    if (msg.sql.match(/\\s*DELETE/) && msg.payload.affectedRows == 0){\n        node.error({txt:\"[WARN] no rows deleted (vincolo non rispettato?)\", full:msg});\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3195,
        "y": 2015,
        "wires": [
            []
        ]
    },
    {
        "id": "5fae85f555051914",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 4695,
        "wires": [
            [
                "e330946719521da8"
            ]
        ],
        "l": false
    },
    {
        "id": "3a3d55aed0a8122b",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 555,
        "wires": [
            [
                "9180b7c3e7a90c3b"
            ]
        ],
        "l": false
    },
    {
        "id": "64760c8d5f230ea3",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 600,
        "wires": [
            [
                "972b3c581c06be97"
            ]
        ],
        "l": false
    },
    {
        "id": "4c8dc23b12353cf6",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 645,
        "wires": [
            [
                "d7df7b218b99fd38"
            ]
        ],
        "l": false
    },
    {
        "id": "92ada735b313aded",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "refreshCompletedTable_out",
        "mode": "link",
        "links": [
            "15870b35cd8f1905"
        ],
        "x": 1515,
        "y": 870,
        "wires": [],
        "l": true
    },
    {
        "id": "95a4cfea0458c7b9",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "refreshHistoryTable_out",
        "mode": "link",
        "links": [
            "0933e76415d3b0d8",
            "a6ed287fa626363b"
        ],
        "x": 1480,
        "y": 795,
        "wires": [],
        "l": true
    },
    {
        "id": "a99d6bf6adb7c08b",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "switch error",
        "func": "node.error(\"unknown origin \"+msg.origin,msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "fad7e78f46d1c5dc",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "warn",
        "func": "node.warn({warn:\"generato file per \"+msg.origin+\" table\", full:msg});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "39d4ad4835d15c8a",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "group": "8c268b6bfa27c24a",
        "name": "popupRouter",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div style=\"display:none\">\n    <div note=\"[popupRouter] example content\">\n        <p>The number is</p>\n        <font color=\"{{((msg.payload || 0) % 2 === 0) ? 'green' : 'red'}}\">\n            {{(msg.payload || 0) % 2 === 0 ? 'even' : 'odd'}}\n        </font>\n    </div>\n    <script note=\"[popupRouter] create popup container\">\n        //create popup container\n        $(function () {\n            if(!window.popupRouter_InitCalled){\n                window.popupRouter_InitCalled = true;\n                pushFunctions(); //append utils and popup pseudo-classes to windows.functions \n\n                var popupCont = document.createElement(\"div\");\n                popupCont.classList.add(\"popup-container\");\n                popupCont.id = \"mainPopupContainer\";\n                \n\n                //document.getElementsByTagName(\"body\")[0].append(popupCont);\n                let mainSect = getMainSect();\n                mainSect.append(popupCont);\n                console.log(\"[popupRouter][init()] appended popupContainer to \", mainSect, popupCont);\n            }else{\n                console.log(\"[popupRouter][init()] skipping init (popupRouter_InitCalled is def)\");\n            }\n            \n\n            function getMainSect(){\n                var mainSect = null;\n                for(el of document.getElementsByTagName(\"md-content\")[0].children){\n                    if(/section/i.test(el.tagName)){\n                        mainSect = el;\n                        break;\n                    }\n                }\n                if(!mainSect)\n                    console.warn(\"getMainSect(): not found\",mainSect);\n                //mainSect === null ? console.warn(\"mainSect:\",mainSect) : console.log(\"mainSect:\",mainSect);\n                return mainSect;\n            }\n        });\n        \n        function pushFunctions(){\n            let root = window.functions ?? (window.functions = new Object());\n            //import some utils. //avoid overwriting\n            root.utils ??= {};\n            root.utils = mergeRec(root.utils ,{\n                /** recursively merge two Objects\n                    * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n                    * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n                    * - -res.a===main.a\n                    * - -res.c===sec.c\n                    * - -res.b!==sec.b2\n                    * @param {Object} main\n                    * @param {Object} sec */\n                \"mergeRec\":mergeRec,\n                /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n                     * @param {any} value accepts anything\n                     * @returns {boolean}\n                     *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n                     */\n                \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n                    return !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n                        // it has a prototype that's also truthy\n                        !!(value = Object.getPrototypeOf(value)) &&\n                        // which has `null` as parent prototype\n                        !Object.getPrototypeOf(value);\n                },\n                /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n                 *      skip non-function, assign wrapped to their original key\n                 *  @param root {Object} the object to parse for functions\n                 *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n                \"wrapFunctions\": function wrapFunctions(root, prefix) {\n                    prefix ?? console.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n                    const isPlainObj = this.isPlainObj;\n                    //recursively parse root\n                    //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n                    let desc;\n                    for (let k in root) {\n                        if (isPlainObj(root[k]))\n                            root[k] = wrapFunctions.call(this, root[k], prefix + `.${k}`);\n                        else if (//is a simple function, or an arrow function\n                            //value of root[k] has type function\n                            typeof (root[k]) == \"function\"\n                            //root[k] itself is a function, not the result of it's getter call\n                            && (desc = Object.getOwnPropertyDescriptor(root, k)).value !== undefined    // @ts-ignore\n                            && !desc.get\n                        ) {\n                            //wrap in an exception catching function\n                            //trace errors back to their source, independently of the caller\n                            let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                            root[k] = function (...args) {\n                                try {\n                                    return cb.call(this, ...args)\n                                } catch (e) {\n                                    e.nrStack = (e.nrStack ?? []);\n                                    e.nrStack.push({ summ: `at ${k}(${args.join(\", \")}) of ${prefix}`, fName: k, args: args, root: prefix, err: e.message, e: e });\n                                    e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                                    //console.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                                    throw e;\n                                }\n                            }\n                        }\n                    }\n                    return root;\n                }.bind(root.utils),\n                \"fromHtml\":function fromHtml(html, appendTo=document){\n                    if(arguments.length != fromHtml.length) throw new Error(\"arg length mismatch. \"+arguments.length+\"/\"+fromHtml.length);\n                    let factory = document.createElement(\"div\");\n                    // if(!factory){\n                    //     factory=document.createElement(\"div\");\n                    //     factory.id = \"htmlFactory\";\n                    //     factory.style.display = \"none\";\n                    //     factory.position = \"absolute\";\n                    //     document.lastElementChild.append(factory);\n                    // }\n                    factory.innerHTML = html;\n                    if(factory.children.length > 1)\n                        console.error(\"[<globFuncs>.utils.fromHtml()] more than 1 element created, when only the first will be returned.\",arguments,\"\\n->\",factory.children,);\n                    return factory.firstElementChild ?? console.error(\"[<globFuncs>.utils.fromHtml()] nothing created. returned null\",arguments);\n                },\n                /** some characters do not have an uppercase equivalent. They are considered to be lowercase by this func */\n                \"isLowerCase\":function isLowerCase(ch=null){\n                    return ch!==null && ch == ch?.toLowerCase?.();\n                }\n            });\n            //root.utils.wrapFunctions(root.utils,\"[<globFuncs>.utils]\");\n            //popup-specific functions\n            root.popup = {};\n            root.popup = root.utils.mergeRec(root.popup, {\n                \"getTemplate\":function getTemplate(type=\"info\",text=\"\"){\n                    const utils = window.functions.utils;\n                    if(!utils.isLowerCase(type?.[0]))\n                        type = type.toLowerCase();\n                    switch(type){\n                        default:{ console.warn(\"[<globFuncs>.utils] getTemplate(): invalid type \",type, \".used info\"); }\n                        case \"std\":\n                        case \"info\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"err\":\n                        case \"error\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup error\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"warn\":\n                        case \"warning\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup warning\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                    }\n                    \n                },\n                \"push\": function push(popup){\n                    document.getElementById(\"mainPopupContainer\").prepend(popup);\n                    return popup;\n                }.bind(root.popup),\n                \"popOlder\": function pop(){\n                    let cont = document.getElementById(\"mainPopupContainer\");\n                    var removed = cont.lastElementChild;\n                    if(cont.children.length)\n                        cont.lastElementChild?.remove?.();\n                    return removed;\n                },\n                \"show\":function show(type=\"info\",content=\"\",selfCloseMs=null, dismissable = true){\n                    const utils = window.functions.utils;\n                    var pUpClass = this;\n                    var popup = this.getTemplate(type, content);\n                    if(selfCloseMs !== null){\n                        setTimeout(()=>{\n                            for(var el of document.getElementById(\"mainPopupContainer\").children){\n                                if(el === popup){\n                                    el.remove();\n                                    console.log(\"removed \",el);\n                                }\n                            }\n                            console.warn(\"no popup matched with \",popup, \" after the timeout\");\n                        },selfCloseMs)\n                    }\n                    if(dismissable){\n                        popup.onclick = function (){\n                            console.log(\"clicked\",this);\n                            this.remove();\n                        }\n                    }\n                    this.push(popup);\n                }.bind(root.popup),\n                \"showTitled\":function showTitled(type=\"info\",title=\"\",txt=\"\",selfCloseMs=null, dismissable = true){\n                    this.show(type,`\n                    <span style=\"font-size:1.3em\">${title}</span>\n                    <div>${txt}</div>\n                    `,selfCloseMs, dismissable);\n                }.bind(root.popup),\n            });\n            //root.utils.wrapFunctions(root.popup,\"[<globFuncs>.popup]\");\n        }\n\n\n        /**\n        * @summary recursively merge two Objects\n            * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n            * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n            * - -res.a===main.a\n            * - -res.c===sec.c\n            * - -res.b!==sec.b2\n            * @param {Object} main \n            * @param {Object} sec */\n        function mergeRec(main, sec) {\n            for (let p in sec) {\n                //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n                //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n                if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                    thisFun(main[p], sec[p]);\n                else\n                    main[p] = sec[p];\n            }\n            return main;\n        }\n\n    </script>\n    <style note=\"[popupRouter]\">\n        .popupRouter-card {\n            border: 1px solid green;\n            display:none;\n        }\n\n        .popupPusher {\n            border: 1px solid green;\n            display:none;\n        }\n        .popupPusher-card {\n            border: 1px solid green;\n            display:none;\n        }\n    \n        .popup-container {\n            /*border: 1px solid green;*/\n            width: max(30vw,600px);\n            position: fixed;\n            right:2vw;\n            padding-top: 0.3em;\n        }\n        \n        .popup-container .roundPopup {\n            text-align: left;\n            padding: 0.3em 1.5em;\n            margin-bottom: 1vh;\n            border: 3px solid gray;\n            border-radius: 10px;\n            background-color: rgb(243 243 243 / 100%); /* light gray */\n            color:#19196F;\n            width: fit-content;\n            margin-left: auto;\n            margin-right: 0;\n        }\n\n        .popup-container .roundPopup:hover {\n            background-color:#caeeff; /* light light blue */\n        }\n\n        .popup-container .roundPopup hr {\n            margin-left:-1.5em;\n            margin-right:-1.5em;\n        }\n\n        .popup-container .warning {\n            border-color: sandybrown;\n            background-color: lemonchiffon\n        }\n\n        .popup-container .error {\n            border-color: crimson;\n            background-color: #ffc0c0;\n        }\n    </style>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupRouter-card",
        "x": 1285,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "28b52b3b5be96a1f",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "group": "8c268b6bfa27c24a",
        "name": "popup",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.show(\n                \"error\",\n                `operazione non permessa.\n                <br>Non è possibile modificare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                null,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1270,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "214f39abc8051c27",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1125,
        "y": 240,
        "wires": [
            [
                "28b52b3b5be96a1f"
            ]
        ]
    },
    {
        "id": "98025005e10497ba",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1125,
        "y": 285,
        "wires": [
            [
                "74f8e566994cacad"
            ]
        ]
    },
    {
        "id": "74f8e566994cacad",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "group": "8c268b6bfa27c24a",
        "name": "popup error: cannot edit while loaded",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Attenzione\",\n                `Non è possibile modificare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                null,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1370,
        "y": 285,
        "wires": [
            []
        ]
    },
    {
        "id": "fd35a10f22e96156",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "popupId",
        "property": "popupId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "deleteDenied_inUse",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "editDenied_inUse",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "editDenied_dupId",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1350,
        "y": 2220,
        "wires": [
            [
                "0754025c4011f690"
            ],
            [
                "b41bbdca2293ce38"
            ],
            [
                "e57dbeee92a70061"
            ],
            [
                "ddb88f35b436ab0b"
            ]
        ]
    },
    {
        "id": "b41bbdca2293ce38",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "group": "8c268b6bfa27c24a",
        "name": "popup error 7s: cannot edit while loaded",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Attenzione\",\n                `Non è possibile modificare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1615,
        "y": 2205,
        "wires": [
            []
        ]
    },
    {
        "id": "ddb88f35b436ab0b",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "name": "error",
        "func": "node.error({ err: \"unknown or missing popupId\", popupId: msg.popupId,fullMsg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1505,
        "y": 2265,
        "wires": [
            []
        ]
    },
    {
        "id": "7ddb35334721dacc",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "insert/update row",
        "func": "const db = global.get(\"db\");\n\n//aliases for readablility\nlet activeRow = msg.payload;\n// let activeFieldName = msg.topic;\n// let refreshMsg = msg;\n// //clicked row aliases\n// let table = flow.get(\"queueTable\");\n// let tabUtils = flow.get(\"tabUtils\");\n// let button = tabUtils.queue.sendToPressButton;\n// let activeRowIdx = tabUtils.posOf(activeRow.rowId, table);\n// let pressNum = activeFieldName.match(/sendToPressa([0-9]+)/)[1];\n// let state = button.getStateString(activeRow[activeFieldName + \"State\"]);\n\n//inserisci nuova riga.\n//se esiste già:\n//  se il suo status == 'w' aggiorna con i valori attuali (ovvero non fai nessuna modifica)\n//  altrimenti aggiorna con i valori che la nuova riga avrebbe avuto\nlet queryVals = [activeRow.id, 't', activeRow.quantToDo, activeRow.quantProd]\nlet queryTemplate = `\nINSERT INTO\n  oven.italmatic_exchange (ORDER_ID, STATUS, QUANT_TO_DO, QUANT_PROD)\nVALUES\n  (?, ?, ?, ?) AS new ON DUPLICATE KEY\nUPDATE\n  ORDER_ID = IF(\n    oven.italmatic_exchange.STATUS = 'w',\n    oven.italmatic_exchange.ORDER_ID,\n    new.ORDER_ID\n  ),\n  QUANT_TO_DO = IF(\n    oven.italmatic_exchange.STATUS = 'w',\n    oven.italmatic_exchange.QUANT_TO_DO,\n    new.QUANT_TO_DO\n  ),\n  QUANT_PROD = IF(\n    oven.italmatic_exchange.STATUS = 'w',\n    oven.italmatic_exchange.QUANT_PROD,\n    new.QUANT_PROD\n  ),\n  STATUS = IF(\n    oven.italmatic_exchange.STATUS = 'w',\n    oven.italmatic_exchange.STATUS,\n    new.STATUS\n  )\n`\n\nreturn db.attachQuery(db.sqlString.format(queryTemplate, queryVals), msg);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 915,
        "y": 2370,
        "wires": [
            [
                "fcaae706643cc463"
            ]
        ]
    },
    {
        "id": "fcaae706643cc463",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "Query Oven DB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1110,
        "y": 2370,
        "wires": [
            [
                "04164ae60e60ec1f"
            ]
        ]
    },
    {
        "id": "04164ae60e60ec1f",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "error",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1260,
        "y": 2370,
        "wires": [
            [
                "9607aeea9b35b53f"
            ],
            [
                "9607aeea9b35b53f"
            ]
        ]
    },
    {
        "id": "9607aeea9b35b53f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1445,
        "y": 2370,
        "wires": [],
        "l": true
    },
    {
        "id": "2be7091d11a4cd0b",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "load",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 3,
        "x": 745,
        "y": 2400,
        "wires": [
            [
                "7ddb35334721dacc"
            ],
            [
                "d344700abc468e2f"
            ],
            [
                "2ebcd64580ac460d"
            ]
        ]
    },
    {
        "id": "d344700abc468e2f",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "delete row",
        "func": "const db = global.get(\"db\");\n\n//aliases for readablility\nlet activeRow = msg.payload;\n// let activeFieldName = msg.topic;\n// let refreshMsg = msg;\n// //clicked row aliases\n// let table = flow.get(\"queueTable\");\n// let tabUtils = flow.get(\"tabUtils\");\n// let button = tabUtils.queue.sendToPressButton;\n// let activeRowIdx = tabUtils.posOf(activeRow.rowId, table);\n// let pressNum = activeFieldName.match(/sendToPressa([0-9]+)/)[1];\n// let state = button.getStateString(activeRow[activeFieldName + \"State\"]);\n\nlet queryVals = [activeRow.id]\nlet queryTemplate = `\nDELETE FROM\n  oven.italmatic_exchange AS exc\nWHERE\n  exc.ORDER_ID = ?\n  AND exc.STATUS <> 'w'\n`\n\nreturn db.attachQuery(db.sqlString.format(queryTemplate, queryVals), msg);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 895,
        "y": 2415,
        "wires": [
            [
                "9c8b17a9a80fbb64",
                "e1eaca87a85fa4ab"
            ]
        ]
    },
    {
        "id": "9c8b17a9a80fbb64",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "Query Oven DB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1075,
        "y": 2415,
        "wires": [
            [
                "ca44a98e624a94a4",
                "17247c321ff841aa"
            ]
        ]
    },
    {
        "id": "ca44a98e624a94a4",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "error",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1260,
        "y": 2415,
        "wires": [
            [
                "23eec5e679697f6b"
            ],
            [
                "23eec5e679697f6b"
            ]
        ]
    },
    {
        "id": "23eec5e679697f6b",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1445,
        "y": 2415,
        "wires": [],
        "l": true
    },
    {
        "id": "2ebcd64580ac460d",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "error",
        "func": "node.error({err:\"unknown or missing action\",action:msg.action,fullMsg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 2445,
        "wires": [
            []
        ]
    },
    {
        "id": "e1eaca87a85fa4ab",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1035,
        "y": 2445,
        "wires": []
    },
    {
        "id": "17247c321ff841aa",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "5290b04e5e87f604",
        "name": "warn if nothing deleted",
        "func": "\nif(msg.sql)\n    if (msg.sql.match(/\\s*DELETE/) && msg.payload.affectedRows == 0){\n        node.error({txt:\"[WARN] no rows deleted (vincolo non rispettato?)\", full:msg});\n        return msg;\n    }\n    else\n        return [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2445,
        "wires": [
            [
                "b41bbdca2293ce38"
            ],
            []
        ]
    },
    {
        "id": "0754025c4011f690",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "group": "8c268b6bfa27c24a",
        "name": "popup error 7s: cannot delete while loaded",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Attenzione\",\n                `Non è possibile eliminare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1615,
        "y": 2175,
        "wires": [
            []
        ]
    },
    {
        "id": "e57dbeee92a70061",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "6c4911811d83d44b",
        "group": "8c268b6bfa27c24a",
        "name": "popup error 7s: duplicate id",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Id ordine non valido\",\n                `Esiste già un ordine che riporta l'id ${msg?.payload?.[msg.topic] ?? \"specificato\"}.\n                <br>Gli id devono essere unici per poter essere inseriti nel database di riferimento.`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1575,
        "y": 2235,
        "wires": [
            []
        ]
    },
    {
        "id": "dc744adc92813c51",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 1055,
        "y": 3426,
        "wires": [
            [
                "c0a4748db936f9cc"
            ]
        ],
        "l": false
    },
    {
        "id": "c0a4748db936f9cc",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "delete duplicates",
        "func": "const tabUtils = flow.get(\"tabUtils\");\nconst table = flow.get(\"queueTable\");\n\nvar idMap = {};\nfor(var row of table){\n    if(!idMap[row.id])\n        idMap[row.id] = new Array();\n    idMap[row.id].push(row);\n}\n\nvar toDel = [];\nfor(var [key, group] of Object.entries(idMap)){\n    node.warn({txt:\"parsing\",g:group});\n    if(group.length > 1){\n        group.forEach(row => toDel.push(row.rowId));\n        node.warn({ txt: \"pushed\", g: group, toDel:toDel });\n    }\n    else\n        node.warn({txt:\"nothing to remove in \",g:group});\n}\n\ntoDel.forEach(rowId => tabUtils.deleteRowId(rowId, table));\nflow.set(\"queueTable\", table);\n\nnode.warn({txt:\"removed dupes\",idMap:idMap, toDel:toDel, table:table})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 3456,
        "wires": [
            [
                "791b4bdbf17ea41b"
            ]
        ]
    },
    {
        "id": "791b4bdbf17ea41b",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "forceQueueJsonUpdate out",
        "mode": "link",
        "links": [
            "3cc72650169eec95"
        ],
        "x": 1160,
        "y": 3486,
        "wires": [],
        "l": true
    },
    {
        "id": "c141b9aa3a1d6d25",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1035,
        "y": 600,
        "wires": [
            [
                "6fbb1b9edbfec062"
            ]
        ],
        "l": false
    },
    {
        "id": "12bdad34026ac79d",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "GENERATED queue.json",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "{\"txt\":\"generated queue.json\",\t\"content\":payload}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 540,
        "wires": []
    },
    {
        "id": "4ca48d54d222612f",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "GENERATED completed.json",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "{\"txt\":\"generated completed.json\",\t\"content\":payload}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 620,
        "wires": []
    },
    {
        "id": "a649d4fecb2ca56a",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "GENERATED history.json",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "{\"txt\":\"generated history.json\",\t\"content\":payload}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 580,
        "wires": []
    },
    {
        "id": "d4ffa269abe8be44",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "7169425350ce858f",
        "name": "set queueTable",
        "func": "const tabUtils = flow.get(\"tabUtils\");\nconst utils = global.get(\"utils\");\n\n//let table = flow.get(\"completedTable\");\nlet table = msg.payload;\n//let dbTable = msg.payload;\nlet dbTable = msg.dbExcTable;\n\nlet table_idMap = msg.queueTable_idMap;\n//table.forEach(row => table_idMap[row.id] = row);\n\nlet dbTable_idMap = msg.dbExcTable_idMap;\n//dbTable.forEach(row => dbTable_idMap[row.ORDER_ID] = row);\n\n//find completed rows\nfor(var row of dbTable){\n    \n}\n\n// //check no id are dupes\nvar sorted = table.map(row => row).sort((r1,r2) => r1.id > r2.id ? 1 : -1);\nvar dupes = {};\nsorted.forEach((row,i) => {\n    if(i>0 && row.id == sorted[i-1].id){\n        if (!dupes[row.id]){\n            dupes[row.id] = new Array();\n            dupes[row.id].push(sorted[i - 1])\n        }\n        dupes[row.id].push(row);\n    }\n});\nnode.warn({sorted:sorted});\nfor(var [key,dupArr] of Object.entries(dupes)){\n    node.warn({ \"err\": \"dupes found\", \"id\": dupArr?.[0]?.id, \"dupes\": dupArr });\n    let dupId = dupArr[0].id;\n    //salva la riga proveniente dal db, o arbitrariamente la prima se non esiste.\n    var validRow = dbTable.find(row => row.id == dupId) ?? utils.mergeRec({}, dupArr[0]);\n    //elimina tutte le righe duplicate\n    var rowIdToDelete = [];\n    table.forEach(row => {\n        if(row.id == dupId)\n            rowIdToDelete.push(row.rowId);\n    })\n    rowIdToDelete.forEach(rowId => tabUtils.deleteRowId(rowId, table));\n    //aggiungi riga sana\n    var newRow = tabUtils.queue.newRow(tabUtils.newRowId(table));\n    for(var key in newRow){\n        if(key != \"rowId\")\n            newRow[key] = validRow[key];\n    }\n}\n\n//update table buttons state\nlet button = tabUtils.queue.sendToPressButton;\nfor(var row of table){\n    //if is loaded\n    if (dbTable_idMap[row.id] !== undefined){\n        button.setSingleState(\"loaded\", \"sendToPressa1\", row);\n        node.warn({txt:\"riga \"+row.id+\" set to loaded\",row:row});\n    }\n    else{\n        button.setSingleState(\"clickToSend\", \"sendToPressa1\", row);\n        node.warn({ txt: \"riga \" + row.id + \" set to clickToSend\", row: row });\n    }\n}\n\nnode.warn({txt:\"table set to\",tab:table,tabMap:table_idMap,dbMap:dbTable_idMap});\n\nmsg.queueTable_idMap = table_idMap;\nmsg.dbExcTable_idMap = dbTable_idMap;\nmsg.dbExcTable = dbTable;\nmsg.payload = table;\nflow.set(\"queueTable\", table);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 624,
        "y": 3488,
        "wires": [
            []
        ]
    },
    {
        "id": "53b729e6e0afd102",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "7ca93f3dda4c162e",
        "name": "isCallback",
        "property": "_linkSource",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 822,
        "y": 3456,
        "wires": [
            [
                "1bbf54fc1b8056eb"
            ],
            [
                "9f4265f50b02e400"
            ]
        ]
    },
    {
        "id": "1bbf54fc1b8056eb",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "7169425350ce858f",
        "name": "updateFromDb return",
        "mode": "return",
        "links": [],
        "x": 943,
        "y": 3456,
        "wires": []
    },
    {
        "id": "bd2747c35b481472",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read completed.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1492,
        "y": 896,
        "wires": []
    },
    {
        "id": "6f329cf07ae77335",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read history.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1456,
        "y": 816,
        "wires": []
    },
    {
        "id": "50b598cdeddc09ba",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "ifOrderCompleted -> update tables",
        "func": "var plcData=msg.payload;\nconst tabUtils = flow.get(\"tabUtils\");\nconst utils = global.get(\"utils\");\nconst button = tabUtils.queue.sendToPressButton;\nconst pressNum = msg.press?.match?.(/([0-9]+)$/)?.[1] ?? \"1\";\nconst db = global.get(\"db\");\n\nlet queueTable = flow.get(\"queueTable\");\nlet completedTable = flow.get(\"completedTable\");\n\n// let prodRowList = msg.multiQueryData.prodRowList_pollRes?.result ?? [];\n// let excRowList = msg.multiQueryData.excRowList_pollRes?.result ?? [];\nlet prodExcRowList = msg.payload;\n\nlet lastCycleComment = msg.multiQueryData?.cycleRow_pollRes?.result?.[0] ?? node.warn({ txt: \"[WARN] path to comment leads nowhere. Check multiQueryData\", path: \"msg.multiQueryData.cycleRow_pollRes.result[0]\", full: msg });\nlet orderIdMap = {}; queueTable.forEach(row => orderIdMap[row.id] = row);\nlet queueIdxToDel = [];\n\nnode.warn({ txt: \"performing completedTable update\", fromRows: prodExcRowList, idMap: orderIdMap, qTab: queueTable, full: msg })\nfor(var dbRow of prodExcRowList){\n    node.warn({ txt: \"parsing dbRow\", dbRow: dbRow, willMove: dbRow.exc_quantProd >= dbRow.quantToDo,full:msg});\n    //se ordine completato\n    if (dbRow.exc_quantProd >= dbRow.quantToDo){\n        let queueRow = orderIdMap[dbRow.orderId];\n        //node.warn({ txt: \"will move dbRow\", dbRow: dbRow, willDel: queueIdxToDel, qRow: queueRow,qtab:queueTable, full: msg });\n        if(utils.isSet(queueRow)){\n            //crea riga in completedTable\n            let newRow = tabUtils.completed.newRow();\n            newRow.id = dbRow.orderId;\n            newRow.cycleNumber = dbRow.cycleNumber;\n            newRow.quantProd = dbRow.exc_quantProd; //excRow.QUANT_PROD;\n            newRow.quantToDo = dbRow.quantToDo; //excRow.QUANT_TO_DO;\n            //prendi commento dalla prima origine disponibile. queueTable > db > \"\"\n            const getNoteOrFallback = () => {\n                let isNotNullOrEmpty = str => !(/^\\s*$/.test(str ?? \"\"));\n                return isNotNullOrEmpty(queueRow.note) ? queueRow.note :\n                    isNotNullOrEmpty(lastCycleComment) ? lastCycleComment : \"\"\n                        //isNotNullOrEmpty(tmp = prodRowList.filter(row => row.orderId == dbRow.orderId)[0]?.note) ? tmp : \"\"\n            }\n            newRow.note = getNoteOrFallback();\n            completedTable.push(newRow);\n            //marca come da cancellare localmente\n            queueIdxToDel.push(queueRow.rowId);\n            //invia delete a DB\n            let deleteQueryTemplate = \"DELETE FROM oven.italmatic_exchange WHERE ORDER_ID = ? AND STATUS <> 'w'\";\n            node.send([null, db.attachQuery(db.sqlString.format(deleteQueryTemplate, dbRow.orderId))]);\n            node.warn({ txt: \"moved dbRow\", dbRow: dbRow, willDel: queueIdxToDel, qRow: queueRow, qtab: queueTable, full: msg });\n        }\n    }\n}\n\n//cancella localmente tutte le righe marcate\nfor (let rowId of queueIdxToDel){\n    tabUtils.deleteRowId(rowId, queueTable);\n}\nflow.set(\"queueTable\",queueTable);\nflow.set(\"completedTable\", completedTable);\n\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1092,
        "y": 1932,
        "wires": [
            [
                "a63007c4e618855e"
            ],
            [
                "649ced670e4df422"
            ]
        ],
        "outputLabels": [
            "tableUpdateComplete",
            "to dbQuery"
        ]
    },
    {
        "id": "02e5377733c7b48e",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "push to historyTable",
        "func": "//var plcData = msg.payload;\nlet refreshMsg = msg;\nvar historyTable = flow.get(\"historyTable\");\nconst tabUtils = flow.get(\"tabUtils\");\n\nlet row=tabUtils.history.newRow(tabUtils.newRowId(historyTable));\n// let prodRowList = msg.multiQueryData.prodRow;\n// let excRowList = msg.multiQueryData.excRow;\nlet prodExcRowList = msg.payload;\nlet lastCycleComment = msg.multiQueryData?.cycleRow_pollRes?.result?.[0]?.note ?? node.warn({ txt: \"[WARN] path to comment leads nowhere. Check multiQueryData\", path: \"msg.multiQueryData.cycleRow_pollRes.result[0].note\", full:msg });\n//newRow.id = plcData.prod_id;\n//newRow.id = prodRowList.map(row => row.orderId).sort().join(\", \");\n//newRow.cycleNumber = msg.multiQueryData.lastCycleNumber;\n//newRow.quantProd = plcData.prod_quantProd;\n//newRow.status = plcData.exc_status;\n//newRow.status = excRowList.map(row => { return { \"id\": row.orderId, \"code\": row.status}});\n//newRow.cycleNumber = plcData.prod_cycleNumber;\n//newRow.cycleNumber = prodRow.cycleNumber;\n// newRow.press = msg.press;\n//newRow.statusAsString = (plcData.exc_status == \"2\" || plcData.exc_status == 2) ? \"parz.\" : \"compl.\";\n// newRow.statusAsString = excRowList.map(row => row.status).some(code => code == \"2\" || code == 2) ? \"parz.\" : \"compl.\";\n\nlet statAsStr = prodExcRowList.map(row => row.status).some(code => code == \"2\" || code == 2) ?\n    \"parz.\" : \"compl.\";\nfor(let dbRow of prodExcRowList){\n    let newRow=tabUtils.history.newRow(tabUtils.newRowId(historyTable));\n    \n    newRow.id = dbRow.orderId;\n    newRow.cycleNumber = dbRow.cycleNumber;\n    newRow.quantProd = dbRow.prod_quantProd;\n    newRow.status = prodExcRowList.map(dbRow => { return { \"id\": dbRow.orderId, \"code\": dbRow.status } });\n    // newRow.statusAsString = prodExcRowList\n    //     .map(row => row.status)\n    //     .some(code => code == \"2\" || code == 2) ? \"parz.\" : \"compl.\";\n    newRow.statusAsString = (\"\"+dbRow.esito) == \"2\" ? \"parz.\" : \"compl.\";\n    newRow.press = msg.press;\n    newRow.note = lastCycleComment ?? \"\";\n    //node.warn({ txt: \"pushing to history\", newRow: newRow, fromDb: dbRow, of: prodExcRowList, cycNote:lastCycleComment, full:msg });\n    historyTable.push(newRow);\n}\n\n\n\nflow.set(\"historyTable\", historyTable);\nnode.send(refreshMsg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1980,
        "wires": [
            [
                "b2cfef37ff094752"
            ]
        ]
    },
    {
        "id": "828329db25eacfea",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "tables max length 5000 | 5000",
        "func": "//leftshift history when longer than maxLength\nlet table = flow.get(\"historyTable\");\nlet maxLength = 5000;\nlet newLength = 4200;\nif(table.length >= 5000){\n    let diff = table.length - newLength;\n    for(let i=0; i<newLength; i++)\n        table[i] = table[i+diff];\n    table.length = newLength;\n}\nflow.set(\"historyTable\",table);\n\n//leftshift completed when longer than maxLength\ntable = flow.get(\"completedTable\");\nmaxLength = 5000;\nnewLength = 4200;\nif (table.length >= 5000) {\n    let diff = table.length - newLength;\n    for (let i = 0; i < newLength; i++)\n        table[i] = table[i + diff];\n    table.length = newLength;\n}\nflow.set(\"completedTable\",table);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1072,
        "y": 2028,
        "wires": [
            []
        ]
    },
    {
        "id": "649ced670e4df422",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1338,
        "y": 1932,
        "wires": [
            [
                "18b9269b91597628",
                "1c7701faa07b0bae"
            ]
        ]
    },
    {
        "id": "18b9269b91597628",
        "type": "trigger",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "3s",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1466,
        "y": 1932,
        "wires": [
            [
                "57e142f7eea02841",
                "87f7ce05c7d80d59"
            ]
        ]
    },
    {
        "id": "ec7e0a647cb50294",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 865,
        "y": 1980,
        "wires": [
            [
                "02e5377733c7b48e",
                "828329db25eacfea",
                "50b598cdeddc09ba"
            ]
        ],
        "l": false
    },
    {
        "id": "1c7701faa07b0bae",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "REMOVED EXC ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"event\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1388,
        "y": 1964,
        "wires": []
    },
    {
        "id": "a63007c4e618855e",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1305,
        "y": 1900,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "b2cfef37ff094752",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "refreshHistoryTable_out",
        "mode": "link",
        "links": [
            "0933e76415d3b0d8",
            "a6ed287fa626363b"
        ],
        "x": 1386,
        "y": 2012,
        "wires": [],
        "l": true
    },
    {
        "id": "87f7ce05c7d80d59",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "refreshCompletedTable_out",
        "mode": "link",
        "links": [
            "15870b35cd8f1905"
        ],
        "x": 1664,
        "y": 1932,
        "wires": [],
        "l": true
    },
    {
        "id": "57e142f7eea02841",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1654,
        "y": 1964,
        "wires": [],
        "l": true
    },
    {
        "id": "5a5975a02d21fa13",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "dbQuery : last produced ord list",
        "links": [
            "185754c865ee0e5a"
        ],
        "linkType": "static",
        "timeout": "999",
        "x": 435,
        "y": 1965,
        "wires": [
            [
                "88065a0964a356bf",
                "a2809ad6eb204129"
            ]
        ]
    },
    {
        "id": "32931ffe3521ace0",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "pressa1 allProdExc oncePerCycleEnd in",
        "links": [
            "479532ec132fba80",
            "4f79875f6a420854"
        ],
        "x": 365,
        "y": 1935,
        "wires": [
            [
                "5a5975a02d21fa13"
            ]
        ],
        "l": true
    },
    {
        "id": "a2809ad6eb204129",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "queueTable update fromDb",
        "links": [
            "8cdecaaac60aee44"
        ],
        "linkType": "static",
        "timeout": "999",
        "x": 350,
        "y": 2010,
        "wires": [
            [
                "8a73ab3a3332dd58"
            ]
        ]
    },
    {
        "id": "88065a0964a356bf",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 700,
        "y": 1980,
        "wires": [
            [
                "c0555e5d11ddfe93",
                "ec7e0a647cb50294"
            ]
        ]
    },
    {
        "id": "8a73ab3a3332dd58",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 575,
        "y": 2010,
        "wires": [
            [
                "88065a0964a356bf"
            ]
        ]
    },
    {
        "id": "c0555e5d11ddfe93",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 695,
        "y": 1935,
        "wires": [
            [
                "88065a0964a356bf"
            ]
        ]
    },
    {
        "id": "0ef741fba098138d",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 510,
        "y": 2010,
        "wires": [
            [
                "8a73ab3a3332dd58"
            ]
        ],
        "l": false
    },
    {
        "id": "6be4fabae96d76b0",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 625,
        "y": 1935,
        "wires": [
            [
                "c0555e5d11ddfe93"
            ]
        ],
        "l": false
    },
    {
        "id": "a2b555ae2f9f3615",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "a5129725214b9c4b",
        "name": "UPDATE TABLES ON CYCLE END",
        "info": "",
        "x": 335,
        "y": 1890,
        "wires": []
    },
    {
        "id": "6d9e1f49eb50606d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "log uncaught out",
        "mode": "link",
        "links": [
            "f07a5882094bb355",
            "f06c3b8f566b9d90"
        ],
        "x": 826,
        "y": 224,
        "wires": [],
        "l": true
    },
    {
        "id": "b7c7f124e3b0f0a1",
        "type": "link call",
        "z": "2260f1f88d7c60bf",
        "g": "70b9c5719558ad66",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 470,
        "y": 3750,
        "wires": [
            []
        ]
    },
    {
        "id": "c29556974a97beb7",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "70b9c5719558ad66",
        "name": "load 1k history",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335,
        "y": 3750,
        "wires": [
            [
                "b7c7f124e3b0f0a1"
            ]
        ]
    },
    {
        "id": "80f896a94945ea32",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 210,
        "y": 3750,
        "wires": [
            [
                "c29556974a97beb7"
            ]
        ],
        "l": false
    },
    {
        "id": "a848fb1dfb6e367c",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "a2dc8e5cbc92778b",
        "name": "",
        "order": 11,
        "width": 9,
        "height": 1,
        "format": "\n<div style=\"width=100%\">\n    <input size:\"3\" name=\"tempPianoSup_min\" type=\"number\" step=\"1\" /></span>\n    <span style=\"width:100px\"> Range Indicatore Temperatura </span>\n    <span style=\"width:6ch\"><input name=\"tempPianoSup_max\" type=\"number\" step=\"1\" /></span>\n</div>\n\n<script>\n    var value = \"hello world\";\n    // or overwrite value in your callback function ...\n    this.scope.action = function() { return value; }\n</script>\n<md-button ng-click=\"send({payload:action()})\">\n    Click me to send a hello world\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 705,
        "y": 750,
        "wires": [
            []
        ]
    },
    {
        "id": "2f5d29d0bad75108",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "OnStartup0.1:   1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 535,
        "y": 750,
        "wires": [
            [
                "a848fb1dfb6e367c"
            ]
        ]
    },
    {
        "id": "7cd8c0db07ed6353",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "a2dc8e5cbc92778b",
        "name": "popup",
        "order": 1,
        "width": 9,
        "height": 1,
        "format": "<style>\n    .popup\n    {   width:200px;\n        heigth:100px;\n        border:1px solid red;\n        position:absolute;\n        top:1000px;\n        left:100px;\n        display:block;\n    }\n</style>\n<script>\n    var intervalSet;\n    if(intervalSet !== undefined){\n        intervalSet=true;\n        setInterval(()=>{\n            let el=document.getElementById(\"popup\");\n            if(el){\n                if(el.style.display==\"none\")\n                    el.style.display=\"block\";\n                else\n                    el.style.display=\"none\";\n                console.log(\"blinked\");\n            }\n            else\n                console.log(\"blink: el not found\");\n        },2000);\n    }\n</script>\n<div class=\"popup\" id=\"popup\" class=\"popup\">\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 590,
        "y": 795,
        "wires": [
            []
        ]
    },
    {
        "id": "b8bf553ba73175d1",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf",
                "pt": "global",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 818,
        "y": 128,
        "wires": [
            []
        ]
    },
    {
        "id": "062ce81d525ecefe",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata",
                "pt": "global",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 823,
        "y": 83,
        "wires": [
            []
        ]
    },
    {
        "id": "807df9d04afae599",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 643,
        "y": 83,
        "wires": [
            [
                "062ce81d525ecefe"
            ]
        ],
        "l": false
    },
    {
        "id": "1fb7b9a01b31b648",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 643,
        "y": 128,
        "wires": [
            [
                "b8bf553ba73175d1"
            ]
        ],
        "l": false
    },
    {
        "id": "52bbb0087db3d190",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 1830,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "5f47847d258d5819",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "d6dcf6dea0234745",
        "name": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .tempPianoInf_colorPicker {\n        border: 2px solid yellow;\n    }\n    .hideMe {\n        display:none;\n        border: 2px solid red;\n    }\n    \n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 720,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "35882cd26eff49ba",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "db63de8125d253b0",
        "name": "test",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<script>\n    \n    $(document).ready(()=>{\n        var el=document.getElementById(\"thisDiv\").parentElement;\n        console.log(\"running over\",el);\n        \n        while(el && el.children[0] && el.children[0].children[0] && el.children[0].children[0].tagName != \"MD-SELECT\" ){\n            //el = el.previousElementSibling;\n        }\n        if(el===null)\n            throw new Exception(\"reachedRootWithoutFindingElement\");\n        \n        \n        //el.ng-change=\"alert('ohohooh')\";\n        console.log(\"edited\",el);\n        \n    });\n    /*\n     */\n</script>\n<div id=\"thisDiv\">\n    \n    <input type=\"button\" name=\"buttName\" value=\"clickMe\" onClick=\"toggleColors(this.parentElement.parentElement.parentElement);console.log(this.parentElement.parentElement);\"/>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "f87673eb1dbca407",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "db63de8125d253b0",
        "name": "",
        "order": 11,
        "width": 0,
        "height": 0,
        "format": "<div id=\"thisDiv\">\n    <script>\n        function toggleColors(rootElement){\n            const matches=rootElement.getElementsByClassName(\"tempPianoInf_colorPicker\");\n            console.log(\"elsByClass:\",matches);\n            for (let i = 0; i < matches.length; i++) {\n                matches[i].classList.toggle('hideMe');\n            }\n        }\n    </script>\n    <input type=\"button\" name=\"buttName\" value=\"clickMe\" onClick=\"toggleColors(this.parentElement.parentElement.parentElement);console.log(this.parentElement.parentElement);\"/>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 705,
        "y": 1845,
        "wires": [
            []
        ]
    },
    {
        "id": "ec91820d6fb68309",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_c1",
        "label": "",
        "group": "d6dcf6dea0234745",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 780,
        "y": 2175,
        "wires": [
            [
                "17bcd0430dc5cf65"
            ]
        ]
    },
    {
        "id": "74a2e3418b515508",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_min",
        "label": "",
        "tooltip": "il valore minimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "d6dcf6dea0234745",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 730,
        "y": 1950,
        "wires": [
            [
                "bdf219b2feda1c1f"
            ]
        ]
    },
    {
        "id": "f48ddc499cd108c3",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "d6dcf6dea0234745",
        "name": "\"range\"",
        "order": 2,
        "width": 5,
        "height": 1,
        "format": "<span><center> range </center></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 700,
        "y": 1995,
        "wires": [
            []
        ]
    },
    {
        "id": "45ba0fddc88027bb",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_max",
        "label": "",
        "tooltip": "il valore massimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "d6dcf6dea0234745",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 740,
        "y": 2040,
        "wires": [
            [
                "d99e893985e9f5d2"
            ]
        ]
    },
    {
        "id": "31ec72e69c36084a",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.min",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1245,
        "y": 1950,
        "wires": [
            []
        ]
    },
    {
        "id": "3f49c884e0dbfced",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.max",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1265,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "bdf219b2feda1c1f",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1050,
        "y": 1950,
        "wires": [
            [
                "31ec72e69c36084a"
            ]
        ],
        "l": false
    },
    {
        "id": "d99e893985e9f5d2",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1070,
        "y": 2040,
        "wires": [
            [
                "3f49c884e0dbfced"
            ]
        ],
        "l": false
    },
    {
        "id": "1994f8c9154c9e8a",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_c2",
        "label": "",
        "group": "d6dcf6dea0234745",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 825,
        "y": 2220,
        "wires": [
            [
                "8b37906492021e10"
            ]
        ]
    },
    {
        "id": "c79684d488633046",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_c3",
        "label": "",
        "group": "d6dcf6dea0234745",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 885,
        "y": 2265,
        "wires": [
            [
                "c2b538893ffd00f8"
            ]
        ]
    },
    {
        "id": "3a81f68796ed1918",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1095,
        "y": 2175,
        "wires": [
            [
                "9b820c04588a3822"
            ]
        ],
        "l": false
    },
    {
        "id": "9b820c04588a3822",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.c1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 2175,
        "wires": [
            []
        ]
    },
    {
        "id": "d42e3781f0fd7e8d",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.c2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1315,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "5b4d84e74392cf04",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1130,
        "y": 2220,
        "wires": [
            [
                "d42e3781f0fd7e8d"
            ]
        ],
        "l": false
    },
    {
        "id": "d23ff2ec027956a6",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.c3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1375,
        "y": 2265,
        "wires": [
            []
        ]
    },
    {
        "id": "21e2596c2a03ef6a",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1190,
        "y": 2265,
        "wires": [
            [
                "d23ff2ec027956a6"
            ]
        ],
        "l": false
    },
    {
        "id": "59c6ba56962ade0d",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1950,
        "wires": [
            [
                "74a2e3418b515508"
            ]
        ],
        "l": false
    },
    {
        "id": "202ce5143dd1d07e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2040,
        "wires": [
            [
                "45ba0fddc88027bb"
            ]
        ],
        "l": false
    },
    {
        "id": "77beb92da2a36325",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2175,
        "wires": [
            [
                "ec91820d6fb68309"
            ]
        ],
        "l": false
    },
    {
        "id": "bfc9a3fa042faef6",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2220,
        "wires": [
            [
                "1994f8c9154c9e8a"
            ]
        ],
        "l": false
    },
    {
        "id": "19ac6cb7de7ffdcd",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c3",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2265,
        "wires": [
            [
                "c79684d488633046"
            ]
        ],
        "l": false
    },
    {
        "id": "29e4829ae591da51",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "to config.pressPressata",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 2070,
        "wires": [
            [
                "59c6ba56962ade0d",
                "202ce5143dd1d07e",
                "77beb92da2a36325",
                "bfc9a3fa042faef6",
                "19ac6cb7de7ffdcd",
                "90e1d64a5b12c045"
            ]
        ]
    },
    {
        "id": "c3cc6f3c39a2375d",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1070,
        "y": 2130,
        "wires": [
            [
                "4c9195b824a1b917"
            ]
        ],
        "l": false
    },
    {
        "id": "4c9195b824a1b917",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.copyColors",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1275,
        "y": 2130,
        "wires": [
            []
        ]
    },
    {
        "id": "20f17d1127f00b9e",
        "type": "ui_dropdown",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_copyColors",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "d6dcf6dea0234745",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "manuale",
                "value": false,
                "type": "bool"
            },
            {
                "label": "ind. temperatura piano superiore",
                "value": "tempPianoSup",
                "type": "str"
            },
            {
                "label": "ind. temperatura piano inferiore",
                "value": "tempPianoInf",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 720,
        "y": 2130,
        "wires": [
            [
                "c3cc6f3c39a2375d"
            ]
        ]
    },
    {
        "id": "90e1d64a5b12c045",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.copyColors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2130,
        "wires": [
            [
                "20f17d1127f00b9e"
            ]
        ],
        "l": false
    },
    {
        "id": "473885989dad9f52",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "tempPianoInf_c1",
        "label": "",
        "group": "db63de8125d253b0",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "tempPianoInf_colorPicker",
        "x": 770,
        "y": 1635,
        "wires": [
            [
                "75e56109a8a866c3"
            ]
        ]
    },
    {
        "id": "c604566eeb7fb13a",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "tempPianoInf_min",
        "label": "",
        "tooltip": "il valore minimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "db63de8125d253b0",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 1380,
        "wires": [
            [
                "45c2b92b337111a5"
            ]
        ]
    },
    {
        "id": "8b17ae7bba194a73",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "db63de8125d253b0",
        "name": "\"range\"",
        "order": 2,
        "width": 5,
        "height": 1,
        "format": "<span><center> range </center></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 1425,
        "wires": [
            []
        ]
    },
    {
        "id": "d05462db58f73afc",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "tempPianoInf_max",
        "label": "",
        "tooltip": "il valore massimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "db63de8125d253b0",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 1470,
        "wires": [
            [
                "a892984e29c66c6e"
            ]
        ]
    },
    {
        "id": "40899b323fee0b76",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.min",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1225,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "740551f4c9b7b080",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.max",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1245,
        "y": 1470,
        "wires": [
            []
        ]
    },
    {
        "id": "45c2b92b337111a5",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1040,
        "y": 1380,
        "wires": [
            [
                "40899b323fee0b76"
            ]
        ],
        "l": false
    },
    {
        "id": "a892984e29c66c6e",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1060,
        "y": 1470,
        "wires": [
            [
                "740551f4c9b7b080"
            ]
        ],
        "l": false
    },
    {
        "id": "b3e079038c25e0e5",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "tempPianoInf_c2",
        "label": "",
        "group": "db63de8125d253b0",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "tempPianoInf_colorPicker",
        "x": 800,
        "y": 1680,
        "wires": [
            [
                "62683d69fe83fcf5"
            ]
        ]
    },
    {
        "id": "1a12b6a9508e8986",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "tempPianoInf_c3",
        "label": "",
        "group": "db63de8125d253b0",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "tempPianoInf_colorPicker",
        "x": 860,
        "y": 1725,
        "wires": [
            [
                "d1287757094f792c"
            ]
        ]
    },
    {
        "id": "5c8d41d3de6d0758",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1085,
        "y": 1635,
        "wires": [
            [
                "90d15b938fe04887"
            ]
        ],
        "l": false
    },
    {
        "id": "90d15b938fe04887",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.c1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 1635,
        "wires": [
            []
        ]
    },
    {
        "id": "06995737ec64c385",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.c2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1335,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "41ddef0483c1b0ec",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1120,
        "y": 1680,
        "wires": [
            [
                "06995737ec64c385"
            ]
        ],
        "l": false
    },
    {
        "id": "7e216c6e08250db0",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.c3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1365,
        "y": 1725,
        "wires": [
            []
        ]
    },
    {
        "id": "12b581027f3896b9",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1180,
        "y": 1725,
        "wires": [
            [
                "7e216c6e08250db0"
            ]
        ],
        "l": false
    },
    {
        "id": "330da2b395af8bff",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "to config.tempPianoInf",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1500,
        "wires": [
            [
                "9e853a8a40a0266b",
                "accbf4699d8ef89b",
                "6387af83fcfb06b4",
                "bc9cfcd5540d185e",
                "21ea61fe115983dc",
                "abc1f9e882824f5e"
            ]
        ]
    },
    {
        "id": "9e853a8a40a0266b",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1380,
        "wires": [
            [
                "c604566eeb7fb13a"
            ]
        ],
        "l": false
    },
    {
        "id": "accbf4699d8ef89b",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1470,
        "wires": [
            [
                "d05462db58f73afc"
            ]
        ],
        "l": false
    },
    {
        "id": "6387af83fcfb06b4",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1635,
        "wires": [
            [
                "473885989dad9f52"
            ]
        ],
        "l": false
    },
    {
        "id": "bc9cfcd5540d185e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1680,
        "wires": [
            [
                "b3e079038c25e0e5"
            ]
        ],
        "l": false
    },
    {
        "id": "21ea61fe115983dc",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c3",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1725,
        "wires": [
            [
                "1a12b6a9508e8986"
            ]
        ],
        "l": false
    },
    {
        "id": "ea34d947fd0cd8da",
        "type": "ui_dropdown",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "tempPianoInf_copyColors",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "db63de8125d253b0",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "manuale",
                "value": false,
                "type": "bool"
            },
            {
                "label": "ind. temperatura piano superiore",
                "value": "tempPianoSup",
                "type": "str"
            },
            {
                "label": "ind. pressione di pressata",
                "value": "pressPressata",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 710,
        "y": 1575,
        "wires": [
            [
                "736f8d45954ec7e1"
            ]
        ]
    },
    {
        "id": "abc1f9e882824f5e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.copyColors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1575,
        "wires": [
            [
                "ea34d947fd0cd8da"
            ]
        ],
        "l": false
    },
    {
        "id": "736f8d45954ec7e1",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1070,
        "y": 1575,
        "wires": [
            [
                "d2696f5f5855db2e"
            ]
        ],
        "l": false
    },
    {
        "id": "d2696f5f5855db2e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.copyColors",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1275,
        "y": 1575,
        "wires": [
            []
        ]
    },
    {
        "id": "ae0f9ddcf0040d6a",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_c1",
        "label": "",
        "group": "a2dc8e5cbc92778b",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 885,
        "y": 1095,
        "wires": [
            [
                "97f5611b40d92575"
            ]
        ]
    },
    {
        "id": "040a66c23701faf9",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_min",
        "label": "",
        "tooltip": "il valore minimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "a2dc8e5cbc92778b",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 820,
        "y": 870,
        "wires": [
            [
                "1bd620f8fe2c32e3"
            ]
        ]
    },
    {
        "id": "612044f1c3a9a2bb",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "a2dc8e5cbc92778b",
        "name": "\"range\"",
        "order": 3,
        "width": 5,
        "height": 1,
        "format": "<span><center> range </center></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 915,
        "wires": [
            []
        ]
    },
    {
        "id": "20d2bfd30584b08e",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_max",
        "label": "",
        "tooltip": "il valore massimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "a2dc8e5cbc92778b",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 830,
        "y": 960,
        "wires": [
            [
                "0dcb0f233cefc5df"
            ]
        ]
    },
    {
        "id": "0244195a5d53d85f",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.min",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1305,
        "y": 870,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "55eb6fd7125a5aaa",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.max",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1325,
        "y": 960,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "1bd620f8fe2c32e3",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1110,
        "y": 870,
        "wires": [
            [
                "0244195a5d53d85f"
            ]
        ],
        "l": false
    },
    {
        "id": "0dcb0f233cefc5df",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1130,
        "y": 960,
        "wires": [
            [
                "55eb6fd7125a5aaa"
            ]
        ],
        "l": false
    },
    {
        "id": "681fa14316ce9e62",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_c3",
        "label": "",
        "group": "a2dc8e5cbc92778b",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 10,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 975,
        "y": 1185,
        "wires": [
            [
                "395f419e9458085d"
            ]
        ]
    },
    {
        "id": "46b0cd793ac07399",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1160,
        "y": 1095,
        "wires": [
            [
                "ca7c13217c8a527d",
                "7fedc8fd40380f1d"
            ]
        ],
        "l": false
    },
    {
        "id": "ca7c13217c8a527d",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.c1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1345,
        "y": 1095,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "37447a9eb7220bbd",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.c2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 1140,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "2176a8c51d7c26da",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1195,
        "y": 1140,
        "wires": [
            [
                "37447a9eb7220bbd",
                "7fedc8fd40380f1d"
            ]
        ],
        "l": false
    },
    {
        "id": "1a4ff677fdd5bfbd",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.c3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1185,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "718c58ef61374d5c",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1255,
        "y": 1185,
        "wires": [
            [
                "1a4ff677fdd5bfbd",
                "7fedc8fd40380f1d"
            ]
        ],
        "l": false
    },
    {
        "id": "355ecfb91b388592",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 870,
        "wires": [
            [
                "040a66c23701faf9"
            ]
        ],
        "l": false
    },
    {
        "id": "351eace510045898",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "to config.tempPianoSup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 990,
        "wires": [
            [
                "355ecfb91b388592",
                "fe73029cde7530a1",
                "f5c3c29198dd6e9b",
                "50b06c2e2b28d6d7",
                "db72940507b1c735",
                "8af9fc16a604bf70"
            ]
        ]
    },
    {
        "id": "fe73029cde7530a1",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 960,
        "wires": [
            [
                "20d2bfd30584b08e"
            ]
        ],
        "l": false
    },
    {
        "id": "f5c3c29198dd6e9b",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1095,
        "wires": [
            [
                "ae0f9ddcf0040d6a"
            ]
        ],
        "l": false
    },
    {
        "id": "50b06c2e2b28d6d7",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1140,
        "wires": [
            [
                "48f107e3f14f3950"
            ]
        ],
        "l": false
    },
    {
        "id": "db72940507b1c735",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c3",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1185,
        "wires": [
            [
                "681fa14316ce9e62"
            ]
        ],
        "l": false
    },
    {
        "id": "2f59f19e65d77665",
        "type": "ui_dropdown",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_copyColors",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a2dc8e5cbc92778b",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "manuale",
                "value": false,
                "type": "bool"
            },
            {
                "label": "ind. temperatura piano inferiore",
                "value": "tempPianoInf",
                "type": "str"
            },
            {
                "label": "ind. pressione di pressata",
                "value": "pressPressata",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 825,
        "y": 1050,
        "wires": [
            [
                "7b018344d7ced409"
            ]
        ]
    },
    {
        "id": "8af9fc16a604bf70",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.copyColors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1050,
        "wires": [
            [
                "2f59f19e65d77665"
            ]
        ],
        "l": false
    },
    {
        "id": "7b018344d7ced409",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1145,
        "y": 1050,
        "wires": [
            [
                "fc480e83d8d666c0"
            ]
        ],
        "l": false
    },
    {
        "id": "fc480e83d8d666c0",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.copyColors",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 1050,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "6c7bf597c254ff15",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "name": "link out 10",
        "mode": "link",
        "links": [],
        "x": 1680,
        "y": 1005,
        "wires": []
    },
    {
        "id": "749598853168b6d8",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1620,
        "y": 1005,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "48f107e3f14f3950",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_c2",
        "label": "",
        "group": "a2dc8e5cbc92778b",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 915,
        "y": 1140,
        "wires": [
            [
                "88f369def95315f7"
            ]
        ]
    },
    {
        "id": "e3696b26fb98fd8f",
        "type": "complete",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "9c7714b3475b1f2b",
        "name": "",
        "scope": [
            "40899b323fee0b76",
            "740551f4c9b7b080",
            "90d15b938fe04887",
            "06995737ec64c385",
            "7e216c6e08250db0",
            "31ec72e69c36084a",
            "3f49c884e0dbfced",
            "9b820c04588a3822",
            "d42e3781f0fd7e8d",
            "d23ff2ec027956a6",
            "d2696f5f5855db2e",
            "4c9195b824a1b917",
            "0244195a5d53d85f",
            "55eb6fd7125a5aaa",
            "ca7c13217c8a527d",
            "37447a9eb7220bbd",
            "1a4ff677fdd5bfbd",
            "fc480e83d8d666c0"
        ],
        "uncaught": false,
        "x": 298,
        "y": 480,
        "wires": [
            [
                "5f0e4cd2a231d950"
            ]
        ]
    },
    {
        "id": "c738458e2f0166fd",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "poll 1.5s global.config",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 373,
        "y": 510,
        "wires": [
            [
                "a79139d6fa8686e2"
            ]
        ]
    },
    {
        "id": "a79139d6fa8686e2",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 513,
        "y": 510,
        "wires": [
            [
                "47787bd5c3f095c5",
                "d552f3455898102d",
                "34b28815286f8381"
            ]
        ],
        "l": false
    },
    {
        "id": "47787bd5c3f095c5",
        "type": "json",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 608,
        "y": 495,
        "wires": [
            [
                "cd632756435b2754"
            ]
        ],
        "l": false
    },
    {
        "id": "cd632756435b2754",
        "type": "file",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "filename": ".\\uiConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 718,
        "y": 495,
        "wires": [
            [
                "0c1c5418ae454848"
            ]
        ]
    },
    {
        "id": "9aac6231207dd902",
        "type": "file in",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "filename": ".\\uiConfig.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 528,
        "y": 400,
        "wires": [
            [
                "711adcc293c4fe4e"
            ]
        ]
    },
    {
        "id": "27b14ed1b833f3fa",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 308,
        "y": 400,
        "wires": [
            [
                "9aac6231207dd902"
            ]
        ]
    },
    {
        "id": "711adcc293c4fe4e",
        "type": "json",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 643,
        "y": 400,
        "wires": [
            [
                "16a57738beed3d92"
            ]
        ],
        "l": false
    },
    {
        "id": "16a57738beed3d92",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 768,
        "y": 400,
        "wires": [
            [
                "ef9feb95d1f12a3a",
                "afddbb067e0f39ac"
            ]
        ]
    },
    {
        "id": "0c1c5418ae454848",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "written settings",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 903,
        "y": 495,
        "wires": []
    },
    {
        "id": "afddbb067e0f39ac",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "config.jsonRead_out",
        "mode": "link",
        "links": [
            "89b937e2a293b78b",
            "346806aac61025dc",
            "35b66a3ec499c665",
            "2b2c25ba59229fe0"
        ],
        "x": 903,
        "y": 400,
        "wires": []
    },
    {
        "id": "d552f3455898102d",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "OnConfigUpdate_out",
        "mode": "link",
        "links": [
            "019724bd0407040d",
            "7a56c04c308a37eb",
            "0be9e347c272ebc7",
            "382b9ee86b061715",
            "2829a11cc5455212",
            "c7f4104b21b3f0ed",
            "4f4965017bd78144",
            "79329d19f997f71e",
            "dcfdd404535dc654",
            "23fa7a8de9d4b748",
            "71cdad2935eab809",
            "a3c95a133003aada",
            "736f1d79123164d5",
            "93745921a000afa6",
            "140264649d183346",
            "c7bd5c5451ed07f9"
        ],
        "x": 678,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "5f0e4cd2a231d950",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "9c7714b3475b1f2b",
        "name": "get config",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 458,
        "y": 480,
        "wires": [
            [
                "47787bd5c3f095c5",
                "d552f3455898102d"
            ]
        ]
    },
    {
        "id": "5d4297555cadcdff",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "send",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 418,
        "y": 540,
        "wires": [
            [
                "d552f3455898102d"
            ]
        ]
    },
    {
        "id": "11ffda579a2d7473",
        "type": "complete",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "9c7714b3475b1f2b",
        "name": "OnConfigUpdate",
        "scope": [
            "16a57738beed3d92",
            "47787bd5c3f095c5"
        ],
        "uncaught": false,
        "x": 468,
        "y": 585,
        "wires": [
            [
                "11d636077cbd1545"
            ]
        ]
    },
    {
        "id": "11d636077cbd1545",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "9c7714b3475b1f2b",
        "name": "OnConfigUpdateEvent_out",
        "mode": "link",
        "links": [],
        "x": 698,
        "y": 585,
        "wires": [],
        "l": true
    },
    {
        "id": "ef9feb95d1f12a3a",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "read settings",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 968,
        "y": 430,
        "wires": []
    },
    {
        "id": "65449a11e08aa594",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "3a3a52a5dbc9568a",
        "name": "bugFix",
        "func": "//somehow colors hex string looses the leading \"#\"\n\nif(typeof msg.payload==\"string\" && /^#/.test(msg.payload) != true)\n    msg.payload=\"#\" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 945,
        "y": 765,
        "wires": [
            [
                "1f1ff5e26b2ddf38"
            ]
        ]
    },
    {
        "id": "5848c5489be4b695",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "g": "3a3a52a5dbc9568a",
        "name": "bugFix",
        "links": [],
        "x": 840,
        "y": 765,
        "wires": [
            [
                "65449a11e08aa594"
            ]
        ]
    },
    {
        "id": "1f1ff5e26b2ddf38",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "3a3a52a5dbc9568a",
        "name": "bugFix_out",
        "mode": "return",
        "links": [],
        "x": 1050,
        "y": 765,
        "wires": []
    },
    {
        "id": "97f5611b40d92575",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1055,
        "y": 1095,
        "wires": [
            [
                "46b0cd793ac07399"
            ]
        ]
    },
    {
        "id": "88f369def95315f7",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1085,
        "y": 1140,
        "wires": [
            [
                "2176a8c51d7c26da"
            ]
        ]
    },
    {
        "id": "395f419e9458085d",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1160,
        "y": 1185,
        "wires": [
            [
                "718c58ef61374d5c"
            ]
        ]
    },
    {
        "id": "75e56109a8a866c3",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 950,
        "y": 1635,
        "wires": [
            [
                "5c8d41d3de6d0758"
            ]
        ]
    },
    {
        "id": "62683d69fe83fcf5",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 995,
        "y": 1680,
        "wires": [
            [
                "41ddef0483c1b0ec"
            ]
        ]
    },
    {
        "id": "d1287757094f792c",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1040,
        "y": 1725,
        "wires": [
            [
                "12b581027f3896b9"
            ]
        ]
    },
    {
        "id": "17bcd0430dc5cf65",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 990,
        "y": 2175,
        "wires": [
            [
                "3a81f68796ed1918"
            ]
        ]
    },
    {
        "id": "8b37906492021e10",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1020,
        "y": 2220,
        "wires": [
            [
                "5b4d84e74392cf04"
            ]
        ]
    },
    {
        "id": "c2b538893ffd00f8",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1065,
        "y": 2265,
        "wires": [
            [
                "21e2596c2a03ef6a"
            ]
        ]
    },
    {
        "id": "13d2e16bdac1b820",
        "type": "catch",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "scope": [
            "9aac6231207dd902"
        ],
        "uncaught": false,
        "x": 348,
        "y": 300,
        "wires": [
            [
                "7f28962bbf2edd96"
            ]
        ]
    },
    {
        "id": "7f28962bbf2edd96",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "catch uiConfig fileNotFound",
        "func": "\nif(/^ENOENT/.test(msg.error.message) && !context.get(\"triedOnce\")){\n    context.set(\"triedOnce\");\n    return msg;\n}\nelse{\n    if (msg.error) {\n        node.error({ \"err\": msg.error.message, \"full\": msg });\n        //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    }\n    else {\n        node.error(msg);\n    }\n    return null\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 578,
        "y": 300,
        "wires": [
            [
                "0c0ba63642b01a89"
            ],
            [
                "323cfea2dd074604"
            ]
        ]
    },
    {
        "id": "323cfea2dd074604",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "catch uiConfig",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 512,
        "y": 336,
        "wires": [
            [
                "b18d526eca1b0a2a"
            ]
        ]
    },
    {
        "id": "636abe298d8940a7",
        "type": "file",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "filename": ".\\uiConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1108,
        "y": 305,
        "wires": [
            [
                "9aac6231207dd902",
                "13c1fa98c29f8f81",
                "5f026d8f174deb29"
            ]
        ]
    },
    {
        "id": "80ce9f5ef71f266e",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "a2dc8e5cbc92778b",
        "name": "\"utilizza colori di\"",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<span style=\"margin-left:60px;position:relative;top:30px\">utilizza colori di</span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "pickColors-title",
        "x": 815,
        "y": 1005,
        "wires": [
            []
        ]
    },
    {
        "id": "502bbc5503d90d3b",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "de425a720011e6e9",
        "name": "localStyle",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .pickColors-title {\n        overflow-y: visible; \n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1005,
        "y": 1005,
        "wires": [
            []
        ]
    },
    {
        "id": "d54c9038cc673dcd",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "db63de8125d253b0",
        "name": "\"utilizza colori di\"",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<span style=\"margin-left:60px;position:relative;top:30px\">utilizza colori di</span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "pickColors-title",
        "x": 700,
        "y": 1530,
        "wires": [
            []
        ]
    },
    {
        "id": "7e89b24cde089d6c",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "d6dcf6dea0234745",
        "name": "\"utilizza colori di\"",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<span style=\"margin-left:60px;position:relative;top:30px\">utilizza colori di</span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "pickColors-title",
        "x": 715,
        "y": 2085,
        "wires": [
            []
        ]
    },
    {
        "id": "e517363a9bb66217",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 798,
        "y": 275,
        "wires": [
            [
                "0c0ba63642b01a89"
            ]
        ],
        "l": false
    },
    {
        "id": "0c0ba63642b01a89",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "setDefault",
        "func": "msg.payload = {\n    \"tempPianoSup\": {\n        \"min\": 0,\n        \"max\": 250,\n        \"c1\": \"#2cbec6\",\n        \"c2\": \"#0c942e\",\n        \"c3\": \"#e42b2b\",\n        \"copyColors\": false\n    },\n    \"pressPressata\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"c1\": \"#ffffff\",\n        \"c2\": \"#000000\",\n        \"c3\": \"#000000\",\n        \"copyColors\": \"tempPianoSup\"\n    },\n    // \"tempPianoInf\": {\n    //     \"min\": -20,\n    //     \"max\": 280,\n    //     \"c1\": \"#2cbec6\",\n    //     \"c2\": \"#0c942e\",\n    //     \"c3\": \"#e42b2b\",\n    //     \"copyColors\": \"tempPianoSup\"\n    // }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 903,
        "y": 305,
        "wires": [
            [
                "649be06b4b880b67"
            ]
        ]
    },
    {
        "id": "13c1fa98c29f8f81",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "set def settings",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1343,
        "y": 305,
        "wires": []
    },
    {
        "id": "649be06b4b880b67",
        "type": "json",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 993,
        "y": 305,
        "wires": [
            [
                "636abe298d8940a7"
            ]
        ],
        "l": false
    },
    {
        "id": "34b28815286f8381",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "settings changed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 683,
        "y": 450,
        "wires": []
    },
    {
        "id": "93745921a000afa6",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "name": "OnConfigUpdate in",
        "links": [
            "d552f3455898102d"
        ],
        "x": 300,
        "y": 990,
        "wires": [
            [
                "351eace510045898"
            ]
        ]
    },
    {
        "id": "140264649d183346",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "name": "OnConfigUpdate in",
        "links": [
            "d552f3455898102d"
        ],
        "x": 225,
        "y": 2070,
        "wires": [
            [
                "29e4829ae591da51"
            ]
        ]
    },
    {
        "id": "c7bd5c5451ed07f9",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "name": "OnConfigUpdate in",
        "links": [
            "d552f3455898102d"
        ],
        "x": 195,
        "y": 1500,
        "wires": [
            [
                "330da2b395af8bff"
            ]
        ]
    },
    {
        "id": "5ebc37f009a0a667",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "g": "968c394fc0447039",
        "group": "bcc9d4a1865e43c4",
        "name": "popup err 7s: must be in manual to edit",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"warn\",\n                \"Attenzione\",\n                `La modifica non avrà effetto se non si imposta \"utilizza colori\" su \"manuale\"`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1425,
        "y": 765,
        "wires": [
            []
        ]
    },
    {
        "id": "382aef116df7b43a",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "g": "968c394fc0447039",
        "name": "err popup in",
        "links": [
            "0a8349e3527b9250",
            "5f9517fef2310e0e",
            "2169d054e3700ab8",
            "27fc74e16b82ab92",
            "535ba9127db1b1f9",
            "fc2441c6421eff10"
        ],
        "x": 1215,
        "y": 765,
        "wires": [
            [
                "5ebc37f009a0a667"
            ]
        ]
    },
    {
        "id": "19eb625743644893",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "g": "968c394fc0447039",
        "group": "bcc9d4a1865e43c4",
        "name": "popupRouter",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div style=\"display:none\">\n    <div note=\"[popupRouter] example content\">\n        <p>The number is</p>\n        <font color=\"{{((msg.payload || 0) % 2 === 0) ? 'green' : 'red'}}\">\n            {{(msg.payload || 0) % 2 === 0 ? 'even' : 'odd'}}\n        </font>\n    </div>\n    <script note=\"[popupRouter] create popup container\">\n        //create popup container\n        $(function () {\n            if(!window.popupRouter_InitCalled){\n                window.popupRouter_InitCalled = true;\n                pushFunctions(); //append utils and popup pseudo-classes to windows.functions \n\n                var popupCont = document.createElement(\"div\");\n                popupCont.classList.add(\"popup-container\");\n                popupCont.id = \"mainPopupContainer\";\n                \n\n                //document.getElementsByTagName(\"body\")[0].append(popupCont);\n                let mainSect = getMainSect();\n                mainSect.append(popupCont);\n                console.log(\"[popupRouter][init()] appended popupContainer to \", mainSect);\n            }else{\n                console.log(\"[popupRouter][init()] skipping init (popupRouter_InitCalled is def)\");\n            }\n            \n\n            function getMainSect(){\n                var mainSect = null;\n                for(el of document.getElementsByTagName(\"md-content\")[0].children){\n                    if(/section/i.test(el.tagName)){\n                        mainSect = el;\n                        break;\n                    }\n                }\n                mainSect === null ? console.warn(\"mainSect:\",mainSect) : console.log(\"mainSect:\",mainSect);\n                return mainSect;\n            }\n        });\n        \n        function pushFunctions(){\n            let root = window.functions ?? (window.functions = new Object());\n            //import some utils. //avoid overwriting\n            root.utils ??= {};\n            root.utils = mergeRec(root.utils ,{\n                /** recursively merge two Objects\n                    * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n                    * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n                    * - -res.a===main.a\n                    * - -res.c===sec.c\n                    * - -res.b!==sec.b2\n                    * @param {Object} main\n                    * @param {Object} sec */\n                \"mergeRec\":mergeRec,\n                /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n                     * @param {any} value accepts anything\n                     * @returns {boolean}\n                     *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n                     */\n                \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n                    return !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n                        // it has a prototype that's also truthy\n                        !!(value = Object.getPrototypeOf(value)) &&\n                        // which has `null` as parent prototype\n                        !Object.getPrototypeOf(value);\n                },\n                /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n                 *      skip non-function, assign wrapped to their original key\n                 *  @param root {Object} the object to parse for functions\n                 *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n                \"wrapFunctions\": function wrapFunctions(root, prefix) {\n                    prefix ?? console.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n                    const isPlainObj = this.isPlainObj;\n                    //recursively parse root\n                    //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n                    let desc;\n                    for (let k in root) {\n                        if (isPlainObj(root[k]))\n                            root[k] = wrapFunctions.call(this, root[k], prefix + `.${k}`);\n                        else if (//is a simple function, or an arrow function\n                            //value of root[k] has type function\n                            typeof (root[k]) == \"function\"\n                            //root[k] itself is a function, not the result of it's getter call\n                            && (desc = Object.getOwnPropertyDescriptor(root, k)).value !== undefined    // @ts-ignore\n                            && !desc.get\n                        ) {\n                            //wrap in an exception catching function\n                            //trace errors back to their source, independently of the caller\n                            let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                            root[k] = function (...args) {\n                                try {\n                                    return cb.call(this, ...args)\n                                } catch (e) {\n                                    e.nrStack = (e.nrStack ?? []);\n                                    e.nrStack.push({ summ: `at ${k}(${args.join(\", \")}) of ${prefix}`, fName: k, args: args, root: prefix, err: e.message, e: e });\n                                    e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                                    //console.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                                    throw e;\n                                }\n                            }\n                        }\n                    }\n                    return root;\n                }.bind(root.utils),\n                \"fromHtml\":function fromHtml(html, appendTo=document){\n                    if(arguments.length != fromHtml.length) throw new Error(\"arg length mismatch. \"+arguments.length+\"/\"+fromHtml.length);\n                    let factory = document.createElement(\"div\");\n                    // if(!factory){\n                    //     factory=document.createElement(\"div\");\n                    //     factory.id = \"htmlFactory\";\n                    //     factory.style.display = \"none\";\n                    //     factory.position = \"absolute\";\n                    //     document.lastElementChild.append(factory);\n                    // }\n                    factory.innerHTML = html;\n                    if(factory.children.length > 1)\n                        console.error(\"[<globFuncs>.utils.fromHtml()] more than 1 element created, when only the first will be returned.\",arguments,\"\\n->\",factory.children,);\n                    return factory.firstElementChild ?? console.error(\"[<globFuncs>.utils.fromHtml()] nothing created. returned null\",arguments);\n                },\n                /** some characters do not have an uppercase equivalent. They are considered to be lowercase by this func */\n                \"isLowerCase\":function isLowerCase(ch=null){\n                    return ch!==null && ch == ch?.toLowerCase?.();\n                }\n            });\n            //root.utils.wrapFunctions(root.utils,\"[<globFuncs>.utils]\");\n            //popup-specific functions\n            root.popup = {};\n            root.popup = root.utils.mergeRec(root.popup, {\n                \"getTemplate\":function getTemplate(type=\"info\",text=\"\"){\n                    const utils = window.functions.utils;\n                    if(!utils.isLowerCase(type?.[0]))\n                        type = type.toLowerCase();\n                    switch(type){\n                        default:{ console.warn(\"[<globFuncs>.utils] getTemplate(): invalid type \",type, \".used info\"); }\n                        case \"std\":\n                        case \"info\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"err\":\n                        case \"error\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup error\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"warn\":\n                        case \"warning\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup warning\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                    }\n                    \n                },\n                \"push\": function push(popup){\n                    document.getElementById(\"mainPopupContainer\").prepend(popup);\n                    return popup;\n                }.bind(root.popup),\n                \"popOlder\": function pop(){\n                    let cont = document.getElementById(\"mainPopupContainer\");\n                    var removed = cont.lastElementChild;\n                    if(cont.children.length)\n                        cont.lastElementChild?.remove?.();\n                    return removed;\n                },\n                \"show\":function show(type=\"info\",content=\"\",selfCloseMs=null, dismissable = true){\n                    const utils = window.functions.utils;\n                    var pUpClass = this;\n                    var popup = this.getTemplate(type, content);\n                    if(selfCloseMs !== null){\n                        setTimeout(()=>{\n                            for(var el of document.getElementById(\"mainPopupContainer\").children){\n                                if(el === popup){\n                                    el.remove();\n                                    console.log(\"removed \",el);\n                                }\n                            }\n                            console.warn(\"no popup matched with \",popup, \" after the timeout\");\n                        },selfCloseMs)\n                    }\n                    if(dismissable){\n                        popup.onclick = function (){\n                            console.log(\"clicked\",this);\n                            this.remove();\n                        }\n                    }\n                    this.push(popup);\n                }.bind(root.popup),\n                \"showTitled\":function showTitled(type=\"info\",title=\"\",txt=\"\",selfCloseMs=null, dismissable = true){\n                    this.show(type,`\n                    <span style=\"font-size:1.3em\">${title}</span>\n                    <div>${txt}</div>\n                    `,selfCloseMs, dismissable);\n                }.bind(root.popup),\n            });\n            //root.utils.wrapFunctions(root.popup,\"[<globFuncs>.popup]\");\n        }\n\n\n        /**\n        * @summary recursively merge two Objects\n            * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n            * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n            * - -res.a===main.a\n            * - -res.c===sec.c\n            * - -res.b!==sec.b2\n            * @param {Object} main \n            * @param {Object} sec */\n        function mergeRec(main, sec) {\n            for (let p in sec) {\n                //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n                //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n                if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                    thisFun(main[p], sec[p]);\n                else\n                    main[p] = sec[p];\n            }\n            return main;\n        }\n\n    </script>\n    <style note=\"[popupRouter]\">\n        .hidden {\n            display:none;\n        }\n        .popupRouter-card {\n            border: 1px solid green;\n            display:none;\n        }\n\n        .popupPusher {\n            border: 1px solid green;\n            display:none;\n        }\n        .popupPusher-card {\n            border: 1px solid green;\n            display:none;\n        }\n    \n        .popup-container {\n            /*border: 1px solid green;*/\n            width: max(30vw,600px);\n            position: fixed;\n            right:2vw;\n            padding-top: 0.3em;\n        }\n        \n        .popup-container .roundPopup {\n            text-align: left;\n            padding: 0.3em 1.5em;\n            margin-bottom: 1vh;\n            border: 3px solid gray;\n            border-radius: 10px;\n            background-color: rgb(243 243 243 / 100%); /* light gray */\n            color:#19196F;\n            width: fit-content;\n            margin-left: auto;\n            margin-right: 0;\n        }\n\n        .popup-container .roundPopup:hover {\n            background-color:#caeeff; /* light light blue */\n        }\n\n        .popup-container .roundPopup hr {\n            margin-left:-1.5em;\n            margin-right:-1.5em;\n        }\n\n        .popup-container .warning {\n            border-color: sandybrown;\n            background-color: lemonchiffon\n        }\n\n        .popup-container .error {\n            border-color: crimson;\n            background-color: #ffc0c0;\n        }\n    </style>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupRouter-card",
        "x": 1360,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e20b9892b6ecb65d",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "968c394fc0447039",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "5ebc37f009a0a667"
            ]
        ],
        "l": false
    },
    {
        "id": "7fedc8fd40380f1d",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 1260,
        "y": 1230,
        "wires": [
            [
                "05114f908568e806"
            ]
        ],
        "l": false
    },
    {
        "id": "0a8349e3527b9250",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "popup err 7s: must be in manual to edit",
        "mode": "link",
        "links": [
            "382aef116df7b43a"
        ],
        "x": 1735,
        "y": 1260,
        "wires": [],
        "l": true
    },
    {
        "id": "05114f908568e806",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "to config.tempPianoSup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 1230,
        "wires": [
            [
                "2396198ad8c76b6a"
            ]
        ]
    },
    {
        "id": "2396198ad8c76b6a",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "payload.copyColors",
        "property": "payload.copyColors",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1415,
        "y": 1260,
        "wires": [
            [
                "0a8349e3527b9250"
            ],
            []
        ]
    },
    {
        "id": "5f026d8f174deb29",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "generated uiConfig",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "{\"txt\":\"generated uiConfig.json\",\t\"content\":payload}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1353,
        "y": 350,
        "wires": []
    },
    {
        "id": "b18d526eca1b0a2a",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "9c7714b3475b1f2b",
        "name": "log uncaught out",
        "mode": "link",
        "links": [
            "f07a5882094bb355",
            "f06c3b8f566b9d90"
        ],
        "x": 694,
        "y": 336,
        "wires": [],
        "l": true
    },
    {
        "id": "b0cd0777fbffd034",
        "type": "catch",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 695,
        "y": 150,
        "wires": [
            [
                "85ef1e45805265d5"
            ]
        ]
    },
    {
        "id": "49e6d3e2af0723a8",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "endpoint": "fa784b598becc58c",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "ifDiff -> all status 60s",
        "x": 1600,
        "y": 1840,
        "wires": [
            [
                "17ccce6813bb1513"
            ]
        ]
    },
    {
        "id": "d1dbf0ba787aaf87",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "pressa1 allStatus pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1965,
        "y": 1795,
        "wires": []
    },
    {
        "id": "765edce0c2be3f26",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "split with topic:varName",
        "func": "\nlet keys=Object.keys(msg.payload);\n//node.warn(keys);\n    //from status_alife:true   to {topic:alife, payload:true}\nlet out=[];\nfor(let k of keys){\n    node.send({\n        topic:k.split('_')[1],\n        payload:msg.payload[k],\n    });\n    // out.push({\n    //     txt:\"spitting s7 vars\",\n    //     extracted: k.match(/\\w+_(.+)/)[1],\n    //     from: k.match(/\\w+_(.+)/),\n    //     withVal: msg.payload[k],\n    //     full:msg\n    // });\n}\n\n//node.warn({txt:\"splitted res\",res:out});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 1840,
        "wires": [
            [
                "9d91f8e564086ea1"
            ]
        ]
    },
    {
        "id": "9dbec7cb448f90d2",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "catchAll",
        "func": "\n\nif(msg.error){\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"nrStack\": msg._error?.nrStack, \"full\": msg });\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1124,
        "y": 144,
        "wires": [
            [
                "12d506e3c36cb1e0"
            ]
        ]
    },
    {
        "id": "d74f25d28c5fec88",
        "type": "catch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "81fdc4e21618ea8e",
        "name": "",
        "scope": [
            "49e6d3e2af0723a8",
            "9ca5c05780dc2c19",
            "3b424968240bbd7c",
            "81faf0db9baee789",
            "bb19e1a6f465c228",
            "1f0e6e97749e1662",
            "016705b24c943eb8",
            "2aa275dd861f9ccf",
            "79eab282041abd4d",
            "a4c307b888a951e2",
            "e2c6161b189af928",
            "35770bc641499596",
            "c0f863a3eee61ef2",
            "bb1b97f50089b22d",
            "64588e3ee83192c2",
            "f2d66bf3b277d261",
            "4ef25541b10aa843",
            "0a18813d0305d84e",
            "459430cfd2021fdd"
        ],
        "uncaught": false,
        "x": 675,
        "y": 90,
        "wires": [
            []
        ]
    },
    {
        "id": "09f63ed09817f46d",
        "type": "delay",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1045,
        "y": 190,
        "wires": [
            [
                "79112dc81c4df1e1"
            ]
        ]
    },
    {
        "id": "79112dc81c4df1e1",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "catchPlc",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1215,
        "y": 190,
        "wires": [
            [
                "12d506e3c36cb1e0"
            ]
        ]
    },
    {
        "id": "9ca5c05780dc2c19",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "endpoint": "34ec8711cb2e9270",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": true,
        "name": "ifDifferent -> prod_cycleRun",
        "x": 1625,
        "y": 1670,
        "wires": [
            [
                "9ceed6fd254ce510"
            ]
        ]
    },
    {
        "id": "e1d9dc50e8c79a8f",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "payload true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 1670,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0ad0e75869583a93",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1730,
        "y": 1595,
        "wires": [
            [
                "e1d9dc50e8c79a8f"
            ]
        ]
    },
    {
        "id": "7fefc00461152886",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1730,
        "y": 1625,
        "wires": [
            [
                "e1d9dc50e8c79a8f"
            ]
        ]
    },
    {
        "id": "3b424968240bbd7c",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "endpoint": "34ec8711cb2e9270",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "all prodExc 10s",
        "x": 1565,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cdb10387af4f40",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning = context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n//lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning) {\n    context.set(\"lastCycleIsRunning\", cycleIsRunning);\n    //on cycle beginning\n    if (cycleIsRunning) {\n        return node.send([msg, null]);\n    }\n    //on cycle end\n    else {\n        return node.send([null, msg]);\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 2075,
        "wires": [
            [
                "d475353a7f70bf2a"
            ],
            [
                "479532ec132fba80",
                "9333514511ccbe3e"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "479532ec132fba80",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "pressa1 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "9f767a4b86454460",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a",
            "cf6b343f2f0a8d9a",
            "a58a25d9e87488a7",
            "b0e08df19ef6675f",
            "324969d1f04ba9c0",
            "32931ffe3521ace0",
            "04a3a4f993d3a69c"
        ],
        "x": 2260,
        "y": 2105,
        "wires": [],
        "l": true
    },
    {
        "id": "ca74a0de42a788ba",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "all prodExc pressa1 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1935,
        "y": 2135,
        "wires": []
    },
    {
        "id": "b3472d016caff6c0",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "parse status",
        "func": "const utils=global.get(\"utils\");\n\nfunction isLost(status) {\n    if (global.get(\"utils\").isNotSet(\"status\")) throw new Error(\"[isLost()] status can't be null\");\n    return status.fill == \"red\";\n}\n\nfunction isWarn(status){\n    if (global.get(\"utils\").isNotSet(\"status\")) throw new Error(\"[isWarn()] status can't be null\");\n    return status.fill == \"orange\";\n}\n\nfunction isOk(status) {\n    if (global.get(\"utils\").isNotSet(\"status\")) throw new Error(\"[isOk()] status can't be null\");\n    return status.fill == \"green\"; //!isWarn(status) && !isLost(status);\n}\n\nif(!(msg?.status?.fill ?? false)){\n    return node.warn({txt:\"missing status or fill\",full:msg,stat:msg.status,fill:msg.status.fill});\n}\nelse{\n    //update context\n    if(msg.origin==\"prodExc\")\n        context.set(\"prodExc\", msg.status)\n    else\n        context.set(\"status\", msg.status)\n\n    var status = context.get(\"status\") ?? {fill:\"red\"};\n    //var prodExc= context.get(\"prodExc\") ?? {fill:\"red\"};\n    var prodExc = status;\n\n    if (isLost(status) || isLost(prodExc)) {\n        msg.payload=false;\n        return msg;\n    }\n    else if (isLost(status) || isLost(prodExc)) {\n        msg.payload = \"warn\";\n        return msg;\n    }\n    else if(isOk(status) && isOk(prodExc)){\n        msg.payload = true;\n        return msg;\n    }\n    else\n        return //do nothing\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1285,
        "y": 1170,
        "wires": [
            [
                "1268ad479e7f6bab"
            ]
        ]
    },
    {
        "id": "ee85a2f48f8b5e02",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "parseStatus in",
        "links": [],
        "x": 1135,
        "y": 1170,
        "wires": [
            [
                "b3472d016caff6c0"
            ]
        ]
    },
    {
        "id": "1268ad479e7f6bab",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "parseStatus out",
        "mode": "return",
        "links": [],
        "x": 1435,
        "y": 1170,
        "wires": []
    },
    {
        "id": "0a547f33659dd077",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 1415,
        "wires": [
            [
                "6a2f84e5a6053bfa"
            ]
        ]
    },
    {
        "id": "c40dd074760f5ff9",
        "type": "status",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1_allStatus",
        "scope": [
            "49e6d3e2af0723a8",
            "9ca5c05780dc2c19"
        ],
        "x": 1575,
        "y": 1415,
        "wires": [
            [
                "0a547f33659dd077"
            ]
        ]
    },
    {
        "id": "6a2f84e5a6053bfa",
        "type": "link call",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "parse Status",
        "links": [
            "ee85a2f48f8b5e02"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2020,
        "y": 1430,
        "wires": [
            [
                "419d8fe0bc51a50a"
            ]
        ]
    },
    {
        "id": "6632929cbf8477f9",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "prodExc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1795,
        "y": 1445,
        "wires": [
            [
                "6a2f84e5a6053bfa"
            ]
        ]
    },
    {
        "id": "f22eaeab0459ee15",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1_alife_dataIn_out",
        "mode": "link",
        "links": [
            "8ef946242380175e",
            "7446c855e9d2de4f"
        ],
        "x": 2415,
        "y": 1430,
        "wires": [],
        "l": true
    },
    {
        "id": "fa36f3d9a2716a47",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "pressa1_allProdExc",
        "scope": [
            "49e6d3e2af0723a8",
            "9ca5c05780dc2c19"
        ],
        "x": 1575,
        "y": 1445,
        "wires": [
            [
                "6632929cbf8477f9",
                "0a547f33659dd077",
                "642b4cd1857e998b"
            ]
        ]
    },
    {
        "id": "9742879be4c1261c",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "poll status pressa1",
        "info": "",
        "x": 1575,
        "y": 1795,
        "wires": []
    },
    {
        "id": "bdec638b99156315",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "track connection status pressa1",
        "info": "",
        "x": 1645,
        "y": 1370,
        "wires": []
    },
    {
        "id": "419d8fe0bc51a50a",
        "type": "trigger",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "merge 300ms",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "300",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2195,
        "y": 1430,
        "wires": [
            [
                "f22eaeab0459ee15",
                "0396c1363191d76c"
            ]
        ]
    },
    {
        "id": "d475353a7f70bf2a",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "pressa1 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [
            "50128141cfef2e47"
        ],
        "x": 2260,
        "y": 2060,
        "wires": [],
        "l": true
    },
    {
        "id": "8c63b0896103090c",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "emuRead in",
        "links": [
            "5ce383fc8f203d80",
            "e9413d634bd51052",
            "3f33a48033934063"
        ],
        "x": 1575,
        "y": 2165,
        "wires": [
            [
                "260b48d27cf6b812"
            ]
        ],
        "l": true
    },
    {
        "id": "9333514511ccbe3e",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "oncePerCyc end pressa1 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2215,
        "y": 2150,
        "wires": []
    },
    {
        "id": "2d42bfb3b1c1476f",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "start cycle",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 810,
        "wires": [
            [
                "e83df1da93dc1fed"
            ]
        ]
    },
    {
        "id": "6b6aad74d9d607ed",
        "type": "delay",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2160,
        "y": 765,
        "wires": [
            [
                "2d42bfb3b1c1476f"
            ]
        ]
    },
    {
        "id": "e83df1da93dc1fed",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "emulate plc",
        "func": "var state=context.get(\"state\")\n//node.warn({ input_state: state });\n\n//output template: [readOutput , cycleChanged , prod_writeRequest, status_writeRequest, prod_readRequest, status_readRequest ]\n    //readOutput    same as s7 //{} with var:value pairs\n    //cycleChanged  topic: \"cycleOff\" | \"cycleOn\"  payload:state\n    //prod_writeRequest     sends to plc prodExc s7\n    //status_writeRequest   sends to plc status s7    //only used in OnStart\n    //prod_readRequest      reads from plc prodExc s7\n    //status_readRequest    reads from plc status s7   //only used in OnStart\n\nfunction initData(){\n    return {\n        \"exc_id\":\"leftoverId\",\n        \"exc_status\":\"someStatus\",\n        \"exc_quantToDo\":17,\n        \"exc_quantProd\":3,\n        \"prod_cycleRun\":true,\n        \"prod_cycleNumber\":0,\n        \"prod_id\":\"\",\n        \"prod_quantProd\":0,\n        \"prod_esito\":true\n    }\n}\n\n\nif(!state)\n    state = initData();\n\n//emulate cycle routine state changes\nif(msg.action==\"start\"){\n    if(state.cycleRun)\n        node.error(\"received start when already running\");\n    node.warn(\"cycle began\");\n    //set state\n    state.cycleRun=true;\n    state.prod_cycleNumber++;\n    state.prod_id = state.exc_id;\n    state.exc_quantProd += state.prod_quantProd;\n    //emulate completion routine\n        //msg.eta = completion delay ms\n        //default delay = 5000ms\n    setTimeout((state)=>{\n        state.cycleRun=false;\n        //state.prod_id = \"\";\n        let esito = Math.rand() < 0.8;\n        if(esito){\n            \n        }\n        else{\n            state.exc_quantProd -= state.prod_quantProd;\n        }\n        node.warn({ esito: esito, cycle: state});\n        \n        //create write request for prodExc plc\n        let request={};\n        request.payload = new Array();\n        request.variable = new Array();\n        let keys=Object.keys(state);\n        let i=0;\n        for(let k of keys){\n            request.payload.push(state[k]);\n            request.variable.push(k);\n        }\n        node.send([ null, {topic:\"cycleOff\",payload:state}, request, null, null, null ]);\n    },msg.eta ?? 5000);\n}\n//read all //outputs an obj\nelse if(!msg.action || msg.action==\"readAll\"){\n    node.warn(\"readAll\");\n    node.send([state,null,null]);\n}\n//else write what's in variable\nelse if(msg.action == \"write\"){\n    let oldState=state; //#DBG\n    if (msg.variable.length) {\n        let i = 0;\n        for (let v of msg.variable) {\n            state[v] = msg.payload[i++];\n        }\n    }\n    node.warn({ written: msg, from: oldState, to: state });\n}\nelse{\n    node.warn({err:\"wth\",msg:msg});\n}\n\n\nnode.warn({output_state:state});\ncontext.set(\"state\",state);\n\n//create write request for plc\nlet request = {};\nrequest.payload = new Array();\nrequest.variable = new Array();\nlet keys = Object.keys(state);\nfor (let k of keys) {\n    request.payload.push(state[k]);\n    request.variable.push(k);\n}\nnode.send([null, (msg.action!=\"start\") ? null : { topic: \"cycleOn\", payload: state }, request, null, null, null]);",
        "outputs": 6,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"status\", {\n    status_alife: false,\n    status_cycleActive: false,\n    status_emergency: false,\n    status_idraulicCmd: false,\n    status_idPressa: 1234,\n    status_pressPressata: 0,\n    status_tempPianoSup: 0,\n    status_tempPianoInf: 0\n});\n\n\n    //generate status changes\nlet id=setInterval(()=>{\n    let last=context.get(\"status\");\n    if(!last)\n        node.error(\"context undefined\");\n\n    let status = {\n        \"status_alife\": !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random()*350,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    status.status_tempPianoSup =   Math.random() * (2 * status.status_pressPressata)  ;\n    status.status_tempPianoInf =   status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup  ;\n    \n    \n\n    //create write request for plc \n    let request = {};\n    request.payload = new Array();\n    request.variable = new Array();\n    let keys = Object.keys(status);\n    //node.warn({\"req keys\":keys});\n    for (let k of keys) {\n        //node.warn({s:status,\"k\":k,item:status[k]});\n        request.payload.push(status[k]);\n        request.variable.push(k);\n    }\n    \n    node.send([null, null, null,request,null])\n\n},10000);\n\ncontext.set(\"intervalId\",id); //cleared in \"On stop\"",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nclearTimeout(context.get(\"intervalId\"));\nnode.warn(\"timeout cleared\");",
        "libs": [],
        "x": 2080,
        "y": 855,
        "wires": [
            [],
            [
                "715b65f58c966686"
            ],
            [
                "1f0e6e97749e1662",
                "7d5d66e4e2b480f4"
            ],
            [
                "016705b24c943eb8",
                "d13313512ae49a4a"
            ],
            [
                "6058f3345d37e4dc",
                "40be6c6cb5f36f37"
            ],
            [
                "e8ab6a202bfe33f6",
                "d3cdc80e459cdf33"
            ]
        ],
        "outputLabels": [
            "readOutput",
            "topic:cycleOn/cycleOff",
            "prodExc_writeRequest",
            "status_writeRequest",
            "prodExc_readRequest",
            "status_readRequest"
        ]
    },
    {
        "id": "715b65f58c966686",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "delete",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 765,
        "wires": [
            [
                "6b6aad74d9d607ed"
            ]
        ]
    },
    {
        "id": "81faf0db9baee789",
        "type": "s7 control",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "endpoint": "34ec8711cb2e9270",
        "function": "trigger",
        "name": "",
        "x": 2665,
        "y": 915,
        "wires": [
            [
                "420d2f3b4f8caa1b"
            ]
        ]
    },
    {
        "id": "bb19e1a6f465c228",
        "type": "s7 control",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "endpoint": "fa784b598becc58c",
        "function": "trigger",
        "name": "",
        "x": 2665,
        "y": 960,
        "wires": [
            [
                "4122cbdcb42e0560"
            ]
        ]
    },
    {
        "id": "1f0e6e97749e1662",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "endpoint": "34ec8711cb2e9270",
        "variable": "",
        "name": "",
        "x": 2425,
        "y": 810,
        "wires": []
    },
    {
        "id": "016705b24c943eb8",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "endpoint": "fa784b598becc58c",
        "variable": "",
        "name": "",
        "x": 2410,
        "y": 855,
        "wires": []
    },
    {
        "id": "49ec813eb9ef324d",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link in 10",
        "links": [
            "6058f3345d37e4dc"
        ],
        "x": 2455,
        "y": 915,
        "wires": [
            [
                "81faf0db9baee789"
            ]
        ]
    },
    {
        "id": "fe70ebeba81a880f",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link in 11",
        "links": [
            "e8ab6a202bfe33f6"
        ],
        "x": 2465,
        "y": 960,
        "wires": [
            [
                "bb19e1a6f465c228"
            ]
        ]
    },
    {
        "id": "20e1e02ce292a867",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link in 12",
        "links": [
            "420d2f3b4f8caa1b",
            "4122cbdcb42e0560"
        ],
        "x": 1950,
        "y": 885,
        "wires": [
            [
                "e83df1da93dc1fed"
            ]
        ]
    },
    {
        "id": "6058f3345d37e4dc",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "49ec813eb9ef324d"
        ],
        "x": 2205,
        "y": 885,
        "wires": []
    },
    {
        "id": "e8ab6a202bfe33f6",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "fe70ebeba81a880f"
        ],
        "x": 2205,
        "y": 930,
        "wires": []
    },
    {
        "id": "420d2f3b4f8caa1b",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "20e1e02ce292a867"
        ],
        "x": 2830,
        "y": 915,
        "wires": []
    },
    {
        "id": "4122cbdcb42e0560",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "20e1e02ce292a867"
        ],
        "x": 2855,
        "y": 960,
        "wires": []
    },
    {
        "id": "efe20e68d0236d94",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "utility: emulate plc",
        "info": "",
        "x": 1845,
        "y": 735,
        "wires": []
    },
    {
        "id": "12fde84fc27f5e55",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1770,
        "y": 870,
        "wires": [
            [
                "2d42bfb3b1c1476f"
            ]
        ]
    },
    {
        "id": "7d5d66e4e2b480f4",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2580,
        "y": 810,
        "wires": []
    },
    {
        "id": "40be6c6cb5f36f37",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 915,
        "wires": []
    },
    {
        "id": "d13313512ae49a4a",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2595,
        "y": 855,
        "wires": []
    },
    {
        "id": "d3cdc80e459cdf33",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 72",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 960,
        "wires": []
    },
    {
        "id": "bd629777c9b54b8f",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emulate prodExc plc",
        "func": "var state=context.get(\"state\");\n//output template: [readOutput , cycleChanged , selfRequests]\n    //readOutput    same as s7 //{} with var:value pairs\n    //cycleChanged  topic: \"cycleOff\" | \"cycleOn\"  payload:state\n    //selfRequests  sends to this node\n    //readStatusOutput\n\nfunction newData(){\n    return {\n        \"genCtrl\":Math.random(),\n        \"exc_id\":\"id_3\",\n        \"exc_status\":2,\n        \"exc_quantToDo\":17,\n        \"exc_quantProd\":18,\n        \"prod_cycleRun\":false,\n        \"prod_cycleNumber\":0,\n        \"prod_id\":\"\",\n        \"prod_quantProd\":0,\n        \"prod_esito\":false\n    }\n}\n\n// function statData(last){\n//     let status={\n//         \"status_alife\": !last ? true : !last.status_alife,\n//         \"status_cycleActive\": false,\n//         \"status_emergency\": !last ? false : last.status_emergency ? false : Math.random() < 0.2,\n//         //\"status_idraulicCmd\": !last ? false : last.status_idraulicCmd ? false : Math.random() < 0.5,\n//         \"status_idPressa\": 1234,\n//         \"status_pressPressata\": Math.random()*240,\n//         \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n//         //\"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n//     }\n//     let percPress = status.pressPressata/240*100;\n//     status.status_tempPianoSup =   (200-200/6 + Math.random() * 2*200/6) * percPress;\n//     //status.status_tempPianoInf =   (200-200/6 + Math.random() * 2*200/6) * percPress;\n//     //status.status_tempPianoSup =   Math.random() * (2 * status.status_pressPressata)  ;\n//     //status.status_tempPianoInf =   status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup  ;\n//     return status;\n// }\nfunction newRandData(prod_cycleRun=true){\n    let d=newData();\n}\n\n//one-time init\nif(state === undefined){\n    state = newData();\n    /*\n    let status = statData();\n    for(let k in status)\n        state[k]=status[k];\n\n    */\n}\n\n\nif(msg.action == \"poll\"){\n    /*\n    let allStatusOutput = {payload:{}};\n    let allProdExcOutput = {payload:{}};\n    for(let k in state){\n        if(/^status_/.test(k))\n            allStatusOutput.payload[k]=state[k];\n        else\n            allProdExcOutput.payload[k] = state[k];\n    }\n    node.send([null, null, allProdExcOutput,allStatusOutput])\n    */\n}\n//emulate cycle state changes\nelse if(msg.action==\"start\"){\n    if(state.prod_cycleRun)\n        node.error(\"received start when already running\");\n    //set state\n    state.prod_cycleRun=true;\n    state.prod_cycleNumber++;\n    state.prod_id = state.exc_id;\n    state.exc_status = 1;\n    state.prod_quantProd = 2;\n    state.exc_quantProd += state.prod_quantProd;\n    //emulate completion routine\n        //msg.eta = completion delay ms\n        //default delay = 5000ms\n    setTimeout((state)=>{\n        node.warn(\"cycleOff\");\n        state.prod_cycleRun=false;\n        \n        //state.prod_id = \"\";\n        let esito = Math.random() < 0.8;\n        if(esito){\n            state.exc_status = 3; // 'C'\n        }\n        else{\n            state.exc_status = 2; // 'P'\n            state.exc_quantProd -= state.prod_quantProd;\n        }\n        node.warn(esito);\n        let request={};\n        request.payload = new Array();\n        request.variable = new Array();\n        //create write request for this node //avoid async shenanigans from context.set()\n        for(let k in state){\n            request.payload.push(state[k]);\n            request.variable.push(k);\n        }\n        request.action=\"writeAll\";\n        /*\n        var allProdExc={};\n        for (let k in state) {\n            if (!/^status_/.test(k))\n                allProdExc[k] = state[k];\n        }\n        */\n        node.send([{topic:\"allProdExc\",payload:state},{topic:\"cycleOff\",payload:state},request])\n    },msg.eta ?? 3000,state);\n    /*\n    var allProdExc = {};\n    for (let k in state) {\n        if (!/^status_/.test(k))\n            allProdExc[k] = state[k];\n    }*/\n    node.warn(\"cycleOn\");\n    node.send([{topic:\"allProdExc\",payload:state}, null, null]);\n}\n//read all //outputs an obj\nelse if(!msg.action || msg.action==\"readAll\"){\n    let allStatusOutput = { payload:{} };\n    let allProdExcOutput = { payload: {} };\n\n    /*for(let k in state){\n        if(/^status_/.test(k))\n            allStatusOutput.payload[k]=state[k];\n        else\n            allProdExcOutput.payload[k] = state[k];\n    }*/\n    \n    msg.payload=state;\n    delete msg.action;\n\n    node.warn(\"readAll\");\n    node.send([msg,null,null]);\n}\nelse if (msg.action == \"writeAllStatus\") {\n    let status=context.get(\"status\");\n    if (msg.variable.length) {\n        //node.warn(\"writeAllStatus\");\n        for (let i = 0; i < msg.variable.length; i++) {\n            //node.warn({ write: msg.payload[i], to: msg.variable[i] });\n            status[msg.variable[i]] = msg.payload[i];\n        }\n    }\n    context.set(\"status\",status);\n    node.warn({ statusGoneTo: status });\n}\n//else write what's in variable\nelse{\n    \n    if (msg.variable.length) {\n        //node.warn(\"writeAll\");\n        for (let i=0;i<msg.variable.length;i++) {\n            //node.warn({write:msg.payload[i],to:msg.variable[i]});\n            state[msg.variable[i]] = msg.payload[i];\n        }\n    }\n    node.warn({stateGoneTo:state});\n}\n\n\ncontext.set(\"state\",state);",
        "outputs": 4,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n\ncontext.set(\"status\", {\n    status_alife: false,\n    status_cycleActive: false,\n    status_emergency: false,\n    //status_idraulicCmd: false,\n    status_idPressa: 1234,\n    status_pressPressata: 0,\n    status_tempPianoSup: 0,\n   // status_tempPianoInf: 0\n});\n\n\n//generate status changes\nlet id = setInterval(() => {\n    let last = context.get(\"state\") ?? context.get(\"status\");\n    if (!last)\n        node.error(\"context undefined\");\n\n    let status = {\n        \"status_alife\": !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": last.status_emergency ? false : Math.random() < 0.2,\n        //\"status_idraulicCmd\": last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random() * 350,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        //\"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    status.status_tempPianoSup = Math.random() * (2 * status.status_pressPressata);\n    //status.status_tempPianoInf = status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup;\n\n    //create write request for this node\n    let request = {};\n    request.payload = new Array();\n    request.variable = new Array();\n    let keys = Object.keys(status);\n    //node.warn({\"req keys\":keys});\n    for (let k of keys) {\n        //node.warn({s:status,\"k\":k,item:status[k]});\n        request.payload.push(status[k]);\n        request.variable.push(k);\n    }\n    request.action=\"writeAllStatus\";\n    node.send([null, null, request,{payload:status}])\n\n}, 5000);\n\ncontext.set(\"intervalId\", id); //cleared in \"On stop\"\n\n",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 445,
        "wires": [
            [
                "5ce383fc8f203d80",
                "a188fac48c65b3be",
                "a42e22b6fe63c233",
                "3a395e9b79d9a1ef",
                "35096506cb7f5c4e"
            ],
            [
                "2b1f55ad3aabcc65"
            ],
            [
                "528adee0da78807c"
            ],
            [
                "416ca37ceaf57e14",
                "856c6c8e9fbd9ec1",
                "1fa3adddebc9c293",
                "4e0c1adaea343925",
                "7fefd0dc5ebd5ff7"
            ]
        ],
        "outputLabels": [
            "readOutput",
            "topic:cycleOn/cycleOff",
            "to self",
            ""
        ]
    },
    {
        "id": "528adee0da78807c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 530,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ],
        "l": false
    },
    {
        "id": "3950d474263fe0c5",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start cycle",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1035,
        "y": 430,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "d4f9793e37a6375a",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "action:poll 10s",
        "props": [
            {
                "p": "action",
                "v": "poll",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 960,
        "y": 515,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "fc5cb067036c4315",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "action:readAll",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "readAll",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "5ce383fc8f203d80",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "8c63b0896103090c",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec",
            "82d24f78c94825a9"
        ],
        "x": 1610,
        "y": 400,
        "wires": [],
        "l": true
    },
    {
        "id": "a188fac48c65b3be",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "all prodExc with topic:prodExc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 430,
        "wires": []
    },
    {
        "id": "2b1f55ad3aabcc65",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 370,
        "wires": [
            [
                "58bc8c7447e48a14"
            ]
        ]
    },
    {
        "id": "416ca37ceaf57e14",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "b6bc7095606ea745"
        ],
        "x": 1635,
        "y": 490,
        "wires": [],
        "l": true
    },
    {
        "id": "856c6c8e9fbd9ec1",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 520,
        "wires": []
    },
    {
        "id": "a213156032b5e251",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 860,
        "y": 425,
        "wires": [
            [
                "0f6ad999ba80fa0f"
            ]
        ],
        "l": false
    },
    {
        "id": "382a6197f96e3cd0",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emuReadAll in",
        "links": [],
        "x": 860,
        "y": 560,
        "wires": [
            [
                "fc5cb067036c4315"
            ]
        ],
        "l": true
    },
    {
        "id": "cc59c1ac68580b95",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 925,
        "y": 600,
        "wires": [
            [
                "fc5cb067036c4315"
            ]
        ],
        "l": false
    },
    {
        "id": "58bc8c7447e48a14",
        "type": "delay",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1360,
        "y": 370,
        "wires": [
            [
                "9dc8240d440f560b"
            ]
        ]
    },
    {
        "id": "7a21669f3c26b95c",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "toggle cycle loop",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "toggle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 325,
        "wires": [
            [
                "9dc8240d440f560b"
            ]
        ]
    },
    {
        "id": "7f7d732440d6aec6",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1220,
        "y": 325,
        "wires": [
            [
                "7a21669f3c26b95c"
            ]
        ],
        "l": false
    },
    {
        "id": "ab40650461f823e3",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "utility: emulate plc self-contained, halfworking",
        "info": "",
        "x": 980,
        "y": 310,
        "wires": []
    },
    {
        "id": "164db36128db7462",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "OnStartup3",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 885,
        "y": 370,
        "wires": [
            []
        ]
    },
    {
        "id": "3112342511e963b8",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "sendToPress requests",
        "func": "\n\nvar write;\n\n//load order in plc\nif(msg.action == \"load\"){\n    write = {\n        \"exc_quantProd\":msg.payload.quantProd,\n        \"exc_quantToDo\":msg.payload.quantToDo,\n        \"exc_status\": 0,\n        \"exc_id\":msg.payload.id\n    }\n}\n//clear plc with placeholder values\nelse if(msg.action == \"clear\"){\n    write = {\n        \"exc_quantProd\": 0,\n        \"exc_quantToDo\": 0,\n        \"exc_status\":0,\n        \"exc_id\": \"\"\n    }\n}\nelse if(msg.action == \"nothing\"){\n    return null;\n}\n\n//build s7 request\nlet request = { payload: [], variable: [] };\nfor (let k in write) {\n    request.payload.push(write[k]);\n    request.variable.push(k);\n}\n//send msg as feedback on 2nd channel\nreturn [request, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 2540,
        "wires": [
            [],
            [
                "a992bf0170cdc157"
            ]
        ]
    },
    {
        "id": "27be6fe227af16cc",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_prodExc",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1945,
        "y": 2225,
        "wires": [
            []
        ]
    },
    {
        "id": "214d0a5f9c40f7c2",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_exc_status",
                "pt": "flow",
                "to": "payload.exc_status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 2265,
        "wires": [
            []
        ]
    },
    {
        "id": "7b1590892f6f2cf5",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "pressa1 sendToPressRequests in",
        "links": [
            "c90373ea81f269e7",
            "66b3788924f607a2",
            "297375027392a9b4",
            "6b4639f59bf141a0",
            "2b4384d6ab15617e"
        ],
        "x": 1645,
        "y": 2540,
        "wires": [
            [
                "8d4c1528250e9b80"
            ]
        ],
        "l": true
    },
    {
        "id": "8d4c1528250e9b80",
        "type": "q-gate",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "keep last",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 1930,
        "y": 2540,
        "wires": [
            [
                "3112342511e963b8"
            ]
        ]
    },
    {
        "id": "89b827b78086e83f",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 2480,
        "wires": [
            [
                "8d4c1528250e9b80"
            ]
        ]
    },
    {
        "id": "8f5de7d1e2efd275",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "exc_status",
        "property": "payload.exc_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1765,
        "y": 2465,
        "wires": [
            [
                "89b827b78086e83f"
            ],
            [
                "8c354411f4678925"
            ],
            [
                "89b827b78086e83f"
            ],
            [
                "89b827b78086e83f"
            ]
        ]
    },
    {
        "id": "8c354411f4678925",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 2450,
        "wires": [
            [
                "8d4c1528250e9b80"
            ]
        ]
    },
    {
        "id": "2a9c9c49c94432d9",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "pressa1 allProdExc out",
        "mode": "link",
        "links": [
            "d09af2547970d46b",
            "2ef2e1ec9ad18993"
        ],
        "x": 1945,
        "y": 2180,
        "wires": [],
        "l": true
    },
    {
        "id": "d09af2547970d46b",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "pressa1 allProdExc in",
        "links": [
            "2a9c9c49c94432d9"
        ],
        "x": 1570,
        "y": 2465,
        "wires": [
            [
                "8f5de7d1e2efd275"
            ]
        ],
        "l": true
    },
    {
        "id": "98a76a1f9321a573",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "pressa1 connStatus",
        "scope": [
            "3b424968240bbd7c"
        ],
        "x": 1895,
        "y": 2355,
        "wires": [
            [
                "b45882cc15a076be"
            ]
        ]
    },
    {
        "id": "b45882cc15a076be",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "!= green",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2090,
        "y": 2355,
        "wires": [
            [
                "8c354411f4678925"
            ]
        ]
    },
    {
        "id": "a992bf0170cdc157",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "pressa1 sendToPressRequest done out",
        "mode": "link",
        "links": [
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "ee7df6ca341a90cc"
        ],
        "x": 2460,
        "y": 2555,
        "wires": [],
        "l": true
    },
    {
        "id": "3e4df8358764c8bf",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "poll prodExc pressa1",
        "info": "",
        "x": 1580,
        "y": 1985,
        "wires": []
    },
    {
        "id": "f496db4601480ad7",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "pressa1_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "9890c53475b90fa6"
        ],
        "x": 2430,
        "y": 1840,
        "wires": [],
        "l": true
    },
    {
        "id": "f361ef0e22514ae8",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "sendToPress requests pressa1",
        "info": "",
        "x": 1615,
        "y": 2360,
        "wires": []
    },
    {
        "id": "c839a1cea19f06fc",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emuWrite in",
        "links": [
            "8f0ca2e92ed379a5",
            "504464c430ba7283",
            "c0a6f5a095ded7d3",
            "69b1ea7a62b8ffde",
            "a467d56466998dc7",
            "264c06f2fdf3b2df",
            "82ede1c062e87eb3",
            "d16297afbe03f8ba",
            "dd535bcb2b06deea",
            "0d08d91772b4a46f"
        ],
        "x": 855,
        "y": 475,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "260b48d27cf6b812",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1700,
        "y": 2120,
        "wires": [
            [
                "f5cdb10387af4f40",
                "ca74a0de42a788ba",
                "27be6fe227af16cc",
                "214d0a5f9c40f7c2",
                "2a9c9c49c94432d9",
                "c23689e8b3ce4d15"
            ]
        ],
        "l": false
    },
    {
        "id": "9ceed6fd254ce510",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1775,
        "y": 1670,
        "wires": [
            [
                "e1d9dc50e8c79a8f"
            ]
        ],
        "l": false
    },
    {
        "id": "17ccce6813bb1513",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1840,
        "wires": [
            [
                "d1dbf0ba787aaf87",
                "765edce0c2be3f26"
            ]
        ],
        "l": false
    },
    {
        "id": "b6bc7095606ea745",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "allStatus emuRead in",
        "links": [
            "416ca37ceaf57e14",
            "46c2b8c68937078c",
            "dfb6b94f3d572af5"
        ],
        "x": 1590,
        "y": 1885,
        "wires": [
            [
                "17ccce6813bb1513"
            ]
        ],
        "l": true
    },
    {
        "id": "642b4cd1857e998b",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "send to status globals",
        "func": "\nif(msg.status && msg.status.fill && (typeof msg.status.fill) == \"string\")\n    return [{ payload: msg.status.fill }, { payload: msg.status.fill==\"green\" }]\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1725,
        "y": 1505,
        "wires": [
            [
                "554553d14c4528a1"
            ],
            [
                "400413a022ab7c31"
            ]
        ],
        "l": false
    },
    {
        "id": "8c5c18cd60513a30",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "pressa1_allStatus",
        "scope": [
            "9ca5c05780dc2c19",
            "49e6d3e2af0723a8"
        ],
        "x": 1575,
        "y": 1505,
        "wires": [
            [
                "642b4cd1857e998b"
            ]
        ]
    },
    {
        "id": "554553d14c4528a1",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 1490,
        "wires": [
            [
                "cff57bec7157bef0"
            ]
        ]
    },
    {
        "id": "400413a022ab7c31",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnIsOk",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1890,
        "y": 1520,
        "wires": [
            [
                "5c16a509de896e67"
            ]
        ]
    },
    {
        "id": "cff57bec7157bef0",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1 onConnStatusChange out",
        "mode": "link",
        "links": [],
        "x": 2205,
        "y": 1490,
        "wires": [],
        "l": true
    },
    {
        "id": "5c16a509de896e67",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1 onConnIsOkChange out",
        "mode": "link",
        "links": [
            "3fcc6bd133bdfd43"
        ],
        "x": 2205,
        "y": 1520,
        "wires": [],
        "l": true
    },
    {
        "id": "b0f4b6634f190f48",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "OnStartup0.1 setDefaults",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 2525,
        "y": 1505,
        "wires": [
            [
                "f96b3c5023454e2b",
                "58387c00123218e3"
            ]
        ]
    },
    {
        "id": "58387c00123218e3",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnIsOk",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2785,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "f96b3c5023454e2b",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnStatus",
                "pt": "global",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2795,
        "y": 1490,
        "wires": [
            []
        ]
    },
    {
        "id": "2639fa3be4067762",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "name": "plc pressa1",
        "info": "",
        "x": 1535,
        "y": 1295,
        "wires": []
    },
    {
        "id": "6412ab5d90cfce0c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "sort data by press",
        "property": "press",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pressa1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 982,
        "y": 800,
        "wires": [
            [
                "66b3788924f607a2"
            ],
            [
                "17c1ab0431cd8ccc"
            ],
            [
                "1a030fa6a72f51d6"
            ],
            [
                "1be724ee4d388de3"
            ],
            [
                "a817f30ecf7302d4"
            ]
        ]
    },
    {
        "id": "a817f30ecf7302d4",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "error",
        "func": "node.error({ err: \"unknown press in mixed sort\", press: msg.press, msg: msg });\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1182,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "8cc8b8736d1102b3",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "mixed sendToPressRequests in",
        "links": [
            "abe96bc7d7fbc506",
            "c30ca4565e0d218f",
            "7c8bd303c63bc52d"
        ],
        "x": 722,
        "y": 800,
        "wires": [
            [
                "6412ab5d90cfce0c"
            ]
        ],
        "l": true
    },
    {
        "id": "66b3788924f607a2",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa1 sendToPressRequests out",
        "mode": "link",
        "links": [
            "7b1590892f6f2cf5"
        ],
        "x": 1147,
        "y": 720,
        "wires": []
    },
    {
        "id": "8b321fcb911b77fd",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "sort press for sendToPressRequests",
        "info": "",
        "x": 752,
        "y": 720,
        "wires": []
    },
    {
        "id": "ee59f528d39b796f",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "action:writeAll",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "writeAll",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1025,
        "y": 475,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "c23689e8b3ce4d15",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2190,
        "y": 2225,
        "wires": [
            []
        ]
    },
    {
        "id": "a42e22b6fe63c233",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "8e9758acad3f2063",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 2020,
        "y": 350,
        "wires": [],
        "l": true
    },
    {
        "id": "17c1ab0431cd8ccc",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa2 sendToPressRequests out",
        "mode": "link",
        "links": [
            "4e103e969b9f7d0b",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 1147,
        "y": 760,
        "wires": []
    },
    {
        "id": "1fa3adddebc9c293",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "2c215d3ea4d110e9"
        ],
        "x": 2070,
        "y": 530,
        "wires": [],
        "l": true
    },
    {
        "id": "d7c994974930edc9",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "0be63189ee3d400d"
        ],
        "x": 670,
        "y": 510,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "1a030fa6a72f51d6",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa3 sendToPressRequests out",
        "mode": "link",
        "links": [
            "da493fa473ae1988",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 1147,
        "y": 800,
        "wires": []
    },
    {
        "id": "3a395e9b79d9a1ef",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "6369e148ad4ba347",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 2060,
        "y": 310,
        "wires": [],
        "l": true
    },
    {
        "id": "4e0c1adaea343925",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "6e49827f9cf44a2c"
        ],
        "x": 2110,
        "y": 570,
        "wires": [],
        "l": true
    },
    {
        "id": "0535e99eb9542659",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "0d08d91772b4a46f",
            "9b49d29e19e194f6"
        ],
        "x": 670,
        "y": 430,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "1be724ee4d388de3",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa4 sendToPressRequests out",
        "mode": "link",
        "links": [
            "54535349b75194e9",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 1147,
        "y": 840,
        "wires": []
    },
    {
        "id": "35096506cb7f5c4e",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "d04018a4b190756c",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 2100,
        "y": 270,
        "wires": [],
        "l": true
    },
    {
        "id": "7fefd0dc5ebd5ff7",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "1e843a5590cd9b13"
        ],
        "x": 2150,
        "y": 610,
        "wires": [],
        "l": true
    },
    {
        "id": "e2478e13b980611c",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "0d08d91772b4a46f"
        ],
        "x": 670,
        "y": 550,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "3d31803aef992266",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "silence s7 endpoints timeouts (conn failed)",
        "info": "",
        "x": 795,
        "y": 45,
        "wires": []
    },
    {
        "id": "85ef1e45805265d5",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "switch",
        "func": "\n\nif(msg.error && msg.error.source.type == \"s7 endpoint\" )\n    return [null,msg]   //to (silenced) catchPlc\nelse\n    return [msg,null]; //to catch all",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 865,
        "y": 150,
        "wires": [
            [
                "9dbec7cb448f90d2"
            ],
            [
                "09f63ed09817f46d"
            ]
        ]
    },
    {
        "id": "78c6b35445bf1217",
        "type": "catch",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "",
        "scope": [
            "6a2f84e5a6053bfa",
            "41608bbe96eea04e",
            "13a65bed22718218",
            "afade25048219b87"
        ],
        "uncaught": false,
        "x": 1180,
        "y": 1130,
        "wires": [
            [
                "6e645e2849c474eb"
            ]
        ]
    },
    {
        "id": "6e645e2849c474eb",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "silence timeouts",
        "func": "\n\nif(msg.error){\n    if (msg.error.message !== \"timeout\")\n        node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1130,
        "wires": [
            []
        ]
    },
    {
        "id": "9dc8240d440f560b",
        "type": "gate",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1480,
        "y": 370,
        "wires": [
            [
                "3950d474263fe0c5"
            ]
        ],
        "l": false
    },
    {
        "id": "3fcc6bd133bdfd43",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "pressa1 onConnIsOkChange in",
        "links": [
            "5c16a509de896e67"
        ],
        "x": 1635,
        "y": 2400,
        "wires": [
            [
                "3f9469575ed20a91"
            ]
        ],
        "l": true
    },
    {
        "id": "3f9469575ed20a91",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "== false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1850,
        "y": 2400,
        "wires": [
            [
                "8c354411f4678925"
            ],
            []
        ]
    },
    {
        "id": "bf98577d363cef6f",
        "type": "ui_switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "label": "switch",
        "tooltip": "simula ogni 10 secondi",
        "group": "77dcdddb4f97461c",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1525,
        "y": 320,
        "wires": [
            [
                "9dc8240d440f560b"
            ]
        ]
    },
    {
        "id": "0f6ad999ba80fa0f",
        "type": "ui_button",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emulateCycButton",
        "group": "77dcdddb4f97461c",
        "order": 3,
        "width": "1",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "simula singolo ciclo",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-play",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 905,
        "y": 425,
        "wires": [
            [
                "3950d474263fe0c5"
            ]
        ],
        "l": false
    },
    {
        "id": "8943b4549c5df00c",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "OnStartup3 : defaultClose",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "close",
        "payloadType": "str",
        "x": 1440,
        "y": 290,
        "wires": [
            [
                "bf98577d363cef6f"
            ]
        ]
    },
    {
        "id": "8b2efdddc37de145",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "QueryDB AllProdExc",
        "func": "\nlet db=global.get(\"db\");\n\n//per determinare quanti risultati aspettare nei nodi seguenti prima di inviare il messaggio con tutti i valori aggregati:\n    // salva in flow una lista di id.\n    //allega un id ad ogni query\nlet prodId = \"prod\";\nlet excId = \"exc\";\n\n//pass downstream the info about how many queries are sent per-msg\n    //needed by the join-function later on //it's a form of error-checking\nif (!context.get(\"QueryDB_AllProdExc_idList\")){    \n    context.set(\"QueryDB_AllProdExc_idList\", [prodId, excId, \"s7\"]);\n    node.send({\n        control: \"setExpectedIds\", payload: context.get(\"QueryDB_AllProdExc_idList\")\n    });\n}\n\nnode.send({control:\"reset\"});\n\n//s7 vars //must precede db stream for the join function to work\nmsg.queryId = \"s7\";\nnode.send(msg);\n\n//stream of db queries\n// seleziona la riga di italmatic_production con max CYCLE_NUMBER\nnode.send([null, db.attachQuery(`\nSELECT\n  *\nFROM\n  oven.italmatic_production\nWHERE\n  CYCLE_NUMBER = (\n    SELECT\n      MAX(CYCLE_NUMBER)\n    FROM\n      oven.italmatic_production\n  )\n`, { queryId: prodId})]);\n\n//seleziona la riga di italmatic_exchange che ha lo stesso id della riga di italmatic_production con max CYCLE_NUMBER\nnode.send([null, db.attachQuery(`\nSELECT\n  *\nFROM\n  oven.italmatic_exchange AS exc\nWHERE\n  exc.ORDER_ID = (\n    SELECT\n      ORDER_ID\n    FROM\n      oven.italmatic_production\n    WHERE\n      CYCLE_NUMBER = (\n        SELECT\n          MAX(CYCLE_NUMBER)\n        FROM\n          oven.italmatic_production\n      )\n  )\n\n`, { queryId: excId })]);\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 715,
        "y": 2100,
        "wires": [
            [
                "9c9b0898765128a3"
            ],
            [
                "aa97ec6ea2ad2c5a"
            ]
        ],
        "outputLabels": [
            "db",
            "s7"
        ]
    },
    {
        "id": "aa97ec6ea2ad2c5a",
        "type": "link call",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 890,
        "y": 2130,
        "wires": [
            [
                "9c9b0898765128a3"
            ]
        ]
    },
    {
        "id": "9b390d6ce049bee0",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "map dbNames to old s7Names",
        "func": "//in payload arriva una raccolta di messaggi, sotto forma di oggetto idMsg:msg.payload\n\n\nlet ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\n\nlet prodId = \"prod\";\nlet excId = \"exc\";\nlet s7Id = \"s7\";\n//mappa di conversione da nomi DB a nomi s7 del progetto quadripressa\nlet prodMap = ctxGet(\"prodMap\",{\n    \"CYCLE_NUMBER\":\"prod_cycleNumber\",\n    \"ORDER_ID\":\"prod_id\",\n    // \"BEGIN_TIME\":\"\",\n    // \"END_TIME\":\"\",\n    \"QUANT_PROD\":\"prod_quantProd\",\n    \"ESITO\":\"prod_esito\"\n});\n\nlet excMap = ctxGet(\"excMap\", {\n    \"ORDER_ID\": \"exc_id\",\n    \"STATUS\":\"exc_status\",\n    // \"BEGIN_TIME\":\"\",\n    // \"END_TIME\":\"\",\n    \"QUANT_TO_DO\": \"exc_quantToDo\",\n    \"QUANT_PROD\": \"exc_quantProd\",\n});\n\nlet mapList = [excMap, prodMap];\nlet anyMapped = (key) => excMap[key] ?? prodMap[key]\n\nlet queryResList = msg.payload;\nif (!queryResList[prodId] || !Array.isArray(queryResList[prodId]) || queryResList[prodId].length == 0){\n    return node.error({txt:\"missing row from italmatic_production dbTable\", resList:queryResList});\n}\nif (!queryResList[excId] || !Array.isArray(queryResList[excId])){\n    return node.error({ txt: \"missing row from italmatic_exchange dbTable\", resList: queryResList });\n}\nlet prodRow = queryResList[prodId][0];\nlet excRow = queryResList[excId]?.[0];\n\nlet mapped = {};\n//copy prod\nfor (var [key, val] of Object.entries(prodMap)) {\n    mapped[val] = prodRow[key] ?? node.error({ txt: `missing col ${key} bound to ${val} in ${prodId} dbTable`, \"prodRow\": prodRow, \"resList\": queryResList });\n}\n//copy exc (or null, if no row with the same id exists)\nfor (var [key, val] of Object.entries(excMap)) {\n    if(excRow ?? false)\n        mapped[val] = excRow[key] ?? node.error({ txt: `missing col ${key} bound to ${val} in ${excId} dbTable`, \"excRow\": excRow, \"resList\": queryResList });\n    else\n        mapped[val] = null;\n}\n//copy s7\nglobal.get(\"utils\").mergeRec(mapped, queryResList[s7Id]);\n\nmsg.payload = mapped;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2100,
        "wires": [
            [
                "260b48d27cf6b812",
                "1e36d438702a9054"
            ]
        ]
    },
    {
        "id": "121791a729885846",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "QueryDB AllProdExc",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1225,
        "y": 2070,
        "wires": []
    },
    {
        "id": "7ab9bd345cae15a2",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "set msg.payload.prod_cycleRun",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"prod_cycleRun\":msg.payload}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 2100,
        "wires": [
            [
                "8b2efdddc37de145"
            ]
        ]
    },
    {
        "id": "c353cfd23d1de19b",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "endpoint": "34ec8711cb2e9270",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": false,
        "name": "prod_cycleRun 10s",
        "x": 380,
        "y": 2070,
        "wires": [
            [
                "7ab9bd345cae15a2"
            ]
        ]
    },
    {
        "id": "7677709fbc77f890",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "Poll all prodExc (s7+DB)",
        "info": "",
        "x": 410,
        "y": 2025,
        "wires": []
    },
    {
        "id": "a8fab7783082daec",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "payload:true",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 385,
        "y": 2130,
        "wires": [
            [
                "7ab9bd345cae15a2"
            ]
        ]
    },
    {
        "id": "36069ce4fbc1063c",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "payload:false",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 385,
        "y": 2160,
        "wires": [
            [
                "7ab9bd345cae15a2"
            ]
        ]
    },
    {
        "id": "9c9b0898765128a3",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "join",
        "func": "let ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\n\nvar buffer = ctxGet(\"buffer\",[]);\nvar expectedIds = ctxGet(\"expectedIds\", null);\n\nif(msg.control){\n    switch(msg.control){\n        default: \n            node.error({txt:\"undefined control\",ctrl:msg.control,full:msg});\n            break;\n        case \"reset\":\n            if(context.get(\"buffer\")?.length > 0)\n                node.warn({txt:\"[\"+node.name+\"] got reset before receiving all parts\",buffer:context.get(\"buffer\"),\"expected\":context.get(\"expectedIds\") });\n            context.set(\"buffer\",[]);\n            break;\n        case \"setExpectedIds\":\n            context.set(\"expectedIds\",msg.payload)\n            break;\n    }\n    return;\n}\n\n//check msg is unique (typos/errors) //each message is supposed to have a queryId prop\nif(buffer.some(item => item?.queryId == msg?.queryId)){\n    node.error({ txt: \"duplicate id \" + msg?.queryId + \" in buffer\", msg:msg, buff:buffer});\n    return;\n}\nbuffer.push(msg);\nnode.status({fill:\"blue\",shape:\"ring\",text:\"[\"+buffer.map( msg => (msg.queryId)).join(',')+\"] of \"+expectedIds.length });\n\n\n//if got all parts\nif (buffer.length >= expectedIds.length){\n    //update status\n    node.status({ fill: \"green\", shape: \"ring\", text: \"sent\" });\n    setTimeout(() => {\n        if (context.get(\"buffer\").length == 0) //se ancora in attesa\n            node.status({ fill: \"gray\", shape: \"ring\", text: \"...\" });\n    }, 3000)\n\n    //join all buffered msgs\n    // const utils = global.get(\"utils\");\n    // var joined = { payload:[] }\n\n    // for(var item of buffer)\n    //     if(item.queryId == \"s7\")\n    //         utils.mergeRec(joined, item);\n    //     else\n    //         joined.payload = (joined?.payload ?? []).concat(item.payload);            \n\n    var joined = {\n        payload:{\n        }\n    };\n    for(var msg of buffer){\n        joined.payload[msg.queryId] = msg.payload;\n    }\n\n    //empty buffer\n    context.set(\"buffer\",[]);\n\n    return joined;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"grey\",shape:\"ring\",text:\"...\"});",
        "finalize": "",
        "libs": [],
        "x": 1015,
        "y": 2100,
        "wires": [
            [
                "9b390d6ce049bee0",
                "121791a729885846"
            ]
        ]
    },
    {
        "id": "3b86202ba3e33fb7",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "(senza prefisso status_)",
        "info": "",
        "x": 1950,
        "y": 1865,
        "wires": []
    },
    {
        "id": "1e36d438702a9054",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "eed88747a97f2438",
        "name": "Mapped AllProdExc",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1245,
        "y": 2130,
        "wires": []
    },
    {
        "id": "cd87f18d7e95cb97",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b2f2e2e832b5442a",
        "name": "QueryDB AllProdExc",
        "func": "const db = global.get(\"db\");\nconst query = context.get(\"query\") ?? (()=>{throw new Error(\"undefined prop 'query' in node.context\")})()\nconst s7Vars = msg.payload ?? node.error(\"no s7 var to merge\") ?? {};\n\n//ottieni dati e converti nella forma del vecchio progetto\ndb.attachQuery(query, msg);\nmsg.formatCb = function(msg){\n    let qRes = msg.payload;\n    //check query is success\n    if(!qRes || msg.error)\n      return node.error(\"db query failed or empty result\", msg);\n    else if (!qRes.length )\n      node.warn({txt:\"db select query res was empty\",full:msg});\n\n    //from type RowDataPacket to normal object\n    msg.payload = {};\n    for (var [key, val] of Object.entries(qRes?.[0] ?? {}))\n      msg.payload[key] = val;\n\n    //merge s7 vars on top //(only cycleRun)\n    for (var [key, val] of Object.entries(s7Vars))\n        msg.payload[key] = val;\n    \n    delete msg.formatCb;\n    return msg;\n}\n\nreturn msg;\n\n\n/*\nSELECT\n  p.CYCLE_NUMBER AS prod_CYCLE_NUMBER,\n  p.ORDER_ID AS prod_ORDER_ID,\n  p.BEGIN_TIME AS prod_BEGIN_TIME,\n  p.END_TIME AS prod_END_TIME,\n  p.QUANT_PROD AS prod_QUANT_PROD,\n  p.ESITO AS prod_ESITO,\n\n  exc.ORDER_ID AS exc_ORDER_ID,\n  exc.STATUS AS exc_STATUS,\n  exc.QUANT_TO_DO AS exc_QUANT_TO_DO,\n  exc.QUANT_PROD AS exc_QUANT_PROD\nFROM\n  (\n    SELECT\n      *\n    FROM\n      oven.italmatic_production\n    WHERE\n      CYCLE_NUMBER = (\n        SELECT\n          MAX(CYCLE_NUMBER)\n        FROM\n          oven.italmatic_production\n      )\n  ) AS p\n  LEFT JOIN oven.italmatic_exchange AS exc ON exc.ORDER_ID = p.ORDER_ID\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\n\n//mappa di conversione da nomi DB a nomi s7 del progetto quadripressa\n    //non serve piu, ma potrebbe tornare utile\nlet prodPrefix = \"prod_\";\nlet _prodMap = ctxGet(\"prodMap\", {\n    \"CYCLE_NUMBER\": \"prod_cycleNumber\",\n    \"ORDER_ID\": \"prod_id\",\n    \"BEGIN_TIME\": \"prod_startTime\",\n    \"END_TIME\": \"prod_endTime\",\n    \"QUANT_PROD\": \"prod_quantProd\",\n    \"ESITO\": \"prod_esito\"\n});\n\n//mappa di conversione da nomi DB a nomi s7 del progetto quadripressa\nlet excPrefix = \"exc_\";\nlet _excMap = ctxGet(\"excMap\", {\n    \"ORDER_ID\": \"exc_id\",\n    \"STATUS\": \"exc_status\",\n    \"QUANT_TO_DO\": \"exc_quantToDo\",\n    \"QUANT_PROD\": \"exc_quantProd\",\n});\n\n\nlet _query = ctxGet(\"query\", `\nSELECT\n  p.CYCLE_NUMBER AS ${_prodMap[\"CYCLE_NUMBER\"]},\n  p.ORDER_ID AS ${_prodMap[\"ORDER_ID\"]},\n  p.BEGIN_TIME AS ${_prodMap[\"BEGIN_TIME\"]},\n  p.END_TIME AS ${_prodMap[\"END_TIME\"]},\n  p.QUANT_PROD AS ${_prodMap[\"QUANT_PROD\"]},\n  p.ESITO AS ${_prodMap[\"ESITO\"]},\n\n  exc.ORDER_ID AS ${_excMap[\"ORDER_ID\"]},\n  exc.STATUS AS ${_excMap[\"STATUS\"]},\n  exc.QUANT_TO_DO AS ${_excMap[\"QUANT_TO_DO\"]},\n  exc.QUANT_PROD AS ${_excMap[\"QUANT_PROD\"]}\nFROM\n  (\n    SELECT\n      *\n    FROM\n      oven.italmatic_production\n    WHERE\n      CYCLE_NUMBER = (\n        SELECT\n          MAX(CYCLE_NUMBER)\n        FROM\n          oven.italmatic_production\n      )\n  ) AS p\n  LEFT JOIN oven.italmatic_exchange AS exc ON exc.ORDER_ID = p.ORDER_ID\n`);\n\n/*\nSELECT\n  p.CYCLE_NUMBER AS prod_CYCLE_NUMBER,\n  p.ORDER_ID AS prod_ORDER_ID,\n  p.BEGIN_TIME AS prod_BEGIN_TIME,\n  p.END_TIME AS prod_END_TIME,\n  p.QUANT_PROD AS prod_QUANT_PROD,\n  p.ESITO AS prod_ESITO,\n\n  exc.ORDER_ID AS exc_ORDER_ID,\n  exc.STATUS AS exc_STATUS,\n  exc.QUANT_TO_DO AS exc_QUANT_TO_DO,\n  exc.QUANT_PROD AS exc_QUANT_PROD\nFROM\n  (\n    SELECT\n      *\n    FROM\n      oven.italmatic_production\n    WHERE\n      CYCLE_NUMBER = (\n        SELECT\n          MAX(CYCLE_NUMBER)\n        FROM\n          oven.italmatic_production\n      )\n  ) AS p\n  LEFT JOIN oven.italmatic_exchange AS exc ON exc.ORDER_ID = p.ORDER_ID\n\n*/",
        "finalize": "",
        "libs": [],
        "x": 1015,
        "y": 2325,
        "wires": [
            [
                "680672f23f8ab7a6"
            ]
        ]
    },
    {
        "id": "680672f23f8ab7a6",
        "type": "link call",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b2f2e2e832b5442a",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1190,
        "y": 2325,
        "wires": [
            [
                "06682709c6eb938a"
            ]
        ]
    },
    {
        "id": "06682709c6eb938a",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b2f2e2e832b5442a",
        "name": "merge",
        "func": "return msg?.formatCb(msg) ?? node.error({txt:\"missing formatCb\",full:msg},msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"grey\",shape:\"ring\",text:\"...\"});",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2325,
        "wires": [
            [
                "260b48d27cf6b812"
            ]
        ]
    },
    {
        "id": "c81bc3691698dacf",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b2f2e2e832b5442a",
        "name": "set msg.payload.prod_cycleRun",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"prod_cycleRun\":msg.payload}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 745,
        "y": 2325,
        "wires": [
            [
                "cd87f18d7e95cb97"
            ]
        ]
    },
    {
        "id": "5f673c8089606c89",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b2f2e2e832b5442a",
        "endpoint": "34ec8711cb2e9270",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": false,
        "name": "prod_cycleRun 10s",
        "x": 685,
        "y": 2295,
        "wires": [
            [
                "c81bc3691698dacf"
            ]
        ]
    },
    {
        "id": "c2496432b0f56960",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b2f2e2e832b5442a",
        "name": "Poll all prodExc (s7+DB)",
        "info": "",
        "x": 705,
        "y": 2250,
        "wires": []
    },
    {
        "id": "d1135a719ce25b33",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "INSERT in prodTable",
        "func": "\nlet db = global.get(\"db\");\n\nlet dtNow = new Date();\nvar dtBef = new Date();\ndtBef.setHours( dtBef.getHours()-1);\n\nreturn db.attachQuery(\n    db.sqlString.format(`\n            INSERT INTO oven.italmatic_production\n                    (ORDER_ID, BEGIN_TIME, END_TIME, ESITO, QUANT_PROD)\n            VALUES  (?,?,  ?, true, '1')\n        `,\n        [\n            msg.ordId,\n            db.sqlString.dateToString(dtNow,\"local\").slice(1,-5),\n            db.sqlString.dateToString(dtBef,\"local\").slice(1,-5)\n        ]\n    )\n);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 865,
        "y": 2625,
        "wires": [
            [
                "049a64b846b79561"
            ]
        ]
    },
    {
        "id": "049a64b846b79561",
        "type": "link call",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1045,
        "y": 2625,
        "wires": [
            [
                "341ce80196f74099"
            ]
        ]
    },
    {
        "id": "341ce80196f74099",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "prodTable INSERT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 2625,
        "wires": []
    },
    {
        "id": "ebd5369b4dcbfbac",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "ordId: id_1",
        "rules": [
            {
                "t": "set",
                "p": "ordId",
                "pt": "msg",
                "to": "id_1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 635,
        "y": 2580,
        "wires": [
            [
                "d1135a719ce25b33"
            ]
        ]
    },
    {
        "id": "1b62f9991875e6c6",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "ordId: id_2",
        "rules": [
            {
                "t": "set",
                "p": "ordId",
                "pt": "msg",
                "to": "id_2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 635,
        "y": 2625,
        "wires": [
            [
                "d1135a719ce25b33"
            ]
        ]
    },
    {
        "id": "fc399081cb744996",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "ordId: id_3",
        "rules": [
            {
                "t": "set",
                "p": "ordId",
                "pt": "msg",
                "to": "id_3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 635,
        "y": 2670,
        "wires": [
            [
                "d1135a719ce25b33"
            ]
        ]
    },
    {
        "id": "c8b7ff221527a71f",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 515,
        "y": 2580,
        "wires": [
            [
                "ebd5369b4dcbfbac"
            ]
        ],
        "l": false
    },
    {
        "id": "82d686b6580e2667",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 515,
        "y": 2625,
        "wires": [
            [
                "1b62f9991875e6c6"
            ]
        ],
        "l": false
    },
    {
        "id": "fc0068b4547911b2",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 515,
        "y": 2670,
        "wires": [
            [
                "fc399081cb744996"
            ]
        ],
        "l": false
    },
    {
        "id": "4f1ea785c845325b",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "payload:true",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 565,
        "y": 2505,
        "wires": [
            [
                "e8b1b96a138f8bcc"
            ]
        ]
    },
    {
        "id": "46364f8db2f241b3",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "payload:false",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 565,
        "y": 2535,
        "wires": [
            [
                "e8b1b96a138f8bcc"
            ]
        ]
    },
    {
        "id": "20568c91f483a968",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "simula ciclo",
        "info": "",
        "x": 565,
        "y": 2460,
        "wires": []
    },
    {
        "id": "9d91f8e564086ea1",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "map to old names",
        "func": "let ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\n\nlet map = ctxGet(\"newToOldMap\",{\n    \"temperaturaPianoSuperiore\":\"tempPianoSup\"\n})\n\nif(map[msg.topic] !== undefined){\n    msg.topic = map[msg.topic];\n}\nelse{\n    if(ctxGet(\"dbg_unmapped\",{\n            \"alife\": true,\n            \"emergency\": true,\n            \"cycleActive\": true,\n            \"setpointTemp\": true,\n            \"setpointPress\": true,\n            \"pressPressata\": true,\n            \"idPressa\": true,\n        })[msg.topic] === undefined){\n        node.warn({ txt: \"unmapped varname. Missing update?\", varName: msg.topic, unmapped: context.get(\"dbg_unmapped\"), full:msg});\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1840,
        "wires": [
            [
                "f496db4601480ad7"
            ]
        ]
    },
    {
        "id": "0396c1363191d76c",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "PRESSA1 ALIFE",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2658,
        "y": 1424,
        "wires": []
    },
    {
        "id": "61ea0333115f4695",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "b2f2e2e832b5442a",
        "name": "about: why not used",
        "info": "la versione che usa il db processa piu ordini in parallelo.\nQuesto è un breaking change, non si puo adattare",
        "x": 975,
        "y": 2250,
        "wires": []
    },
    {
        "id": "82263c74cf9a6c57",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning=context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n    //lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning){\n    context.set(\"lastCycleIsRunning\",cycleIsRunning);\n    //on cycle beginning\n    if(cycleIsRunning){\n        return node.send([msg,null]);\n    }\n    //on cycle end\n    else{\n        return node.send([null, msg]);\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2925,
        "wires": [
            [
                "aeab01b884227dc9",
                "5003039f746fe3ee"
            ],
            [
                "4f79875f6a420854",
                "3a54988fd0c01314"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "aeab01b884227dc9",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "pressa1 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [
            "50128141cfef2e47"
        ],
        "x": 1670,
        "y": 2910,
        "wires": [],
        "l": true
    },
    {
        "id": "4f79875f6a420854",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "pressa1 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "9f767a4b86454460",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a",
            "cf6b343f2f0a8d9a",
            "a58a25d9e87488a7",
            "b0e08df19ef6675f",
            "324969d1f04ba9c0",
            "32931ffe3521ace0",
            "04a3a4f993d3a69c"
        ],
        "x": 1670,
        "y": 2955,
        "wires": [],
        "l": true
    },
    {
        "id": "3a54988fd0c01314",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "oncePerCyc end pressa1 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 2985,
        "wires": []
    },
    {
        "id": "87df1b1e91ece4e9",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1180,
        "y": 2925,
        "wires": [
            [
                "82263c74cf9a6c57"
            ]
        ],
        "l": false
    },
    {
        "id": "c18915e6d4b4731d",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "endpoint": "34ec8711cb2e9270",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": false,
        "name": "prod_cycleRun 10s",
        "x": 925,
        "y": 2910,
        "wires": [
            [
                "4ffb7ca80ec969e4"
            ]
        ]
    },
    {
        "id": "4ffb7ca80ec969e4",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "set msg.payload.prod_cycleRun",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"prod_cycleRun\":msg.payload}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 985,
        "y": 2940,
        "wires": [
            [
                "87df1b1e91ece4e9"
            ]
        ]
    },
    {
        "id": "5003039f746fe3ee",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "oncePerCyc start pressa1 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1615,
        "y": 2880,
        "wires": []
    },
    {
        "id": "eb9b19854725f4ad",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "",
        "info": "",
        "x": 895,
        "y": 2865,
        "wires": []
    },
    {
        "id": "e8b1b96a138f8bcc",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "4c1f6debb662b115",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 2520,
        "wires": [
            [
                "73d9551763e5d625"
            ]
        ],
        "l": false
    },
    {
        "id": "73d9551763e5d625",
        "type": "link out",
        "z": "9922a8114f46702b",
        "name": "dbgLink simulaCiclo in",
        "mode": "link",
        "links": [
            "cad2bd523c7147bc",
            "de28ab8a9c960787"
        ],
        "x": 820,
        "y": 2520,
        "wires": [],
        "l": true
    },
    {
        "id": "cad2bd523c7147bc",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "b2f2e2e832b5442a",
        "name": "dbgLink simulaCiclo in",
        "links": [
            "73d9551763e5d625",
            "cc7de937cce7ee42"
        ],
        "x": 685,
        "y": 2355,
        "wires": [
            [
                "c81bc3691698dacf"
            ]
        ],
        "l": true
    },
    {
        "id": "de28ab8a9c960787",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "1ea69c1647f48773",
        "name": "dbgLink simulaCiclo in",
        "links": [
            "73d9551763e5d625",
            "cc7de937cce7ee42"
        ],
        "x": 940,
        "y": 2985,
        "wires": [
            [
                "4ffb7ca80ec969e4"
            ]
        ],
        "l": true
    },
    {
        "id": "12d506e3c36cb1e0",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "log uncaught out",
        "mode": "link",
        "links": [
            "f07a5882094bb355",
            "f06c3b8f566b9d90"
        ],
        "x": 1430,
        "y": 176,
        "wires": [],
        "l": true
    },
    {
        "id": "109d34b4b47bf77a",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "OLD_queryDb in",
        "links": [],
        "x": 2175,
        "y": 315,
        "wires": [
            [
                "d2907618278aa1be",
                "05085880d56d9d9b"
            ]
        ],
        "l": true
    },
    {
        "id": "b7a798bcb386fd7b",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "queryDb out",
        "mode": "return",
        "links": [],
        "x": 2640,
        "y": 315,
        "wires": []
    },
    {
        "id": "7120c3da33d92ab6",
        "type": "catch",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "",
        "scope": [
            "d2907618278aa1be"
        ],
        "uncaught": false,
        "x": 2245,
        "y": 255,
        "wires": [
            [
                "b7a798bcb386fd7b",
                "4f448098a8371714",
                "ea8b50b73c73f985",
                "dbe405c3c9e4b6f5"
            ]
        ]
    },
    {
        "id": "44e7dfbb15aa708f",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "QUERY DATABASE",
        "info": "-always returns something\n-log errors to file\n",
        "x": 2190,
        "y": 155,
        "wires": []
    },
    {
        "id": "8d6a9abd8282b7df",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "general usage info",
        "info": "\n- this node sets its status to the LAST operation's outcome.\n    Meaning it will stay the same unless another query is sent\n-mysql errors are thrown as exceptions\n-connection state is not shared.",
        "x": 2230,
        "y": 195,
        "wires": []
    },
    {
        "id": "4f448098a8371714",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "dbOutput",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2775,
        "y": 315,
        "wires": []
    },
    {
        "id": "de4853ea3edf7e99",
        "type": "file in",
        "z": "467287adb311067b",
        "d": true,
        "g": "c05cbc581f087383",
        "name": "dbErrors.log lines",
        "filename": "./dbErrors.log",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2360,
        "y": 490,
        "wires": [
            [
                "1e4b67881e90dc1c",
                "fed8c45c180c3512"
            ]
        ]
    },
    {
        "id": "aa835b5d1cc02d9b",
        "type": "inject",
        "z": "467287adb311067b",
        "d": true,
        "g": "c05cbc581f087383",
        "name": "24h",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 2200,
        "y": 490,
        "wires": [
            [
                "de4853ea3edf7e99"
            ]
        ]
    },
    {
        "id": "1e4b67881e90dc1c",
        "type": "join",
        "z": "467287adb311067b",
        "d": true,
        "g": "c05cbc581f087383",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2580,
        "y": 490,
        "wires": [
            [
                "60ad0ab445a162eb"
            ]
        ]
    },
    {
        "id": "fed8c45c180c3512",
        "type": "trigger",
        "z": "467287adb311067b",
        "d": true,
        "g": "c05cbc581f087383",
        "name": "5s -> msg.complete",
        "op1": "",
        "op2": "{\"complete\":true}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2500,
        "y": 450,
        "wires": [
            [
                "1e4b67881e90dc1c"
            ]
        ]
    },
    {
        "id": "60ad0ab445a162eb",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "c05cbc581f087383",
        "name": "max 10k leftshift",
        "func": "\nlet newLength = 10000;\nif(msg.payload.length > newLength){\n    let diff = msg.payload.length - newLength;\n    for (let i = 0; i < newLength; i++)\n        msg.payload[i] = msg.payload[i + diff];\n    msg.payload.length = newLength;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 490,
        "wires": [
            []
        ]
    },
    {
        "id": "d577904798f15058",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "c05cbc581f087383",
        "name": "limit log size",
        "info": "",
        "x": 2200,
        "y": 450,
        "wires": []
    },
    {
        "id": "ea8b50b73c73f985",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "d07dfb333aed56ce",
        "name": "prepare log",
        "func": "function safeStringify(obj) {\n    var cache = [];\n    var cacheKeys = [];\n    return JSON.stringify(obj, (key, value) => {\n        if (typeof value === 'object' && value !== null) {\n            //Duplicate reference found -> discard key / store\n            const idx = cache.indexOf(value)\n            //if duplicate found\n            //return twin's key instead\n            if (idx != -1) //-1 means not present\n                return \"dupOf_\" + (cacheKeys[idx].toString() ?? \"root\");\n            //else store it\n            else {\n                cache.push(value);\n                cacheKeys.push(key);\n            }\n        }\n        return value;\n    });\n}\n\ndelete msg._msgid\ndelete msg._event\n \nreturn {\n    payload: { time: new Date().toString(), ms: Date.now(), msg: msg }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2505,
        "y": 255,
        "wires": [
            [
                "afac37083de7623f"
            ]
        ],
        "l": false
    },
    {
        "id": "afac37083de7623f",
        "type": "file",
        "z": "467287adb311067b",
        "d": true,
        "g": "d07dfb333aed56ce",
        "name": "",
        "filename": "dbErrors.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2640,
        "y": 255,
        "wires": [
            []
        ]
    },
    {
        "id": "43fdf2a5a134b272",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "d07dfb333aed56ce",
        "name": "all dbErrors",
        "func": "\nif (msg.error) {\n    node.error({ \"err\": msg.error.message, \"n\": msg.error.source.name, \"q\":msg.topic, \"full\": msg });\n}\nelse {\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 215,
        "wires": [
            []
        ]
    },
    {
        "id": "dbe405c3c9e4b6f5",
        "type": "gate",
        "z": "467287adb311067b",
        "d": true,
        "g": "d07dfb333aed56ce",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 2525,
        "y": 215,
        "wires": [
            [
                "43fdf2a5a134b272"
            ]
        ],
        "l": false
    },
    {
        "id": "4e11b2f45a32813c",
        "type": "inject",
        "z": "467287adb311067b",
        "d": true,
        "g": "d07dfb333aed56ce",
        "name": "toggle",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "toggle",
        "payloadType": "str",
        "x": 2590,
        "y": 175,
        "wires": [
            [
                "dbe405c3c9e4b6f5"
            ]
        ]
    },
    {
        "id": "d2cc8a993cf033bf",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "name": "this db recap",
        "info": "",
        "x": 2370,
        "y": 155,
        "wires": []
    },
    {
        "id": "4e88477a10e3c17e",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "2bbbe4dc6cfeb097",
        "name": "set global.mysql",
        "func": "//look into onStart tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/* javascript class cheatsheet\n//everything is public.\n    #varname == private\n    *method() == private\n    get varname()/get varname:f() = getter for varname\n//; at each line's end\n*/\nclass mysql {\n    #tableDict;\n    /** @param dbgMode:Bool flag to enable typo checking and such */\n    dbgMode; //unused\n    get tableDict() {\n        return this.#tableDict;\n    }\n\n    constructor() {\n        this.#tableDict = {\n            storico: [\"unixMs\", \"col1\", \"col2\", \"col3\", \"col4\"]\n        };\n        this.dbgMode = false;\n    };\n\n    /**\n     * wait for db to be ready for queries, then send it.<br>\n     * - it's recomended to copy-paste this in the node instead of calling it, as to have error's origin set to the caller\n     * @param {typeof Object.prototype} query - query to send\n     * @param {number} retryDelay - time in ms to pass to setInterval()\n     * @param {number} timeout - time in ms after which stop trying and outputting an error.\n     * @returns {void}\n    */\n    asyncSend(callerNode, query, retryDelay=5000,timeout=120*1000){\n        node.warn({ err: \"STILL USING ASYNC SEND\", source: callerNode.id})\n        if(global.get(\"dbIsOk\")) {\n            callerNode.send(query);\n        }\n        else {\n            let tout;\n            const intv = setInterval(() => {\n                if (global.get(\"dbIsOk\")) {\n                    clearInterval(intv);\n                    tout && clearTimeout(tout);\n                    callerNode.send(query, false)\n                }\n            }, retryDelay)\n            \n            tout = setTimeout(() => {\n                clearInterval(intv);\n                callerNode.error({ err: \"mysql:query timedout\", q: query });\n            }, timeout);\n        }\n    }\n\n    newRow(table, pairsObj, extraSql = \"\") {\n        return `INSERT INTO ${table} SET ${(this.toList(pairsObj))} ${extraSql}`;\n    };\n\n    toList(pairs) {\n        let assignList = \"\";\n        for(const key in pairs) {\n            assignList += `${key}=${pairs[key]}, `;\n        }\n        if(assignList)\n            assignList = assignList.slice(0, -2);\n        return assignList;\n    }\n\n//\n\n    insert(template, pairs) { }\n\n    static insertStorico(vals) {\n        var { POTENZA_ATTIVA, POTENZA_PV1, POTENZA_PV2 } = vals\n    }\n    static query(template, valObj) {\n\n    }\n}\nglobal.set(\"mysql\", new mysql());\n\nnode.status({ fill: \"green\", text:\"new mysql()\" });\n",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 270,
        "wires": [
            [
                "50feeadd8d078ab3",
                "1eb170112f76f377"
            ]
        ]
    },
    {
        "id": "50feeadd8d078ab3",
        "type": "change",
        "z": "467287adb311067b",
        "d": true,
        "g": "2bbbe4dc6cfeb097",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mysql",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1920,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "1eb170112f76f377",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "2bbbe4dc6cfeb097",
        "name": "mysql",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1885,
        "y": 315,
        "wires": []
    },
    {
        "id": "445fed90cc9ae04b",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "2bbbe4dc6cfeb097",
        "name": "set global.functions",
        "func": "\nnode.global.set(\"utils\",{\n    errorMsg:function (){\n\n    }\n\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/* javascript class cheatsheet\n//everything is public.\n    #varname == private\n    *method() == private\n    get varname()/get varname:f() = getter for varname\n//; at each line's end\n*/\nclass mysql {\n    #tableDict;\n    /** @param dbgMode:Bool flag to enable typo checking and such */\n    dbgMode; //unused\n    get tableDict() {\n        return this.#tableDict;\n    }\n\n    constructor() {\n        this.#tableDict = {\n            storico: [\"unixMs\", \"col1\", \"col2\", \"col3\", \"col4\"]\n        };\n        this.dbgMode = false;\n    };\n\n    /**\n     * wait for db to be ready for queries, then send it.<br>\n     * - it's recomended to copy-paste this in the node instead of calling it, as to have error's origin set to the caller\n     * @param {typeof Object.prototype} query - query to send\n     * @param {number} retryDelay - time in ms to pass to setInterval()\n     * @param {number} timeout - time in ms after which stop trying and outputting an error.\n     * @returns {void}\n    */\n    asyncSend(callerNode, query, retryDelay=5000,timeout=120*1000){\n        if(global.get(\"dbIsOk\")) {\n            callerNode.send(query);\n        }\n        else {\n            let tout;\n            const intv = setInterval(() => {\n                if (global.get(\"dbIsOk\")) {\n                    clearInterval(intv);\n                    tout && clearTimeout(tout);\n                    callerNode.send(query, false)\n                }\n            }, retryDelay)\n            \n            tout = setTimeout(() => {\n                clearInterval(intv);\n                callerNode.error({ err: \"mysql:query timedout\", q: query });\n            }, timeout);\n        }\n    }\n\n    newRow(table, pairsObj, extraSql = \"\") {\n        return `INSERT INTO ${table} SET ${(this.toList(pairsObj))} ${extraSql}`;\n    };\n\n    toList(pairs) {\n        let assignList = \"\";\n        for(const key in pairs) {\n            assignList += `${key}=${pairs[key]}, `;\n        }\n        if(assignList)\n            assignList = assignList.slice(0, -2);\n        return assignList;\n    }\n\n//\n\n    insert(template, pairs) { }\n\n    static insertStorico(vals) {\n        var { POTENZA_ATTIVA, POTENZA_PV1, POTENZA_PV2 } = vals\n    }\n    static query(template, valObj) {\n\n    }\n}\nglobal.set(\"mysql\", new mysql());\n\nnode.status({fill:\"green\",text:\"defined\"});",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 315,
        "wires": [
            []
        ]
    },
    {
        "id": "aa40c2fd63e42b3c",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "2bbbe4dc6cfeb097",
        "name": "GLOBALI",
        "info": "",
        "x": 1695,
        "y": 225,
        "wires": []
    },
    {
        "id": "c2be07fdd0c16931",
        "type": "switch",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "flow.dbHadError",
        "property": "dbHadError",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 735,
        "wires": [
            [
                "15852055c342f46e"
            ],
            [
                "9a225e0d13c1f834"
            ]
        ]
    },
    {
        "id": "9a225e0d13c1f834",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "queryDb",
        "links": [
            "109d34b4b47bf77a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2350,
        "y": 735,
        "wires": [
            [
                "a5b60ba381f9b108"
            ]
        ]
    },
    {
        "id": "a5b60ba381f9b108",
        "type": "switch",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "msg.error",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 2490,
        "y": 735,
        "wires": [
            [
                "56e0b0f75ee7ed61",
                "263134e42e86e47b"
            ],
            [
                "71950aee80a23402"
            ]
        ]
    },
    {
        "id": "15852055c342f46e",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "queue delay 4s->60m",
        "func": "//enqueue msg after increasing delay, stack size is limited\n\n//prepare msg\ndelete msg.error;\nmsg.attempts = (msg.attempts ? msg.attempts+1 : 1);\n\n//enqueue msg after increasing delay\n    //calc delay\nlet a = msg.attempts - 1;\nlet base = 4000; //4, 6, 9, 13 //4, 6.4\nvar delay = (Math.pow(3, a) / Math.pow(2, a)) * base // ( 3^i/2^i )*d <=> d°i+1 = d°i + (1/2)d°i\ndelay = Math.min(delay, 3600000) //max 60m\n    //set timeout\nlet tout = setTimeout(() => {\n    //node.warn({ txt: \"sent after\", d: delay })\n    node.send(msg, false);\n}, delay)\n\n//track timeouts\n    //at max size replace the older one\nvar allTouts = context.get(\"timeoutsRefArray\") ?? [];\nlet newItem = { tout: tout, full: msg };\nif (allTouts.length > 5000) {\n    //find older\n    let maxIdx;\n    for (let i = 0; i < allTouts.length; i++)\n        if (allTouts[i].a > allTouts[maxIdx].a)\n            maxIdx = i;\n    //clear it\n    clearTimeout(allTouts[maxIdx].tout);\n    //log it or whatever\n    node.send([null, msg], false);\n    //replace with new\n    allTouts[maxIdx] = newItem;\n}\nelse\n    allTouts.push(newItem);\n    \ncontext.set(\"timeoutsRefArray\",allTouts);\n\n\n\n\n/*\nif(context.get(\"allTouts\")){\n    let i = context.get(\"maxAttempts\")-1;\n    let base = 4000; //4, 6, 9, 13 //4, 6.4\n    var delay = ( Math.pow(3, i) / Math.pow(2, i) )*base // ( 3^i/2^i )*d <=> d°i+1 = d°i + (1/2)d°i\n    delay = Math.max(delay,1800) //max 30m\n    context.set(\"retryTimeout\",setTimeout(,delay))\n}\n\n\n    return msg;\n    */",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2095,
        "y": 675,
        "wires": [
            [
                "e4476e1da8adfa98"
            ],
            [
                "aaacd9c0df2207bc"
            ]
        ],
        "outputLabels": [
            "try",
            "dropped"
        ]
    },
    {
        "id": "56e0b0f75ee7ed61",
        "type": "change",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dbHadError",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 675,
        "wires": [
            [
                "15852055c342f46e"
            ]
        ]
    },
    {
        "id": "71950aee80a23402",
        "type": "change",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dbHadError",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2680,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "a9a1170dafd3f770",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "OLD_queryDb_queued in",
        "links": [],
        "x": 1725,
        "y": 735,
        "wires": [
            [
                "c2be07fdd0c16931"
            ]
        ],
        "l": true
    },
    {
        "id": "9099955c40e2fc51",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "on error -> queue and limit rate",
        "info": "\nmsg are queue in parallel, using timeouts.\nrate is also limited, so the actual delay may exceed the timeout by\n    rateTime * queueLength, growing without limits if inputs exceed rate.",
        "x": 2080,
        "y": 635,
        "wires": []
    },
    {
        "id": "e4476e1da8adfa98",
        "type": "delay",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2345,
        "y": 675,
        "wires": [
            [
                "9a225e0d13c1f834"
            ]
        ]
    },
    {
        "id": "b2df6d219fc4e5d5",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "good for time-independent INSERTs",
        "info": "",
        "x": 2370,
        "y": 635,
        "wires": []
    },
    {
        "id": "40c718410b4aa9ae",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "COMMON RESPONSELESS FLOW",
        "info": "",
        "x": 1790,
        "y": 635,
        "wires": []
    },
    {
        "id": "263134e42e86e47b",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "015cd5895c17da64",
        "name": "DB QUEUED WARN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 695,
        "wires": []
    },
    {
        "id": "74f782b5c9918cb1",
        "type": "file in",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "dbErrors.log lines",
        "filename": "./dbErrors.log",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2320,
        "y": 875,
        "wires": [
            [
                "1324ee68fb02e80c",
                "64cf467ff1198d60"
            ]
        ]
    },
    {
        "id": "778d922066b06dc9",
        "type": "inject",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "24h",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 2160,
        "y": 875,
        "wires": [
            [
                "74f782b5c9918cb1"
            ]
        ]
    },
    {
        "id": "1324ee68fb02e80c",
        "type": "join",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2540,
        "y": 875,
        "wires": [
            [
                "a30b7f56e3861d49"
            ]
        ]
    },
    {
        "id": "64cf467ff1198d60",
        "type": "trigger",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "5s -> msg.complete",
        "op1": "",
        "op2": "{\"complete\":true}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2460,
        "y": 835,
        "wires": [
            [
                "1324ee68fb02e80c"
            ]
        ]
    },
    {
        "id": "a30b7f56e3861d49",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "max 10k leftshift",
        "func": "\nlet newLength = 10000;\nif(msg.payload.length > newLength){\n    let diff = msg.payload.length - newLength;\n    for (let i = 0; i < newLength; i++)\n        msg.payload[i] = msg.payload[i + diff];\n    msg.payload.length = newLength;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 875,
        "wires": [
            []
        ]
    },
    {
        "id": "76167b51b59bab4d",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "limit log size",
        "info": "",
        "x": 2160,
        "y": 835,
        "wires": []
    },
    {
        "id": "aaacd9c0df2207bc",
        "type": "file",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "",
        "filename": "dbDroppedQueries.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1980,
        "y": 875,
        "wires": [
            []
        ]
    },
    {
        "id": "e60338ef13bfc039",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "c6691944eaed7410",
        "name": "log dropped queries",
        "info": "",
        "x": 1960,
        "y": 835,
        "wires": []
    },
    {
        "id": "d2907618278aa1be",
        "type": "mysql",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "mydb": "48311468c344555d",
        "name": "InterVm OvenDB@nodeRedClient",
        "x": 2410,
        "y": 315,
        "wires": [
            [
                "b7a798bcb386fd7b",
                "4f448098a8371714"
            ]
        ]
    },
    {
        "id": "05085880d56d9d9b",
        "type": "mysql",
        "z": "467287adb311067b",
        "d": true,
        "g": "7a4a549b398c4c30",
        "mydb": "48311468c344555d",
        "name": "_dev@root",
        "x": 2345,
        "y": 345,
        "wires": [
            [
                "b7a798bcb386fd7b"
            ]
        ]
    },
    {
        "id": "cf1b96c84eaa65ad",
        "type": "function",
        "z": "467287adb311067b",
        "g": "290ebf86bbdaeb68",
        "name": "set global.db",
        "func": "//look into onStart tab ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nnode.status({ fill: \"yellow\", text: \"waiting deps\" });\nlet thisClassName = \"db\"; //mysql is somehow a reserved key, and does not get added to globals..\nlet self = ()=>global.get(thisClassName);\nlet getThisClass = () => global.get(thisClassName);\n\n/** POST-GEN PROCEDURE\n *  used to generate stuff that depends on other stuff, or it's a function of it.\n *  ex: \"mySillyProp\": afterDef( def => { /* parse def for values * / def.mySillyProp = generatedValue; }, \"mySillyProp\");\n *      - postGen: array of cb, each will be called after def has been instantiated. (WON'T BE IN GLOBAL THO! use from args)\n *      - postGenInfo: array of cbNames. Optional, but encouraged as they make it easier to find errors.\n *      - afterDef(def): entrypoint func, used to add stuff to the post-generation procedure.\n *      - postGenGroupedMsgList: used to group all warn and error messages into one\n *      - print_postGen_errors(): used to group all warn and error messages into one */\nlet postGen = []; let postGenInfo=[]; let postGenGroupedMsgList=[]; let afterDef = (func, optionalFName) => {\n    postGen.push(func ?? (()=>{ postGenGroupedMsgList.push({ cat: \"nullCb\", idx: postGen.length})})() ?? null);\n    postGenInfo.push(optionalFName ?? (()=>{ postGenGroupedMsgList.push({ cat: \"noFName\", idx: postGen.length-1})})() ?? \" undefName\");\n    return \"toBeSet_afterward\";\n};\nfunction print_postGen_errors(){\n    let map = {}; postGenGroupedMsgList.forEach(pair => map[pair.cat] = map[pair.cat] ? pair : [pair]);\n    if(postGenGroupedMsgList?.length)\n        node.warn({\n            txt: `[WARNING] in afterDef() of global.${thisClassName} `\n                + (!map[\"nullCb\"] ? ''   : `\\n ${map[\"nullCb\"]?.length} nullish callbacks found in afterDef, for ${map[\"nullCb\"]?.map?.(pair => postGenInfo?.[pair?.idx])?.join(', ')}`)\n                + (!map[\"noFName\"] ? ''  : `\\n ${ map[\"noFName\"]?.length } of ${ postGen?.length } callbacks miss a displayName.This will make it harder to pinpoint errors.`),\n            allErrs: map,\n            nullCb: !map[\"nullCb\"] ? undefined : { txt: `${map[\"nullCb\"]?.length} nullish callbacks found in afterDef`, idxs: map[\"nullCb\"]?.map?.(pair => pair.idx), fNames: map[\"nullCb\"]?.map?.(pair => postGenInfo?.[pair?.idx])},\n            noFName: !map[\"noFName\"] ? undefined : { txt: `${map[\"noFName\"]?.length} of ${postGen?.length} callbacks miss a displayName. This will make it harder to pinpoint errors.`, idxs: map[\"noFName\"]?.map?.(pair => pair.idx), fNames: map[\"noFName\"]?.map?.(pair => postGenInfo?.[pair?.idx]) }\n        });\n}\n\nconst sqlString = getSqlString();\n\ncallWhenDef(\"utils\",()=>{\n    const utils = global.get(\"utils\");\n    let def = {\n        \"connCfg\":{\n            username:\"nodered_client\",\n            database:\"oven\",\n            host:\"localhost\",\n            port: 3306,\n            password:\"Luca140583\",\n        },\n        /** @summary chiamato sui messaggi in uscita dal nodo db per non portarsi dietro i dati della connessione.\n         * @param {Object | Array} exceptMap lista di chiavi da mantenere. Accetta {}, [] e nullish. */\n        \"detachConnCfg\": function thisFunc(msg, exceptMap = {}){\n            if(!msg) throw new Error(\"msg cannot be null. msg:\"+msg);\n            //array to hashMap\n            if(Array.isArray(exceptMap)){\n                let tmp = exceptMap;\n                exceptMap = {};\n                tmp.forEach(key => exceptMap[key] = true);\n            }\n            for(var [key, _] of Object.entries(this.connCfg))\n                exceptMap?.[key] || delete msg[key];\n            return msg;\n        },\n        /** @summary \n            *  @desc \n            * @param {string} query valid mysql string\n            * @param {Object} msg the source msg object to use\n            * @param {function} onErr the cb fucntion that will be called if the query fails\n            */\n        \"attachQuery\": function thisFunc(queryStr, msg = new Object(), onSqlErr = null) {\n            if (typeof (queryStr) != \"string\")\n                throw new Error(\"Argument Type Mismatch: query string vs \" + typeof (queryStr));\n            //copia tutto da connCfg (senza sovrascrivere)\n            let connCfg = global.get(thisClassName).connCfg;\n            for(var [key, val] of Object.entries(connCfg))\n                if(msg[key] === undefined)\n                    msg[key] = connCfg[key];            \n            //allega query\n            msg.sql = queryStr;\n            msg.onSqlErr = onSqlErr;\n            return msg;\n        },\n        /** easier to use sqlString.format() to build the whole query */\n        \"sanitize\": function sanitize(str){\n            global.get(thisClassName).sqlString.escape(str);\n        },\n        /** brute copy from https://www.npmjs.com/package/sqlstring?activeTab=readme\n         *  basic sanitizing and formatting for sql strings */\n        \"sqlString\": sqlString,\n        /** multi-try sql query */\n        \"polledQuery\":{\n            \"pollCtxKey\":\"dbPollGet\",\n            /** collection of keys of pollCtx's common vars */\n            \"pollCtxPropNameList\": [\n                \"attempts\", \"startTime\", \"sqlErrorList\", \"isPollComplete\", //core\n                \"maxAttempts\",\"delay\",\"toutTolerance\",\"toutDelay\",\"toutTime\",\"readableTimes\",//cfg\n                \"query\", \"isSuccess\", \"lastTryTime\", \"isDbgWrapped\", \"endTime\", \"sqlErrorList_grouped\" //others //(explicit or pollStep-defined)\n            ],\n            /** on startup verifies that all pollCtx props have been manually registered in pollCtxPropNameList.\n             *  Then delete itself.\n             *      can't use afterDef() to gen them cuz init() needs access to global.db\n             *      can't gen them with callWhenDef() cuz it breaks the contract: when global.db is set it must be COMPLETE, ence it must hold this prop as well.  */\n            \"selfPoppingTest_pollCtxPropNameList\":callWhenDef(\"db\",()=>{\n                const dbPoll = global.get(\"db\").polledQuery;\n                var dummyMsg = {}; var dummyNode = node;\n                dbPoll.initPollCtx_core(dummyNode, dummyMsg);\n                dbPoll.initPollCtx_cfg(dummyNode, dummyMsg,{\n                    maxAttempts:0,\n                    delay:0\n                });\n                //get all props defined by the initer funcs + the ones defined inside performPollStep()\n                let missing = Object.entries(dummyMsg[dbPoll.pollCtxKey]).map(pair => pair[0]).concat([\n                    \"endTime\", \"sqlErrorList_grouped\"\n                ]).filter(defKey => !dbPoll.pollCtxPropNameList.includes(defKey));\n                if(missing?.length)\n                    node.warn({ txt:\"[WARNING] some props are missing from pollCtxPropNameList\", missing:missing})\n                delete dbPoll.selfPoppingTest_pollCtxPropNameList;\n            }),\n            /** init basic context properties. Same across all nodes  */\n            \"initPollCtx_core\": function thisFunc(node, msg){\n                if (thisFunc.length != arguments.length || [...arguments].some(arg => !arg))\n                    throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\" + item)}`);\n                \n                const isDbg = (lvl) => global.get(thisClassName).polledQuery.dbgSettings.isDbgSetFor(node, msg, lvl);\n                //clear ctx coming from other poll nodes\n                var pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey];\n                if(msg[global.get(thisClassName).polledQuery?.pollCtxKey]?.isPollComplete){\n                    isDbg(\"debug\") && node.warn({txt:\"deleting lingering pollCtx..\", ctx:pollCtx,full:msg,node:node});\n                    delete msg[global.get(thisClassName).polledQuery?.pollCtxKey];\n                }\n                var pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey] ?? (msg[global.get(thisClassName).polledQuery?.pollCtxKey] = {});\n                //dbPollGet common fields\n                pollCtx.attempts ?? (pollCtx.attempts = 0);\n                pollCtx.startTime ?? (pollCtx.startTime = Date.now());\n                pollCtx.sqlErrorList ?? (pollCtx.sqlErrorList = []);\n                pollCtx.isPollComplete ?? (pollCtx.isPollComplete = false);\n                pollCtx.lastTryTime ?? (pollCtx.lastTryTime = null);\n                pollCtx.isDbgWrapped ?? (pollCtx.lastTryTime = false);\n            },\n            /** common cfg init pattern. Nodes may explicitly init pollCtx\n             *  specific nodes may define additional ctx parameters, as required by their isSuccess() or inner workings\n             *  missing props from here:\n             *  - isSuccess() : true|false      controls when the polling stops\n             *  - query : string                sql query string\n             *  - custom stuff */\n            \"initPollCtx_cfg\": function thisFunc(node, msg, { maxAttempts, delay, toutTolerance=null, toutDelay=null, toutTime=null}){\n                if (thisFunc.length != arguments.length || [...arguments].some(utils.isNotSet))\n                    throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\" + item)}`);\n                if([maxAttempts, delay].some(utils.isNotSet))\n                    node.warn({ txt:\"[global db]: initPollCtx_cfg(): parameter with undefined value\",fName:thisFunc.name, args:arguments, calledBy:this});\n                //node-specific cfg\n                const pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey] ?? (() => { throw new Error(`missing pollCtx (msg.${global.get(thisClassName).polledQuery?.pollCtxKey})`) })(); \n                pollCtx.maxAttempts ?? (pollCtx.maxAttempts = maxAttempts);\n                pollCtx.delay ?? (pollCtx.delay = delay);\n                pollCtx.toutTolerance ?? (pollCtx.toutTolerance = toutTolerance ?? pollCtx.maxAttempts * 150);\n                pollCtx.toutDelay ?? (pollCtx.toutDelay = Math.max(toutDelay, pollCtx.maxAttempts * pollCtx.delay + pollCtx.toutTolerance));\n                pollCtx.toutTime ?? (pollCtx.toutTime = toutTime ?? pollCtx.startTime + pollCtx.toutDelay);\n                //human-readable copies\n                pollCtx.readableTimes ?? (pollCtx.readableTimes = pollCtx.readableTimes ?? (() => {\n                    let root = {};\n                    [\"delay\", \"toutDelay\", \"toutTolerance\"].forEach(timeKey => { root[timeKey] = global.get(\"utils\").msToScaledString(pollCtx[timeKey]); });\n                    [\"toutTime\", \"lastTryTime\"].forEach(timeKey => { root[timeKey] = global.get(\"utils\").msToScaledString((pollCtx[timeKey] ?? pollCtx.startTime) - pollCtx.startTime) + \" since start\"; });\n                    return root;\n                })());\n            },\n            /** call this if you explicitly define pollCtx members, to prehemptively catch errors\n             * verify all PollCtx props are defined and valid */\n            \"validatePollCtxInit\": function thisFunc(node, msg){\n                const pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey];\n                //check all defined //except a couple ones\n                const excluded = [\"lastTryTime\", \"isDbgWrapped\", \"endTime\", \"sqlErrorList_grouped\"]\n                var isValid = this.pollCtxPropNameList.every(key => excluded.includes(key) || utils.isSet(pollCtx[key]));\n                if(!isValid)\n                    try{\n                        node.error({\n                            \"txt\": \"failed pollCtx validation\", \"reason\": \"one or more items are nullish\",\n                            \"nullish\": this.pollCtxPropNameList.filter(propName => utils.isNotSet(pollCtx[propName]) && !excluded.includes(propName)),\n                            \"pollCtx\": pollCtx, \"required\": this.pollCtxPropNameList, \"full\": msg\n                        });\n                    } catch (ex) { //paranoic error printing\n                        node.error({ txt: \"failed pollCtx validation (and error generation)\", reason: \"one or more items are nullish\",full:msg, innerEx:ex });\n                    };\n                return isValid;\n            },\n            \"setNodeDisplayStatus\": function thisFunc(srcNode, msg, statusKey) {\n                try{ //should never break a flow, as it's meant as a simple dbg aid\n                    if (thisFunc.length != arguments.length || [...arguments].some(arg => !arg))\n                        throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\" + item)}`);\n                    const utils = global.get(\"utils\");\n                    let pollCtx = msg[global.get(thisClassName).polledQuery.pollCtxKey];\n                    let getCfgTriplet = () => `${pollCtx.maxAttempts}t /${utils.msToScaledString(pollCtx.delay)} /${utils.msToScaledString(pollCtx.toutDelay)}`\n                    switch (statusKey) {\n                        case \"inited\":          { srcNode.status({ fill: \"blue\",   shape: \"dot\", text: `init with ${getCfgTriplet()}` }); break; }\n                        case \"willRetry\":       { srcNode.status({ fill: \"yellow\", shape: \"dot\", text: `will #${pollCtx.attempts} of ${getCfgTriplet()}` }); break; }\n                        case \"awaitingResponse\":{ srcNode.status({ fill: \"yellow\", shape:\"ring\", text: `sent #${pollCtx.attempts} of ${getCfgTriplet()}` }); break; }\n                        case \"success\":         { srcNode.status({ fill: \"green\",  shape: \"dot\", text: `ok at #${pollCtx.attempts} /${utils.msToScaledString(pollCtx.endTime - pollCtx.startTime)} of ${getCfgTriplet()}` }); break; }\n                        case \"finalFail\":       { srcNode.status({ fill: \"red\",    shape: \"dot\", text: `aborted at #${pollCtx.attempts} /${utils.msToScaledString(pollCtx.endTime - pollCtx.startTime)} of ${getCfgTriplet()}` }); break; }\n                        default: { node.error({ txt: `[global.${thisClassName}] ${thisFunc.name}(): unknown node display status ` + statusKey, src: srcNode, full: msg, statKey: statusKey }, msg) }; break;\n                    }\n                }catch(e){ node.error(null,{txt:\"[WARN] cannot display pollCtx node status\", srcNode:srcNode, msg:msg})}\n            },\n            /** sends a db query and/or success/fail responses on different channels */\n            \"performPollStep\": function thisFunc(srcNode, msg){\n                if(thisFunc.length != arguments.length || [...arguments].some(arg => !arg))\n                    throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\"+item)}`);\n                const pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey] ?? (()=>{throw new Error(\"missing pollCtx\")})();\n                const utils = global.get(\"utils\");                \n                const dbPoll = global.get(thisClassName).polledQuery;\n                \n                const isDbg = (lvl) => dbPoll.dbgSettings.isDbgSetFor(srcNode, msg, lvl);\n                const sendQuery = () => {\n                    isDbg(\"debug\") && srcNode.warn({txt:\"sending query\",q:pollCtx.query,ctx:pollCtx,full:msg});\n                    pollCtx.attempts++;\n                    pollCtx.lastTryTime = Date.now();\n                    pollCtx.readableTimes.lastTryTime = utils.msToScaledString(pollCtx.lastTryTime - pollCtx.startTime) + \" since start\";\n                    global.get(thisClassName).attachQuery(pollCtx.query, msg)\n                    srcNode.send([null, null, global.get(thisClassName).attachQuery(pollCtx.query, msg) ?? node.error(\"!! nothing done\"), null])\n                }\n                isDbg(\"debug\") && srcNode.warn({ txt: \"dbPoll pre-step\", ctx: pollCtx, full: msg, srcNode: srcNode });\n                \n                //wrap isSuccess()   \n                    //aid in error pinpointing\n                if(utils.isSet(pollCtx.isSuccess) && !pollCtx.isDbgWrapped){\n                    utils.wrapFunctions(pollCtx, \"[pollCtx of node \" + srcNode.id + \"]\" );\n                    pollCtx.isDbgWrapped = true;\n                }\n                //if is first attempt\n                if(pollCtx.attempts == 0){\n                    sendQuery(); //attempts++\n                    dbPoll.setNodeDisplayStatus(srcNode, msg, \"inited\");\n                    return null;\n                }\n                else{\n                    var outParam_errTxt = {};\n                    //on success -> return\n                    if (pollCtx.isSuccess(srcNode, msg, outParam_errTxt)){\n                        //lock function value\n                        pollCtx.isSuccess_originalFunc = pollCtx.isSuccess;\n                        pollCtx.isSuccess = function(){return true}; \n                        //set info \"pollCompleted\"\n                        pollCtx.isPollComplete = true;\n                        pollCtx.endTime = Date.now();\n                        dbPoll.setNodeDisplayStatus(srcNode, msg, \"success\");\n                        return [msg, null, null, null];\n                    }\n                    //on fail\n                    else{\n                        node.warn({txt:\"\",ctx:pollCtx, list:pollCtx.sqlErrorList});\n                        //move error result to pollCtx\n                        pollCtx.sqlErrorList.push({\n                            \"txt\": outParam_errTxt.value,\n                            \"error\": msg.error,\n                            \"_error\": msg._error,\n                            \"payload\": msg.payload\n                        });\n                        delete msg.error;\n                        delete msg._error;\n                        delete msg.payload;\n                        //if not out of attempts: retry\n                        if (pollCtx.attempts < pollCtx.maxAttempts && Date.now() < pollCtx.toutTime){\n                            isDbg(\"verbose\") && srcNode.warn(\"will send next query in \" + utils.msToScaledString(pollCtx.delay));\n                            dbPoll.setNodeDisplayStatus(srcNode, msg, \"willRetry\");\n                            setTimeout(()=>{\n                                isDbg(\"verbose\") && srcNode.warn({ txt: \"sent next query after \" + utils.msToScaledString(pollCtx.delay), ctx: msg[global.get(thisClassName).polledQuery.pollCtxKey], full: msg});\n                                sendQuery();\n                                dbPoll.setNodeDisplayStatus(srcNode, msg, \"awaitingResponse\");\n                            }, pollCtx.delay);\n                        }\n                        else{\n                            //lock function value\n                            pollCtx.isSuccess_originalFunc = pollCtx.isSuccess;\n                            pollCtx.isSuccess = function(){return false};\n                            //set info \"pollCompleted\"\n                            pollCtx.isPollComplete = true;\n                            pollCtx.endTime = Date.now();\n                            pollCtx.readableTimes.endTime = global.get(\"utils\").msToScaledString((pollCtx.endTime ?? pollCtx.startTime) - pollCtx.startTime) + \" since start\";\n                            //set info \"sqlErrorList_grouped\"\n                            /**\n                             * idxMap will look like { \n                             *  <errTxt1>: <idx in sqlErrorList_grouped>,\n                             *  <txt2>: <idx2>, \n                             *  ..\n                             * }\n                             * meanwhile pollCtx.sqlErrorList_grouped will hold one row for each mapped text. */\n                            pollCtx.sqlErrorList_grouped = [];\n                            const idxMap = {}; pollCtx.sqlErrorList.forEach(errObj => idxMap[errObj.txt] ?? (idxMap[errObj.txt] = pollCtx.sqlErrorList_grouped.push({\n                                txt: errObj.txt,\n                                //error\n                                //_error\n                                count:0, //will be incremented later on\n                            })-1));\n                            //node.warn({txt:\"after idxMap init\",idxMap:idxMap, errList:pollCtx.sqlErrorList, grouped:pollCtx.sqlErrorList_grouped, ctx:pollCtx})\n\n\n                            for (var errObj of pollCtx.sqlErrorList){\n                                let groupedItem = pollCtx.sqlErrorList_grouped[idxMap[errObj.txt]];\n                                groupedItem.count++;\n                                //merge props of 1st err of that kind //assume rest are equal\n                                Object.entries(errObj).forEach(([key, val])=>{\n                                    groupedItem[key] ?? (groupedItem[key] = val);\n                                })\n                            }\n                            isDbg(\"debug\") && node.warn({ txt:\"sqlErrorList_grouped set to\",idxMap:idxMap, errList:pollCtx.sqlErrorList, grouped:pollCtx.sqlErrorList_grouped, ctx:pollCtx})\n                            srcNode.warn({ txt: \"final fail\", gErr: pollCtx.sqlErrorList_grouped, ctx: pollCtx, full: msg });\n                            dbPoll.setNodeDisplayStatus(srcNode, msg, \"finalFail\");\n                        }\n\n                        //return fail //both on any and final-only channels\n                        return [null, msg, null, pollCtx.isPollComplete ? msg : null];\n                    }\n                }\n            },\n            /** NOT IMPLEMENTED  (only defaults may work.. not tested)(verbose is always disabled)*/\n            \"dbgSettings\":{\n                //\"dbgLevelsMap\":utils.dbgLevels ?? node.error(\"missing dbgLevels collection\",{}) ?? [],\n                \"dbgEnabledNodes\":{\n                    //\"<nodeId>\":{... dbgCfg}\n                },\n                \"default\":{\n                    dbgLevel:\"notImplemented\",\n                    isEnabled: true\n                },\n                \"isDbgSetFor\": function thisFunc(id_or_node, msg, lvl ){\n                    try{\n                        if(thisFunc.length != arguments.length || [...arguments].some(arg => !arg))\n                            throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\" + item)}`);\n                        const pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey] ?? (() => { throw new Error(\"missing pollCtx\") })();\n                        const utils = global.get(\"utils\");\n                        const dbPoll = global.get(thisClassName).polledQuery;\n                        const dbgCfg = dbPoll.dbgSettings;\n                        \n                        typeof (id_or_node) == \"string\" || (id_or_node = id_or_node.id);\n                        let isEnabled = dbgCfg.dbgEnabledNodes[id_or_node]?.isEnabled ?? dbgCfg.default.isEnabled;\n                        return isEnabled && lvl != \"verbose\";\n                    }catch(ex){ return !!node.error({txt:\"[global.db][polledQuery.dbgSettings] isDbgSetFor(): \"+ex?.message,ex:ex,args:arguments}) }\n                },\n                /** abilita i msg di dbg per il nodo con un certo id */\n                \"setDbgFor\": function thisFunc(id, {dbgLevel, isEnabled} = global.get(thisClassName).polledQuery.dbgSettings.default){\n                    try{\n                        if(thisFunc.length != arguments.length || [...arguments].some(arg => !arg))\n                            throw new Error(`${thisFunc.length} non null args required. got ${arguments.length}: ${[...arguments].map(item => \"\" + item)}`);\n                        const pollCtx = msg[global.get(thisClassName).polledQuery?.pollCtxKey] ?? (() => { throw new Error(\"missing pollCtx\") })();\n                        const utils = global.get(\"utils\");\n                        const dbPoll = global.get(thisClassName).polledQuery;\n                        const dbgCfg = dbPoll.dbgSettings;\n\n                        let defCfg = global.get(thisClassName).polledQuery.dbgSettings.default;\n                        //generate and/or merge\n                        dbgCfg.dbgEnabledNodes[id] = utils.mergeRec((dbgCfg.dbgEnabledNodes[id] ?? defCfg), { dbgLevel, isEnabled })\n                        //delete if !enabled anymore\n                        isEnabled ? dbgCfg.dbgEnabledNodes[id] : delete dbgCfg.dbgEnabledNodes[id];\n                        return dbgCfg.dbgEnabledNodes[id];\n                    }catch(ex) { return !!node.error({ txt: \"[global.db][polledQuery.dbgSettings] isDbgSetFor(): \" + ex?.message, ex: ex, args: arguments }) }\n                },\n                /** disabilita i msg di dbg per il nodo con un certo id */\n                \"unsetDbgFor\": function thisFunc(id, {dbgLevel, isEnabled}){\n                    global.get(thisClassName).setDbgFor(id,{isEnabled:false});\n                }\n            }\n            \n        }\n        // \"getPolledQueryMsgBuilder\": function thisFunc(){\n        //     class Builder {\n        //         #resMsg\n        //         #delay = 2*1000;\n        //         #attempts = 5;\n        //         #toutTolerance = this.#attempts * 100;\n        //         #tout = \n\n        //         function fromAttemptsAndDelay(attempts, delay){\n        //             if (fromAttemptsAndDelay.length != arguments.length) throw new SyntaxError(`Expecting ${fromAttemptsAndDelay.length} got ${arguments.length}`);\n        //             if (attempts <= 0 || delay < 0) throw new SyntaxError(`Expecting ${fromAttemptsAndDelay.length} got ${arguments.length}`);\n        //             this.#attempts = attempts;\n        //             this.#delay = delay;\n\n        //         }\n        //     }\n        //     return {\n\n        //     }\n        // }\n    };\n\n    //generate delayed props..\n    postGen.forEach((cb, i) => {\n        try{\n            cb(def);\n        }catch(ex){\n            node.error({ txt:`in postGen[${i}] of [global.${thisClassName}]`, errMsg:ex?.message, exc:ex, postGenStuff:{cb:postGen, info:postGenInfo, errs:postGenGroupedMsgList}});\n        }\n    });\n    print_postGen_errors();\n    \n    // cannot work: does not have access to global[\"db\"]\n    // def.polledQuery.pollCtxProps = (()=>{\n    //     const dbPoll = def.polledQuery;\n    //     var dummyMsg = {};\n    //     var dummyNode = node;\n    //     dbPoll.initPollCtx_core(dummyNode, dummyMsg);\n    //     dbPoll.initPollCtx_cfg(dummyNode, dummyMsg,{\n    //         maxAttempts:0,\n    //         delay:0\n    //     });\n    //     //get all props defined by the initer funcs\n    //     return Object.entries(dummyMsg[dbPoll.pollCtxKey]).map(pair => pair[0]).concat([\n    //         \"query\",\n    //         \"isSuccess\"\n    //     ])        \n    // })()\n\n\n// pollCtx.maxAttempts ??= 10;\n  // pollCtx.delay ??= 2*1000;\n  // pollCtx.tout ??= pollCtx.maxAttempts * pollCtx.delay + (100 * pollCtx.maxAttempts);\n  // pollCtx.toutTime ??= pollCtx.startTime + pollCtx.tout\n    utils.wrapFunctions(def, \"[global.\"+thisClassName+\"]\");\n    global.set(thisClassName, def);\n    node.send(def);\n    node.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n});\n\n\n\n\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n    *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n    * @param {function} cb called once ALL globalName are defined\n    * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n    * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n    * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n    * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n    * @param  {...any} varNames series of strings\n    */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}\n\n\n//####################################################################################################\n\n//https://www.npmjs.com/package/sqlstring?activeTab=readme\nfunction getSqlString(){\n    var SqlString = {};\n\n    var ID_GLOBAL_REGEXP = /`/g;\n    var QUAL_GLOBAL_REGEXP = /\\./g;\n    var CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\n    var CHARS_ESCAPE_MAP = {\n        '\\0': '\\\\0',\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\x1a': '\\\\Z',\n        '\"': '\\\\\"',\n        '\\'': '\\\\\\'',\n        '\\\\': '\\\\\\\\'\n    };\n\n    SqlString.escapeId = function escapeId(val, forbidQualified) {\n        if (Array.isArray(val)) {\n            var sql = '';\n\n            for (var i = 0; i < val.length; i++) {\n                sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n            }\n\n            return sql;\n        } else if (forbidQualified) {\n            return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n        } else {\n            return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n        }\n    };\n\n    SqlString.escape = function escape(val, stringifyObjects, timeZone) {\n        if (val === undefined || val === null) {\n            return 'NULL';\n        }\n\n        switch (typeof val) {\n            case 'boolean': return (val) ? 'true' : 'false';\n            case 'number': return val + '';\n            case 'object':\n                if (Object.prototype.toString.call(val) === '[object Date]') {\n                    return SqlString.dateToString(val, timeZone || 'local');\n                } else if (Array.isArray(val)) {\n                    return SqlString.arrayToList(val, timeZone);\n                } else if (Buffer.isBuffer(val)) {\n                    return SqlString.bufferToString(val);\n                } else if (typeof val.toSqlString === 'function') {\n                    return String(val.toSqlString());\n                } else if (stringifyObjects) {\n                    return escapeString(val.toString());\n                } else {\n                    return SqlString.objectToValues(val, timeZone);\n                }\n            default: return escapeString(val);\n        }\n    };\n\n    SqlString.arrayToList = function arrayToList(array, timeZone) {\n        var sql = '';\n\n        for (var i = 0; i < array.length; i++) {\n            var val = array[i];\n\n            if (Array.isArray(val)) {\n                sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n            } else {\n                sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n            }\n        }\n\n        return sql;\n    };\n\n    SqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n        if (values == null) {\n            return sql;\n        }\n\n        if (!Array.isArray(values)) {\n            values = [values];\n        }\n\n        var chunkIndex = 0;\n        var placeholdersRegex = /\\?+/g;\n        var result = '';\n        var valuesIndex = 0;\n        var match;\n\n        while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n            var len = match[0].length;\n\n            if (len > 2) {\n                continue;\n            }\n\n            var value = len === 2\n                ? SqlString.escapeId(values[valuesIndex])\n                : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n\n            result += sql.slice(chunkIndex, match.index) + value;\n            chunkIndex = placeholdersRegex.lastIndex;\n            valuesIndex++;\n        }\n\n        if (chunkIndex === 0) {\n            // Nothing was replaced\n            return sql;\n        }\n\n        if (chunkIndex < sql.length) {\n            return result + sql.slice(chunkIndex);\n        }\n\n        return result;\n    };\n\n    SqlString.dateToString = function dateToString(date, timeZone = \"local\") {\n        var dt = new Date(date);\n\n        if (isNaN(dt.getTime())) {\n            return 'NULL';\n        }\n\n        var year;\n        var month;\n        var day;\n        var hour;\n        var minute;\n        var second;\n        var millisecond;\n\n        if (timeZone === 'local') {\n            year = dt.getFullYear();\n            month = dt.getMonth() + 1;\n            day = dt.getDate();\n            hour = dt.getHours();\n            minute = dt.getMinutes();\n            second = dt.getSeconds();\n            millisecond = dt.getMilliseconds();\n        } else {\n            var tz = convertTimezone(timeZone);\n\n            if (tz !== false && tz !== 0) {\n                dt.setTime(dt.getTime() + (tz * 60000));\n            }\n\n            year = dt.getUTCFullYear();\n            month = dt.getUTCMonth() + 1;\n            day = dt.getUTCDate();\n            hour = dt.getUTCHours();\n            minute = dt.getUTCMinutes();\n            second = dt.getUTCSeconds();\n            millisecond = dt.getUTCMilliseconds();\n        }\n\n        // YYYY-MM-DD HH:mm:ss.mmm\n        var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +\n            zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +\n            zeroPad(millisecond, 3);\n\n        return escapeString(str);\n    };\n\n    SqlString.bufferToString = function bufferToString(buffer) {\n        return 'X' + escapeString(buffer.toString('hex'));\n    };\n\n    SqlString.objectToValues = function objectToValues(object, timeZone) {\n        var sql = '';\n\n        for (var key in object) {\n            var val = object[key];\n\n            if (typeof val === 'function') {\n                continue;\n            }\n\n            sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n        }\n\n        return sql;\n    };\n\n    SqlString.raw = function raw(sql) {\n        if (typeof sql !== 'string') {\n            throw new TypeError('argument sql must be a string');\n        }\n\n        return {\n            toSqlString: function toSqlString() { return sql; }\n        };\n    };\n\n    function escapeString(val) {\n        var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n        var escapedVal = '';\n        var match;\n\n        while ((match = CHARS_GLOBAL_REGEXP.exec(val))) {\n            escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n            chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n        }\n\n        if (chunkIndex === 0) {\n            // Nothing was escaped\n            return \"'\" + val + \"'\";\n        }\n\n        if (chunkIndex < val.length) {\n            return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n        }\n\n        return \"'\" + escapedVal + \"'\";\n    }\n\n    function zeroPad(number, length) {\n        number = number.toString();\n        while (number.length < length) {\n            number = '0' + number;\n        }\n\n        return number;\n    }\n\n    function convertTimezone(tz) {\n        if (tz === 'Z') {\n            return 0;\n        }\n\n        var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n        if (m) {\n            return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n        }\n        return false;\n    }\n\n    return SqlString;\n}\n\n",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 195,
        "wires": [
            [
                "1e2f855fb053fe66"
            ]
        ]
    },
    {
        "id": "9b8f7a07ca442364",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "290ebf86bbdaeb68",
        "name": "GLOBALI",
        "info": "",
        "x": 215,
        "y": 150,
        "wires": []
    },
    {
        "id": "0d32aaeb5cd7e2f2",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "MYSQL_OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1324,
        "y": 400,
        "wires": []
    },
    {
        "id": "70fef1bc96643b26",
        "type": "catch",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "",
        "scope": [
            "1ab5b51a9a7656bb"
        ],
        "uncaught": false,
        "x": 482,
        "y": 432,
        "wires": [
            [
                "8252ef683323efc8",
                "cb5c1917ab345408"
            ]
        ]
    },
    {
        "id": "8252ef683323efc8",
        "type": "function",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "catchAll DB",
        "func": "\nif (msg.error) {\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    global.get(\"utils\").errorBlink(node, 60000);\n}\nelse {\n    node.error(msg);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 637,
        "y": 432,
        "wires": [
            [
                "d54be42788f5e0ad"
            ]
        ]
    },
    {
        "id": "4214610de81e9454",
        "type": "function",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "checkTypos",
        "func": "\nif(msg.sql === undefined){\n    node.warn({txt:\"[checkTypos]: missing sql parameter\",fullMsg:msg});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 317,
        "y": 519,
        "wires": [
            [
                "b1681e1112ea463d"
            ]
        ]
    },
    {
        "id": "e425438737e4e626",
        "type": "link in",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "DBQuery in",
        "links": [],
        "x": 172,
        "y": 519,
        "wires": [
            [
                "4214610de81e9454"
            ]
        ]
    },
    {
        "id": "f26c59c85a7711b6",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "SELECT * exc",
        "props": [
            {
                "p": "sql",
                "v": "SELECT * FROM italmatic_exchange;",
                "vt": "str"
            },
            {
                "p": "someProp",
                "v": "gatto",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 276,
        "y": 474,
        "wires": [
            [
                "77f9671dcbcb15aa"
            ]
        ]
    },
    {
        "id": "7961e440c9162f79",
        "type": "function",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "reset excTable to def",
        "func": "\nlet db = global.get(\"db\");\n\nnode.send(db.attachQuery(`\n    TRUNCATE oven.italmatic_exchange;\n`));\nreturn db.attachQuery(`\n    INSERT INTO oven.italmatic_exchange\n            (ORDER_ID,  STATUS,     QUANT_TO_DO,    QUANT_PROD)\n    VALUES  ('id_0',       'w',    '10',           '0'),\n            ('id_1',       'c',    '9',            '0'),\n            ('id_2',       't',      '8',            '0');\n`,{},function (msg){\n    return msg;\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335,
        "y": 765,
        "wires": [
            [
                "1d1175d31cf3f808"
            ]
        ]
    },
    {
        "id": "2078a48777b8a78e",
        "type": "function",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "reset prodTable to def",
        "func": "\nlet db = global.get(\"db\");\n\n\nnode.send(db.attachQuery(`\n    TRUNCATE oven.italmatic_production;\n`));\nreturn db.attachQuery(`\n    INSERT INTO oven.italmatic_production\n            (CYCLE_NUMBER, ORDER_ID, BEGIN_TIME, END_TIME, ESITO, QUANT_PROD)\n    VALUES  (0, 'id_0','2000-01-01 00:00:00',  '2000-01-01 00:01:00', true, '1'),\n            (1, 'id_1','2000-01-01 00:01:00',  '2000-01-01 00:02:00', true, '1'),\n            (2, 'id_2','2000-01-01 00:02:00',  '2000-01-01 00:03:00', true, '1'),\n            (3, 'id_3','2000-01-01 00:03:00',  '2000-01-01 00:04:00', true, '1')\n`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335,
        "y": 810,
        "wires": [
            [
                "1d1175d31cf3f808"
            ]
        ]
    },
    {
        "id": "308150fe4ddd49bd",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 765,
        "wires": [
            [
                "7961e440c9162f79"
            ]
        ],
        "l": false
    },
    {
        "id": "8dd292d393357e70",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 810,
        "wires": [
            [
                "2078a48777b8a78e"
            ]
        ],
        "l": false
    },
    {
        "id": "1d1175d31cf3f808",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "grouper",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 475,
        "y": 795,
        "wires": [
            [
                "f44f02576d246f6d"
            ]
        ],
        "l": false
    },
    {
        "id": "ae31a39870ea59f1",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "dbg: inject some rows into db",
        "info": "",
        "x": 280,
        "y": 720,
        "wires": []
    },
    {
        "id": "f44f02576d246f6d",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "DB Query",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 580,
        "y": 780,
        "wires": [
            [
                "82e1195627ed2c7e"
            ]
        ]
    },
    {
        "id": "82e1195627ed2c7e",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "ee530506baeb12a5",
        "name": "mysql_out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 605,
        "y": 810,
        "wires": []
    },
    {
        "id": "77d6ecefeba767fa",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "MYSQL_IN",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "sql",
        "statusType": "msg",
        "x": 317,
        "y": 564,
        "wires": []
    },
    {
        "id": "25d237adfcb28e98",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "LAST RESULT",
        "info": "",
        "x": 1324,
        "y": 430,
        "wires": []
    },
    {
        "id": "54fa19083c9e9adb",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "fieldCount",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "( $vName:=\"fieldCount\"; $val:=$lookup(msg.payload, $vName); $exists($val) ? $val : \"notSet\" )",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1304,
        "y": 460,
        "wires": []
    },
    {
        "id": "1c5ad2bf76a20224",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "affectedRows",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "( $vName:=\"affectedRows\"; $val:=$lookup(msg.payload, $vName); $exists($val) ? $val : \"notSet\" )",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1324,
        "y": 505,
        "wires": []
    },
    {
        "id": "e5c13a1ba06a5e5d",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "grouper",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 1163,
        "y": 544,
        "wires": [
            [
                "0d32aaeb5cd7e2f2",
                "54fa19083c9e9adb",
                "1c5ad2bf76a20224",
                "ea46c32d357f66e0",
                "be1860fd8e6a160d"
            ]
        ],
        "l": false
    },
    {
        "id": "ea46c32d357f66e0",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "insertId",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "( $vName:=\"insertId\"; $val:=$lookup(msg.payload, $vName); $exists($val) ? $val : \"notSet\" )",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1304,
        "y": 550,
        "wires": []
    },
    {
        "id": "be1860fd8e6a160d",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "serverStatus",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "( $vName:=\"serverStatus\"; $val:=$lookup(msg.payload, $vName); $exists($val) ? $val : \"notSet\" )",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1314,
        "y": 595,
        "wires": []
    },
    {
        "id": "cb5c1917ab345408",
        "type": "function",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "fwd errors with onSqlErr",
        "func": "\nif(msg.onSqlErr)\n    return msg.onSqlErr(msg);\nelse\n    node.warn(\"[fwd errors with onSqlErr]: no error forwarding configured\")",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 686,
        "y": 480,
        "wires": [
            [
                "8ee79690a1f9edf5"
            ]
        ]
    },
    {
        "id": "1ab5b51a9a7656bb",
        "type": "mysql-r2",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "CitectPC_oven@nodered_client",
        "host": "",
        "database": "",
        "username": "",
        "password": "",
        "sql": "configurazioni in global.db",
        "port": "3306",
        "pooling": false,
        "waitForConnections": false,
        "connectionLimit": "5",
        "queueTimeout": "7000",
        "x": 654,
        "y": 544,
        "wires": [
            [
                "8a5972c9263117fa"
            ]
        ]
    },
    {
        "id": "2185cdf7bcd4f793",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "grouper",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 1037,
        "y": 544,
        "wires": [
            [
                "5c498eb617b7cd7b",
                "e5c13a1ba06a5e5d"
            ]
        ],
        "l": false
    },
    {
        "id": "44eba7eff9808b08",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "link out 24",
        "mode": "return",
        "links": [],
        "x": 1179,
        "y": 496,
        "wires": []
    },
    {
        "id": "b1681e1112ea463d",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "grouper",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 462,
        "y": 519,
        "wires": [
            [
                "1ab5b51a9a7656bb",
                "77d6ecefeba767fa"
            ]
        ],
        "l": false
    },
    {
        "id": "5c498eb617b7cd7b",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "isCallback",
        "property": "_linkSource",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1074,
        "y": 496,
        "wires": [
            [
                "44eba7eff9808b08"
            ],
            []
        ]
    },
    {
        "id": "c12ed8dd718914c7",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "DB QUERY",
        "info": "le info di connessione vengono da global.db, non dal nodo",
        "x": 232,
        "y": 384,
        "wires": []
    },
    {
        "id": "1e2f855fb053fe66",
        "type": "gate",
        "z": "467287adb311067b",
        "g": "290ebf86bbdaeb68",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 375,
        "y": 195,
        "wires": [
            [
                "95a4f1fe5241a805"
            ]
        ],
        "l": false
    },
    {
        "id": "95a4f1fe5241a805",
        "type": "function",
        "z": "467287adb311067b",
        "g": "290ebf86bbdaeb68",
        "name": "use dev cfg",
        "func": "global.get(\"db\").connCfg = {\n    username:\"nodered_client\",\n    database:\"oven\",\n    host:\"192.168.33.44\",\n    port: 3306,\n    password:\"Luca140583\",\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 195,
        "wires": [
            []
        ]
    },
    {
        "id": "e1dc7f1a029a50c6",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "290ebf86bbdaeb68",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 150,
        "wires": [
            [
                "25e586867aa60c2c"
            ]
        ],
        "l": false
    },
    {
        "id": "383ca0e1b93f7efa",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "698c783e100b6aaf",
        "name": "DRAFT",
        "info": "",
        "x": 1660,
        "y": 135,
        "wires": []
    },
    {
        "id": "a25ecf4289387db8",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "config comes from msg",
        "info": "",
        "x": 627,
        "y": 519,
        "wires": []
    },
    {
        "id": "24a548611bf8feea",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "SELECT max cycle",
        "props": [
            {
                "p": "sql",
                "v": "SELECT   CYCLE_NUMBER as cycleNumber,   BEGIN_TIME as startTime,   END_TIME as endTime FROM   cycle WHERE   CYCLE_NUMBER =(     SELECT       MAX(CYCLE_NUMBER)     FROM       cycle   )",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 264,
        "y": 442,
        "wires": [
            [
                "77f9671dcbcb15aa"
            ]
        ]
    },
    {
        "id": "77f9671dcbcb15aa",
        "type": "function",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "attachQuery",
        "func": "\nreturn global.get(\"db\").attachQuery(msg.sql);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 474,
        "wires": [
            [
                "b1681e1112ea463d"
            ]
        ]
    },
    {
        "id": "43fe3f8bdc815511",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "SELECT error",
        "props": [
            {
                "p": "sql",
                "v": "gosh",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 244,
        "y": 410,
        "wires": [
            [
                "77f9671dcbcb15aa"
            ]
        ]
    },
    {
        "id": "8a5972c9263117fa",
        "type": "function",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "del connCfg",
        "func": "var except;\nreturn global.get(\"db\").detachConnCfg(msg, except=[\"database\",\"host\",\"port\"]);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 874,
        "y": 544,
        "wires": [
            [
                "2185cdf7bcd4f793"
            ]
        ]
    },
    {
        "id": "8ee79690a1f9edf5",
        "type": "function",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "del connCfg",
        "func": "var except;\nreturn global.get(\"db\").detachConnCfg(msg, except=[\"database\",\"host\",\"port\"]);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 902,
        "y": 480,
        "wires": [
            [
                "5c498eb617b7cd7b"
            ]
        ]
    },
    {
        "id": "cf6b343f2f0a8d9a",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "pressa1 allProdExc oncePerCycleEnd in",
        "links": [
            "479532ec132fba80",
            "4f79875f6a420854"
        ],
        "x": 320,
        "y": 2430,
        "wires": [
            [
                "4fb42373e4e99b72"
            ]
        ],
        "l": true
    },
    {
        "id": "50128141cfef2e47",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "pressa1 allProdExc oncePerCycleStart in",
        "links": [
            "d475353a7f70bf2a",
            "aeab01b884227dc9"
        ],
        "x": 320,
        "y": 2318,
        "wires": [
            [
                "0e4b20669b1991d2"
            ]
        ],
        "l": true
    },
    {
        "id": "1f5105270c298506",
        "type": "function",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DB PollGet Template",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n    maxAttempts: 15,\n    delay: 2 * 1000,\n    toutDelay: undefined,   //undefined fields will be generated from other vals\n    toutTolerance: undefined,\n    toutTime: undefined\n});\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\n//custom isSuccess function\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n    const dbPoll = global.get(\"db\").polledQuery;\n    const pollCtx = resMsg[dbPoll.pollCtxKey];\n    const utils = global.get(\"utils\");\n\n    \n    //has result\n    if (resMsg.error || !resMsg.payload?.length)\n        return !(out_errTxt.value = resMsg.error?.message ?? \"empty or null result\");\n    if (resMsg.payload.length >= 2)\n        node.warn({ txt: out_errTxt = \"[WARNING] got more than one row\", node: node, full: resMsg });\n    let dbRow = resMsg.payload[0];\n\n    //perform tests\n    if (!\"some condition\")\n        return !(out_errTxt.value = \"error text (condition not met)\")\n        \n    //default err txt\n    out_errTxt.value = resMsg.error?.message ?? \"\";\n    return true;\n});\n\n//seleziona la riga (una) con max cycNumber (quella appena prodotta)\npollCtx.query = ctxGet(\"query\", `\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    RECIPE_NAME as recipeName,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime,\n    \\`COMMENT\\` as \\`note\\`\n  FROM\n    cycle\n  WHERE\n    CYCLE_NUMBER =(\n      SELECT\n        MAX(CYCLE_NUMBER)\n      FROM\n        cycle\n    )\n`);\n\n//do a one-time only validation of pollCtx init parameters\n  //prevent typos\nif (!ctxGet(\"isValidInit\", dbPoll.validatePollCtxInit(node, msg)))\n    return node.error({ txt: \"failed dbPollCtx init validation. check syntax\", full: msg });\n\nreturn dbPoll.performPollStep(node, msg);",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 960,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "0e4b20669b1991d2",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "QueryDB cycle(last && incomplete) retry:10t / 2s / 20s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , any fail, retry (dbQuery)]\nconst dbPoll = db.polledQuery;\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 10,\n  delay: 2 * 1000,\n  toutDelay: undefined,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n})\n\n\nconst pollCtx = msg[dbPoll.pollCtxKey];\n//last cycle row\npollCtx.query = ctxGet(\"query\", `\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime\n  FROM\n    cycle\n  WHERE\n    CYCLE_NUMBER =(\n      SELECT\n        MAX(CYCLE_NUMBER)\n      FROM\n        cycle\n    )\n`);\n\n\n//row is new <imply> endTime is undef\n//endTime is: nullish || \"\\s*\" || \"null\" || \"undefined\" || <=startTime\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const utils = global.get(\"utils\");\n  //failed or empty query\n  if (resMsg.error) {\n    out_errTxt.value = resMsg.error?.message ?? \"\";\n    return false;\n  }\n  if (utils.isNotSet(resMsg?.payload?.[0])) {\n    node.error({ txt: \"got empty or faily result while polling for last cycle number\", res: resMsg?.payload, full: resMsg });\n    out_errTxt.value = \"empty or null result\";\n    return false;\n  }\n  if (resMsg.payload.length > 1)\n    node.error({ txt: \"got more than one row while polling for last cycle number\", res: resMsg?.payload, full: msg });\n  //verify that it's a new row, testing maxRow.endTime.\n  var maxRow = resMsg.payload[0];\n  switch (typeof (maxRow.endTime)) {\n    case \"object\": { //assume it's null or date\n      //it's a Date()\n      if(utils.isDateObject(maxRow.endTime)){ //it's date and <= start (default date)\n        if(!!Date.parse(maxRow.endtime) && Date.parse(maxRow.endTime) <= Date.parse(maxRow.startTime))\n          return true;\n        else\n          return !(out_errTxt.value = \"endTime type === Date but it's not a nullish date\");\n      }\n      else if(maxRow.endTime !== null)\n        node.error({ txt: \"endTime is of type 'object' but not null. What object?\", endTime: maxRow.endTime, res: resMsg?.payload, t:typeof(maxRow.endTime),isD:utils.isDateObject(maxRow.endTime),full: resMsg })\n      return true;\n    }\n    case \"undefined\": {\n      return true;\n    }\n    case \"string\": {\n      if (maxRow.endTime.match(/^\\s*(?:\\s*|null|undefined)\\s*$/i) || (!!Date.parse(maxRow.endtime) && Date.parse(maxRow.endTime) <= Date.parse(maxRow.startTime)))\n        return true;\n      else {\n        return !(out_errTxt.value = \"endTime type === string but it's not a nullish date or nullish string\");\n      }\n    }\n    default: {\n      return !(out_errTxt.value = \"unexpected type \" + typeof (maxRow.endTime));\n    }\n  }\n});\n\n//dbPoll.validatePollCtxInit(node, msg); //commented since not explicitly defined stuff (except query and isSuccess())\nreturn dbPoll.performPollStep(node, msg);\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 728,
        "y": 2318,
        "wires": [
            [
                "18cacbe1fdf81b66",
                "c9320d6ec6d6dbab"
            ],
            [
                "d9858ba4d7b042ea"
            ],
            [
                "717b63f7415240cd",
                "bd1771c9ba581e3b"
            ],
            []
        ],
        "outputLabels": [
            "success",
            "any fail",
            "dbQuery (retry)",
            "final fail"
        ]
    },
    {
        "id": "717b63f7415240cd",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 873,
        "y": 2363,
        "wires": [
            [
                "0e4b20669b1991d2"
            ]
        ]
    },
    {
        "id": "783c3ba87fe4eef9",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "QueryDB exc(orderId list)  retry: 6t / 2s / 30s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 10,\n  delay: 2 * 1000,\n  toutDelay: undefined,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n})\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\n//CAUTION! running isSuccess() twice will always return true, as it also updates prevNotNullRes\n//overridden for final success and final fail outputs (remember to redact them if you copy this node)\npollCtx.prevNotNullRes ?? (pollCtx.prevNotNullRes = null);\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const dbPoll = global.get(\"db\").polledQuery;\n  const pollCtx = resMsg[dbPoll.pollCtxKey];\n  const utils = global.get(\"utils\");\n\n  //got twice the same result size\n  let didResMatch = pollCtx.prevNotNullRes && Array.isArray(resMsg.payload) && resMsg.payload.length == pollCtx.prevNotNullRes.length;\n  out_errTxt.value = didResMatch ? \"unequal results (\"+resMsg.payload?.length+\" vs \"+pollCtx?.prevNotNullRes?.length+\")\" : out_errTxt.value = resMsg.error?.message ?? \"\";\n  if(didResMatch && resMsg.payload.length == 0 && pollCtx.attempt != pollCtx.maxAttempt){\n    out_errTxt.value = \"got empty result. Waiting for late update before accepting it..\";\n    return false;\n  }\n  //update pollCtx\n  pollCtx.prevNotNullRes = resMsg.payload ?? pollCtx.prevNotNullRes;\n  return !resMsg.error && didResMatch;\n});\n\n\n//dbPoll.validatePollCtxInit(node, msg); //commented since not explicitly defined stuff (except query and isSuccess())\nreturn dbPoll.performPollStep(node, msg);\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1238,
        "y": 2738,
        "wires": [
            [
                "d609fbc501f3ddc4"
            ],
            [
                "439c3801ec3fdf28"
            ],
            [
                "266b770030d9929a"
            ]
        ],
        "outputLabels": [
            "success",
            "dbQuery (retry)",
            "any fail"
        ]
    },
    {
        "id": "266b770030d9929a",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1358,
        "y": 2768,
        "wires": [
            [
                "783c3ba87fe4eef9"
            ]
        ]
    },
    {
        "id": "18cacbe1fdf81b66",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "to multiQueryData.lastCycleNumber",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nmsg.multiQueryData.lastCycleNumber = msg.payload?.[0]?.cycleNumber ?? node.error({txt:\"missing result\",full:msg});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1278,
        "y": 2318,
        "wires": [
            [
                "28c2cd2c514a389d"
            ]
        ]
    },
    {
        "id": "f253fb372041d739",
        "type": "q-gate",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 866,
        "y": 2430,
        "wires": [
            [
                "eb41138075a3f5f1"
            ]
        ]
    },
    {
        "id": "4fb42373e4e99b72",
        "type": "change",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 2430,
        "wires": [
            [
                "f253fb372041d739"
            ]
        ]
    },
    {
        "id": "b357635eb2dd1a5c",
        "type": "inject",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 613,
        "y": 2430,
        "wires": [
            [
                "4fb42373e4e99b72"
            ]
        ],
        "l": false
    },
    {
        "id": "b9418ba4daf6f362",
        "type": "inject",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 613,
        "y": 2462,
        "wires": [
            [
                "1ce8b143c0fb178f"
            ]
        ],
        "l": false
    },
    {
        "id": "1ce8b143c0fb178f",
        "type": "change",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "peek",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "peek",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 2462,
        "wires": [
            [
                "f253fb372041d739"
            ]
        ]
    },
    {
        "id": "30715f75ad5b00a7",
        "type": "change",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "drop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "flush",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 2494,
        "wires": [
            [
                "f253fb372041d739"
            ]
        ]
    },
    {
        "id": "fe3cce29d5ac8ab5",
        "type": "inject",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 613,
        "y": 2494,
        "wires": [
            [
                "30715f75ad5b00a7"
            ]
        ],
        "l": false
    },
    {
        "id": "eb41138075a3f5f1",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "QueryDB cycle(lastCycleNumber) retry:15t / 2s / 30s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 15,\n  delay: 2 * 1000,\n  toutDelay: undefined,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n});\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const dbPoll = global.get(\"db\").polledQuery;\n  const pollCtx = resMsg[dbPoll.pollCtxKey];\n  const utils = global.get(\"utils\");\n  \n  let s7CycleEndTime = pollCtx.startTime - 15*1000;\n  if (!utils.isDateObject(pollCtx.endTime) || isNaN(Date.parse(pollCtx.endTime)))\n    return !(out_errTxt.value = \"cycle endTime is not a Date() or a parsable Date-string\")\n  //not (endTime is date && startTime is date && endTime > startTime)\n  if (!(Date.parse(pollCtx.endTime) > Date.parse(pollCtx.startTime)) && Date.parse(pollCtx.endTime) >= s7CycleEndTime ){ //parse(\"notADate\") <=> NaN  //NaN ><= int <=> false  //NaN ><= NaN <=> false\n    return !(out_errTxt.value = \"cycle endTime has not been updated (it is not a date or is smaller than startTime or is too distant from Date.now()) st:\" + Date.parse(resMsg.startTime) + \" end: \" + Date.parse(resMsg.endTime));\n  }\n  out_errTxt.value = resMsg.error?.message ?? \"\";\n  return !resMsg.error;\n});\n\n//seleziona la riga (una) con max cycNumber (quella appena prodotta)\npollCtx.query = ctxGet(\"query\", `\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    RECIPE_NAME as recipeName,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime,\n    \\`COMMENT\\` as \\`note\\`\n  FROM\n    cycle\n  WHERE\n    CYCLE_NUMBER =(\n      SELECT\n        MAX(CYCLE_NUMBER)\n      FROM\n        cycle\n    )\n`);\n\n//dbPoll.validatePollCtxInit(node, msg); //commented since not explicitly defined stuff (except query and isSuccess())\nreturn dbPoll.performPollStep(node, msg);",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1269,
        "y": 2452,
        "wires": [
            [
                "a36ab7c9d6dd6084"
            ],
            [
                "5be651135f505d47"
            ],
            [
                "57aa74da7c79273b"
            ]
        ],
        "outputLabels": [
            "success",
            "any fail",
            "final fail"
        ]
    },
    {
        "id": "57aa74da7c79273b",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1418,
        "y": 2483,
        "wires": [
            [
                "eb41138075a3f5f1"
            ]
        ]
    },
    {
        "id": "28c2cd2c514a389d",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "to multiQueryData.cycleRowExists_pollRes",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nif (msg.dbPollGet) {\n    var pollResObj = (msg.multiQueryData.cycleRowExists_pollRes = msg.dbPollGet);\n    pollResObj.result = msg.payload;\n    global.get(\"utils\").addAliasTo(pollResObj, \"result\", \"payload\");\n    return msg;\n}\nelse\n    return node.error({ txt: \"missing poll result\", full: msg });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1298,
        "y": 2350,
        "wires": [
            [
                "f253fb372041d739",
                "f48b49fff7fd6a15"
            ]
        ]
    },
    {
        "id": "a36ab7c9d6dd6084",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "to multiQueryData.cycleRow_pollRes",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nif (msg.dbPollGet) {\n    var pollResObj = (msg.multiQueryData.cycleRow_pollRes = msg.dbPollGet);\n    pollResObj.result = msg.payload;\n    global.get(\"utils\").addAliasTo(pollResObj, \"result\", \"payload\");\n    return msg;\n}\nelse\n    return node.error({ txt: \"missing poll result\", full: msg });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1668,
        "y": 2468,
        "wires": [
            [
                "50628505893c1002",
                "a30ce2169c4078a4"
            ]
        ]
    },
    {
        "id": "50628505893c1002",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "QueryDB prod(lastCycleNum)  retry:6t / 2s / 30s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//verify msg holds the values required by the sql query\nlet lastCycleNumber = msg.multiQueryData?.lastCycleNumber;\nif (utils.isNotSet(lastCycleNumber)){\n  node.error({ txt: \"missing last cycle number. Aborted flow\", lastCycNum: lastCycleNumber, full:msg });\n  return null;\n}\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 6,\n  delay: 2 * 1000,\n  toutDelay: 30 * 1000,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n})\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\n// //setup context\n//   //timedStore is a map over cycleNumber of the poll's result, needed to check whether two results match\n//   //it's deleted after toutDelay, when is certain it won't be needed any more by any concurrent poll\n//   //concurrency is not tested (can a context object be safely manipulated by concurrent threads?)\n// var timedStore = ctxGet(\"timedStore\", initTimedStore(lastCycleNumber, Date.now()));\n// timedStore[lastCycleNumber] ??=  {};\n// timedStore[lastCycleNumber].lastUsedTime = Date.now();\n// timedStore[lastCycleNumber].result = null;\n// //clear old timedStore entries\n// for(var [cycNum, store] of Object.entries(timedStore)){\n//   if(Date.now() - store.lastUsedTime > 1.2 * pollCtx.toutDelay){\n//     delete timedStore[cycNum];\n//   }\n// }\n// context.set(\"timedStore\",timedStore);\n\n//CAUTION! running isSuccess() twice will always return true, as it also updates prevNotNullRes\n  //overridden for final success and final fail outputs (remember to redact them if you copy this node)\npollCtx.prevNotNullRes ?? (pollCtx.prevResNotNull = null);\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const dbPoll = global.get(\"db\").polledQuery;\n  const pollCtx = resMsg[dbPoll.pollCtxKey];\n  const utils = global.get(\"utils\");\n  \n  //got twice the same result size\n  let didResMatch = pollCtx.prevNotNullRes && Array.isArray(resMsg.payload) && resMsg.payload.length == pollCtx.prevNotNullRes.length;\n  out_errTxt.value = didResMatch ? \"unequal results (\"+resMsg.payload?.length+\" vs \"+pollCtx?.prevNotNullRes?.length+\")\" : out_errTxt.value = resMsg.error?.message ?? \"\";\n  if(didResMatch && resMsg.payload.length == 0 && pollCtx.attempt != pollCtx.maxAttempt){\n    out_errTxt.value = \"got empty result. Waiting for late update before accepting it..\";\n    return false;\n  }\n  //update pollCtx\n  pollCtx.prevNotNullRes = resMsg.payload ?? pollCtx.prevNotNullRes;\n  return !resMsg.error && didResMatch;\n});\n\n//seleziona le righe (+ di una) relative agli ordini appena prodotti\npollCtx.query = db.sqlString.format(`\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    ORDER_ID as orderId,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime,\n    QUANT_PROD as quantProd,\n    ESITO as esito\n  FROM\n    italmatic_production\n  WHERE\n    CYCLE_NUMBER =  ?\n`, lastCycleNumber);\n\n\n\n//dbPoll.validatePollCtxInit(node, msg); //commented since not explicitly defined stuff (except query and isSuccess())\nreturn dbPoll.performPollStep(node, msg);",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1255,
        "y": 2595,
        "wires": [
            [
                "85a4f8fe1df1e635"
            ],
            [
                "867483dc69ed67b2"
            ],
            [
                "f703574d360ff934"
            ]
        ],
        "outputLabels": [
            "success",
            "dbQuery (retry)",
            "any fail"
        ]
    },
    {
        "id": "f703574d360ff934",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1383,
        "y": 2633,
        "wires": [
            [
                "50628505893c1002"
            ]
        ]
    },
    {
        "id": "85a4f8fe1df1e635",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "to multiQueryData.orderId",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nmsg.multiQueryData.orderId = msg.payload?.[0]?.ORDER_ID ?? node.error({txt:\"missing result\",full:msg});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1618,
        "y": 2603,
        "wires": [
            [
                "c7a6599d3d4e79fd"
            ]
        ]
    },
    {
        "id": "c7a6599d3d4e79fd",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "to multiQueryData.prodRowList_pollRes",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nif (msg.dbPollGet) {\n    var pollResObj = (msg.multiQueryData.prodRowList_pollRes = msg.dbPollGet);\n    pollResObj.result = msg.payload;\n    global.get(\"utils\").addAliasTo(pollResObj, \"result\", \"payload\");\n    return msg;\n}\nelse\n    return node.error({ txt: \"missing poll result\", full: msg });\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1658,
        "y": 2635,
        "wires": [
            [
                "be97d0df7a6b19a8"
            ]
        ]
    },
    {
        "id": "d609fbc501f3ddc4",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "to multiQueryData.excRowList_pollRes",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nif (msg.dbPollGet) {\n    var pollResObj = (msg.multiQueryData.excRowList_pollRes = msg.dbPollGet);\n    pollResObj.result = msg.payload;\n    global.get(\"utils\").addAliasTo(pollResObj, \"result\", \"payload\");\n    return msg;\n}\nelse\n    return node.error({ txt: \"missing poll result\", full: msg });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1604,
        "y": 2753,
        "wires": [
            [
                "9fe6bae37ffab67b",
                "bbe8e4b529b1acb3"
            ]
        ]
    },
    {
        "id": "ce350560b108ca9c",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "completes when endTime > startTime and close to Date.now()",
        "info": "",
        "x": 1253,
        "y": 2423,
        "wires": []
    },
    {
        "id": "4b01fb2cb07dd1ea",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "completes when last cycles's endTime is not set or < startTime",
        "info": "",
        "x": 728,
        "y": 2273,
        "wires": []
    },
    {
        "id": "a93364fc53191afa",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "completes on two equal-sized successes",
        "info": "",
        "x": 1259,
        "y": 2563,
        "wires": []
    },
    {
        "id": "be97d0df7a6b19a8",
        "type": "switch",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "isNotEmpty [ ]",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$count(multiQueryData.prodRowList_pollRes.result) <= 0",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1931,
        "y": 2611,
        "wires": [
            [
                "783c3ba87fe4eef9",
                "c8719ba1108367ee"
            ],
            [
                "0ab174afb48ce030"
            ]
        ]
    },
    {
        "id": "49301850ec6be08d",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "completes on two equal-sized successes",
        "info": "",
        "x": 1232,
        "y": 2706,
        "wires": []
    },
    {
        "id": "0ab174afb48ce030",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "NOTHING PRODUCED",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2189,
        "y": 2627,
        "wires": []
    },
    {
        "id": "a30ce2169c4078a4",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "SELECTED CYCLE ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2009,
        "y": 2452,
        "wires": []
    },
    {
        "id": "f48b49fff7fd6a15",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "PRE SELECTED CYCLE ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1659,
        "y": 2341,
        "wires": []
    },
    {
        "id": "c8719ba1108367ee",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "SELECTED PROD ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2189,
        "y": 2595,
        "wires": []
    },
    {
        "id": "9fe6bae37ffab67b",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "SELECTED EXC ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1944,
        "y": 2738,
        "wires": []
    },
    {
        "id": "985a540f960687be",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "SELECT <many> as <alias> FROM cycle JOINED (1:many) ital_production ON CYCLE_NUMBER JOINED (many:many) ital_exchange ON  ORDER_ID",
        "info": "pollGet nodes recurse messages over themselves, updating a reserved msg property (msg.dbPollGet).\nAfter each node completes its poll cycle the useful results are moved over by trailing function nodes;\n    they are moved into msg.multiQueryData.<uniqueId>_pollRes\n    and have a consistent structure:\n            //dbPollGet common fields\n        const pollCtx = msg.dbPollGet;\n        pollCtx.attempts        ??= 0;\n        pollCtx.startTime        ??= Date.now();\n        pollCtx.sqlErrorList        ??= [];\n            //node-specific cfg\n        pollCtx.maxAttempts ?       ?= 10;\n        pollCtx.delay       ??= 2 * 1000;\n        pollCtx.toutTolerance       = pollCtx.maxAttempts * 150;\n        pollCtx.toutDelay       ??= pollCtx.maxAttempts * pollCtx.delay + pollCtx.toutTolerance;\n        pollCtx.toutTime        ??= pollCtx.startTime + pollCtx.toutDelay\n        pollCtx.isSuccess ??= function => true | false\n",
        "x": 1012,
        "y": 2238,
        "wires": []
    },
    {
        "id": "6b72246dcf1d4463",
        "type": "comment",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "why not a single sql query? (readMe)",
        "info": "there is no \"done\" event\nthe db is therefore polled adopting different strategies to ensure the data has been integrally written",
        "x": 1668,
        "y": 2238,
        "wires": []
    },
    {
        "id": "136aa432f7fbc0a5",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "ifOrderCompleted -> update tables",
        "func": "var plcData=msg.payload;\nconst tabUtils = flow.get(\"tabUtils\");\nconst utils = flow.get(\"utils\");\nconst button = tabUtils.queue.sendToPressButton;\nconst pressNum = msg.press.match(/([0-9]+)$/)[1];\nconst db = global.get(\"db\");\n\nlet queueTable = flow.get(\"queueTable\");\n\nlet prodRowList = msg.multiQueryData.prodRowList_pollRes?.result ?? [];\nlet excRowList = msg.multiQueryData.excRowList_pollRes?.result ?? [];\n\nlet lastCycleNumber = msg.multiQueryData.lastCycleNumber;\nlet orderIdMap = {}; queueTable.forEach(row => orderIdMap[row.id] = row);\nlet queueIdxToDel = [];\n\n\n//sposta in completed\nfor (let dbRow of excRowList){\n    if (dbRow.quantProd >= dbRow.quantToDo && utils.isSet(orderIdMap[dbRow.orderId])){\n        var queueRow = orderIdMap[dbRow.orderId];\n        //crea riga\n        let newRow= tabUtils.completed.newRow();\n        newRow.id = queueRow.id;\n        newRow.cycleNumber = lastCycleNumber;\n        newRow.quantProd = dbRow.quantProd; //excRow.QUANT_PROD;\n        newRow.quantToDo = dbRow.quantToDo; //excRow.QUANT_TO_DO;\n        const getFallbackNote = ()=>{\n            let isNotEmpty = str => !str?.match?.(\"^\\s*$\");\n            let tmp;\n            return isNotEmpty(queueRow) ? queueRow.note :\n                isNotEmpty(dbRow) ? dbRow.note :\n                isNotEmpty(tmp = prodRowList.filter(row => row.orderId == dbRow.orderId)[0]?.note) ? tmp : \"\"\n        }\n        newRow.note = getFallbackNote();\n        //marca come da cancellare localmente\n        queueIdxToDel.push(queueRow.rowId);\n        //invia delete a DB\n        const deleteQueryTemplate = \"DELETE FROM oven.italmatic_exchange WHERE ORDER_ID = ? AND STATUS <> 'w'\";\n        node.send([null, db.attachQuery(db.sqlString.format(deleteQueryTemplate, dbRow.id))]);\n    }\n}\n\n//cancella localmente\nfor (let rowId of queueIdxToDel){\n    tabUtils.deleteRowId(rowId, queueTable);\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 2880,
        "wires": [
            [
                "5eeaa688d6eefa90"
            ],
            [
                "d14cf79a025d6493",
                "f07f3592aff356d4"
            ]
        ],
        "outputLabels": [
            "tableUpdateComplete",
            "to dbQuery"
        ]
    },
    {
        "id": "92022a60d79443bd",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "push to historyTable",
        "func": "//var plcData = msg.payload;\nlet refreshMsg = msg;\nvar historyTable = flow.get(\"historyTable\");\nconst tabUtils = flow.get(\"tabUtils\");\n\nlet row=tabUtils.history.newRow(tabUtils.newRowId(historyTable));\nlet prodRowList = msg.multiQueryData.prodRow;\nlet excRowList = msg.multiQueryData.excRow;\n\n//newRow.id = plcData.prod_id;\nnewRow.id = prodRowList.map(row => row.orderId).sort().join(\", \");\nnewRow.cycleNumber = msg.multiQueryData.lastCycleNumber;\n//newRow.quantProd = plcData.prod_quantProd;\nnewRow.quantProd = 1;\n//newRow.status = plcData.exc_status;\nnewRow.status = excRowList.map(row => { return { \"id\": row.orderId, \"code\": row.status}});\n//newRow.cycleNumber = plcData.prod_cycleNumber;\nnewRow.prodRow.cycleNumber;\nnewRow.press = msg.press;\n//newRow.statusAsString = (plcData.exc_status == \"2\" || plcData.exc_status == 2) ? \"parz.\" : \"compl.\";\nnewRow.statusAsString = excRowList.map(row => row.status).some(code => code == \"2\" || code == 2) ? \"parz.\" : \"compl.\";\n\nhistoryTable.push(row);\n\n\nflow.set(\"historyTable\", historyTable);\nnode.send(refreshMsg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1938,
        "y": 2928,
        "wires": [
            [
                "787b16cc56aacf5d"
            ]
        ]
    },
    {
        "id": "601a36750da62e85",
        "type": "function",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "tables max length",
        "func": "//leftshift history when longer than maxLength\nlet table = flow.get(\"historyTable\");\nlet maxLength = 5000;\nlet newLength = 4200;\nif(table.length >= 5000){\n    let diff = table.length - newLength;\n    for(let i=0; i<newLength; i++)\n        table[i] = table[i+diff];\n    table.length = newLength;\n}\nflow.set(\"historyTable\",table);\n\n//leftshift completed when longer than maxLength\ntable = flow.get(\"completedTable\");\nmaxLength = 5000;\nnewLength = 4200;\nif (table.length >= 5000) {\n    let diff = table.length - newLength;\n    for (let i = 0; i < newLength; i++)\n        table[i] = table[i + diff];\n    table.length = newLength;\n}\nflow.set(\"completedTable\",table);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 2976,
        "wires": [
            []
        ]
    },
    {
        "id": "d14cf79a025d6493",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 2226,
        "y": 2880,
        "wires": [
            [
                "a6a5b2fdccfda163"
            ]
        ]
    },
    {
        "id": "a6a5b2fdccfda163",
        "type": "trigger",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "3s",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2354,
        "y": 2880,
        "wires": [
            [
                "c53439603f4e4208",
                "a976f8361278473b"
            ]
        ]
    },
    {
        "id": "5549f905eb444cb9",
        "type": "switch",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1753,
        "y": 2928,
        "wires": [
            [
                "136aa432f7fbc0a5",
                "92022a60d79443bd",
                "601a36750da62e85"
            ]
        ],
        "l": false
    },
    {
        "id": "f07f3592aff356d4",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "REMOVED EXC ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"event\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 2276,
        "y": 2912,
        "wires": []
    },
    {
        "id": "bbe8e4b529b1acb3",
        "type": "link call",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "update queueTable fromDb",
        "links": [],
        "linkType": "static",
        "timeout": "30",
        "x": 1594,
        "y": 2928,
        "wires": [
            [
                "5549f905eb444cb9"
            ]
        ]
    },
    {
        "id": "5eeaa688d6eefa90",
        "type": "switch",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2193,
        "y": 2848,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "787b16cc56aacf5d",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "refreshHistoryTable_out",
        "mode": "link",
        "links": [
            "0933e76415d3b0d8",
            "a6ed287fa626363b"
        ],
        "x": 2274,
        "y": 2960,
        "wires": [],
        "l": true
    },
    {
        "id": "a976f8361278473b",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "refreshCompletedTable_out",
        "mode": "link",
        "links": [
            "15870b35cd8f1905"
        ],
        "x": 2552,
        "y": 2880,
        "wires": [],
        "l": true
    },
    {
        "id": "c53439603f4e4208",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "9e4171e022a9d561",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 2542,
        "y": 2912,
        "wires": [],
        "l": true
    },
    {
        "id": "4acd9c73f0879c01",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "INSERT sameCycle in prodTable",
        "func": "\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n\nlet lastRow = msg.payload?.[0];\nif(!lastRow)\n    return node.error(\"got empty result from prodTable. cannot INSERT a copy\");\n\nlet toSqlDate = dt => db.sqlString.dateToString(dt, \"local\").slice(1, -5);\nlet startTime = lastRow.startTime;//lastRow.endTime ?? (() => { let tmp = Date.now(); tmp.setHours(tmp.getHours() - 1); return tmp; })()\nlet endTime = lastRow.endTime;\n\nreturn db.attachQuery(\n    db.sqlString.format(`\n            INSERT INTO oven.italmatic_production\n                    (CYCLE_NUMBER, ORDER_ID, BEGIN_TIME, END_TIME, ESITO, QUANT_PROD)\n            VALUES  (?, ?, ?,  ?, true, '1')\n        `,\n        [\n            lastRow.cycleNumber,\n            msg.ordId,\n            toSqlDate(startTime),\n            toSqlDate(endTime)\n        ]\n    )\n);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1515,
        "wires": [
            [
                "06140d8a4d2499a7"
            ]
        ]
    },
    {
        "id": "06140d8a4d2499a7",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1275,
        "y": 1515,
        "wires": [
            [
                "3cb233de10369a68"
            ]
        ]
    },
    {
        "id": "3cb233de10369a68",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "prodTable INSERT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(     /** /$pollCtxKey := \"dbPollGet\";/**/     /**/$pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey; /**/     $pollCtx := $lookup(msg, $pollCtxKey);     $res := msg.payload;     $template := {         \"gErr\":$pollCtx.sqlErrorList_grouped,         \"pollCtx\":$pollCtx,         \"full\":msg          };     /* if/else statement (ternary)         //$merge fails if array members aren't objects */     /* if is array */     $type($res) = \"array\" ? (         /* if empty */         $count($res) = 0 ? (             $template         ) : (         /* else if single rows */             $count($res) = 1 and $type($res[0]) = \"object\" ? (                 $merge([$res, $template])         /* else (many rows) */             ) :  $merge([{\"res\":$res}, $template])         )         /*else (!array) */     ) : $merge([{\"res\":$res}, $template]) )",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1545,
        "wires": []
    },
    {
        "id": "50db3566aed008c1",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ordId: id_1",
        "rules": [
            {
                "t": "set",
                "p": "ordId",
                "pt": "msg",
                "to": "id_1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1470,
        "wires": [
            [
                "14dd2aa3f24d764e"
            ]
        ]
    },
    {
        "id": "b4403a2e7a8fb4d0",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ordId: id_2",
        "rules": [
            {
                "t": "set",
                "p": "ordId",
                "pt": "msg",
                "to": "id_2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1500,
        "wires": [
            [
                "14dd2aa3f24d764e"
            ]
        ]
    },
    {
        "id": "eef7b7f36f9758aa",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ordId: id_3",
        "rules": [
            {
                "t": "set",
                "p": "ordId",
                "pt": "msg",
                "to": "id_3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1530,
        "wires": [
            [
                "14dd2aa3f24d764e"
            ]
        ]
    },
    {
        "id": "7974e6edac1e59de",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 205,
        "y": 1470,
        "wires": [
            [
                "50db3566aed008c1"
            ]
        ],
        "l": false
    },
    {
        "id": "5f778b6711825fcf",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 205,
        "y": 1500,
        "wires": [
            [
                "b4403a2e7a8fb4d0"
            ]
        ],
        "l": false
    },
    {
        "id": "69b85bc413b570fc",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 205,
        "y": 1530,
        "wires": [
            [
                "eef7b7f36f9758aa"
            ]
        ],
        "l": false
    },
    {
        "id": "0691b74c98774d64",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "payload:true",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 245,
        "y": 1620,
        "wires": [
            [
                "0790d927fe9905d2"
            ]
        ]
    },
    {
        "id": "097a07dd9d2f509c",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "payload:false",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 245,
        "y": 1650,
        "wires": [
            [
                "0790d927fe9905d2"
            ]
        ]
    },
    {
        "id": "f50daf0c4e30d4eb",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "SIMULA CICLO #DBG",
        "info": "",
        "x": 260,
        "y": 1215,
        "wires": []
    },
    {
        "id": "0790d927fe9905d2",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 1635,
        "wires": [
            [
                "cc7de937cce7ee42"
            ]
        ],
        "l": false
    },
    {
        "id": "cc7de937cce7ee42",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "dbgLink simulaCiclo in",
        "mode": "link",
        "links": [
            "cad2bd523c7147bc",
            "de28ab8a9c960787"
        ],
        "x": 515,
        "y": 1635,
        "wires": [],
        "l": true
    },
    {
        "id": "650a926a311fecc6",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "db 1xCycUpdate anyFail in",
        "links": [
            "05f2b120519f4dfa",
            "88bd769aefb4a3a3",
            "d9858ba4d7b042ea",
            "5be651135f505d47",
            "867483dc69ed67b2",
            "439c3801ec3fdf28",
            "1c086dfb06b5e0f8",
            "3a62cbbc637d084b"
        ],
        "x": 303,
        "y": 2588,
        "wires": [
            [
                "6487ebca9b3e322b"
            ]
        ],
        "l": true
    },
    {
        "id": "d9858ba4d7b042ea",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "db 1xCycUpdate anyFail out",
        "mode": "link",
        "links": [
            "650a926a311fecc6",
            "51968d61999c8841"
        ],
        "x": 1258,
        "y": 2288,
        "wires": [],
        "l": true
    },
    {
        "id": "6487ebca9b3e322b",
        "type": "switch",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "isPollComplete",
        "property": "$lookup(msg, $globalContext(\"db\").polledQueue.pollCtxKey).isPollComplete",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 518,
        "y": 2588,
        "wires": [
            [
                "7d0897afc8cc84bc"
            ],
            [
                "94074cc6dbfbc819"
            ]
        ]
    },
    {
        "id": "94074cc6dbfbc819",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "FAILED DB POLL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    $pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey;\t    $pollCtx := $lookup(msg,$pollCtxKey);\t    {\t        \"lastErr\": $pollCtx.sqlErrorList[$count($pollCtx.sqlErrorList)-1],\t        \"pollCtx\":pollCtx,\t        \"full\":msg\t    };\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 718,
        "y": 2603,
        "wires": []
    },
    {
        "id": "5be651135f505d47",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "db 1xCycUpdate anyFail out",
        "mode": "link",
        "links": [
            "650a926a311fecc6",
            "51968d61999c8841"
        ],
        "x": 1638,
        "y": 2438,
        "wires": [],
        "l": true
    },
    {
        "id": "867483dc69ed67b2",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "db 1xCycUpdate anyFail out",
        "mode": "link",
        "links": [
            "650a926a311fecc6",
            "51968d61999c8841"
        ],
        "x": 1623,
        "y": 2573,
        "wires": [],
        "l": true
    },
    {
        "id": "439c3801ec3fdf28",
        "type": "link out",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "db 1xCycUpdate anyFail out",
        "mode": "link",
        "links": [
            "650a926a311fecc6",
            "51968d61999c8841"
        ],
        "x": 1573,
        "y": 2723,
        "wires": [],
        "l": true
    },
    {
        "id": "7d0897afc8cc84bc",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "DB POLL CRITICAL FAIL",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "(\t   $pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey;\t   $pollCtx := $lookup(msg,$pollCtxKey);\t   {\t       \"lastErr\": $pollCtx.sqlErrorList[$count($pollCtx.sqlErrorList)-1],\t       \"pollCtx\":pollCtx,\t       \"full\":msg     \t   };\t   )",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "counter",
        "x": 748,
        "y": 2573,
        "wires": []
    },
    {
        "id": "bd1771c9ba581e3b",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "SENT QUERY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 798,
        "y": 2678,
        "wires": []
    },
    {
        "id": "c9320d6ec6d6dbab",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "QUERY SUCCESS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 823,
        "y": 2648,
        "wires": []
    },
    {
        "id": "32d818c186b9f117",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "INSERT in cycle",
        "func": "//send this from workbench, (ONLY in DBG ofc)\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\nlet lastCycNum = msg.payload?.[0]?.CYCLE_NUMBER ?? node.error(\"got empty result. using 0 as cyc num\") ?? 0;\n\nlet toSqlDate = dt => db.sqlString.dateToString(dt, \"local\").slice(1, -5);\nreturn db.attachQuery(db.sqlString.format(`\n    INSERT INTO\n      oven.cycle (\n        CYCLE_NUMBER,\n        RECIPE_NAME,\n        BEGIN_TIME,\n        BEGIN_USER,\n        END_TIME,\n        END_USER,\n        ENERGY,\n        COMMENT\n      )\n    VALUES\n      (\n        ?,\n        'none',\n        ?,\n        'system',\n        ?,\n        'system',\n        0,\n        'noComment'\n      );\n    `,[\n      lastCycNum +1,\n      toSqlDate(Date.now()),\n      toSqlDate(Date.now()),\n    ],\n  ),\n  msg\n);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1205,
        "y": 1320,
        "wires": [
            [
                "5805f596341cb3a2"
            ]
        ]
    },
    {
        "id": "a58a25d9e87488a7",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "pressa1 allProdExc oncePerCycleEnd in",
        "links": [
            "479532ec132fba80",
            "4f79875f6a420854"
        ],
        "x": 353,
        "y": 2678,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "b0e08df19ef6675f",
        "type": "link in",
        "z": "467287adb311067b",
        "d": true,
        "g": "aad49237e214af20",
        "name": "pressa1 allProdExc oncePerCycleEnd in",
        "links": [
            "479532ec132fba80",
            "4f79875f6a420854"
        ],
        "x": 318,
        "y": 2468,
        "wires": [
            [
                "eb41138075a3f5f1"
            ]
        ],
        "l": true
    },
    {
        "id": "5fa11b5d9436d7ad",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "QueryDB cycle(lastCycleNumber) retry:15t / 2s / 30s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 15,\n  delay: 2 * 1000,\n  toutDelay: undefined,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n});\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const dbPoll = global.get(\"db\").polledQuery;\n  const pollCtx = resMsg[dbPoll.pollCtxKey];\n  const utils = global.get(\"utils\");\n  \n  let startTimeTolerance = 30 * 1000;\n  let s7CycleEndTime = pollCtx.startTime - startTimeTolerance;\n  //has result\n  if(resMsg.error || !resMsg.payload?.length)\n    return !(out_errTxt.value = resMsg.error?.message ?? \"empty or null result\");\n  if(resMsg.payload.length >= 2)\n    node.warn({txt:out_errTxt=\"[WARNING] got more than one row\",node:node,full:resMsg});\n  let dbRow = resMsg.payload[0];\n  //is Date\n  if (!utils.isDateObject(dbRow.endTime) || isNaN(Date.parse(dbRow.endTime)))\n    return !(out_errTxt.value = \"cycle endTime is not a Date() or a parsable Date-string\")\n  //NOT (endTime is date && startTime is date && endTime >= startTime && endTime)\n  if (!(Date.parse(dbRow.endTime) >= Date.parse(dbRow.startTime) /**/&& Date.parse(dbRow.endTime) >= s7CycleEndTime /**/)) { //parse(\"notADate\") <=> NaN  //NaN ><= int <=> false  //NaN ><= NaN <=> false\n    return !(out_errTxt.value = \"oven.cycle has not yet been updated \\n(endTime is not a date \\nor is smaller than startTime \\nor is too distant from Date.now()) \\nst:\" + Date.parse(dbRow.startTime) + \" \\nend: \" + Date.parse(dbRow.endTime) + \" \\nlastCycTimeDiff:\" + (s7CycleEndTime - Date.parse(dbRow.endTime))+ \" ms\" );\n  }\n  out_errTxt.value = resMsg.error?.message ?? \"\";\n  return true;\n});\n\n//seleziona la riga (una) con max cycNumber (quella appena prodotta)\npollCtx.query = ctxGet(\"query\", `\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    RECIPE_NAME as recipeName,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime,\n    \\`COMMENT\\` as \\`note\\`\n  FROM\n    cycle\n  WHERE\n    CYCLE_NUMBER =(\n      SELECT\n        MAX(CYCLE_NUMBER)\n      FROM\n        cycle\n    )\n`);\n\n//do a one-time only validation of pollCtx init parameters\n  //prevent typos\nif (!ctxGet(\"isValidInit\", dbPoll.validatePollCtxInit(node, msg)))\n    return node.error({ txt: \"failed dbPollCtx init validation. check syntax\", full: msg });\n\nreturn dbPoll.performPollStep(node, msg);",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1830,
        "wires": [
            [
                "f8d17af00d997cbe"
            ],
            [
                "1c086dfb06b5e0f8"
            ],
            [
                "bb0860c0b6684f6a"
            ]
        ],
        "outputLabels": [
            "success",
            "any fail",
            "final fail"
        ]
    },
    {
        "id": "1c086dfb06b5e0f8",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "db 1xCycUpdate anyFail out",
        "mode": "link",
        "links": [
            "650a926a311fecc6",
            "51968d61999c8841"
        ],
        "x": 1039,
        "y": 1816,
        "wires": [],
        "l": true
    },
    {
        "id": "bb0860c0b6684f6a",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 819,
        "y": 1861,
        "wires": [
            [
                "5fa11b5d9436d7ad"
            ]
        ]
    },
    {
        "id": "f8d17af00d997cbe",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "to multiQueryData.cycleRow_pollRes",
        "func": "const db = global.get(\"db\");\nmsg.multiQueryData ?? (msg.multiQueryData = {});\nif (msg.dbPollGet) {\n    var pollResObj = (msg.multiQueryData.cycleRow_pollRes = msg.dbPollGet);\n    pollResObj.result = msg.payload;\n    global.get(\"utils\").addAliasTo(pollResObj, \"result\", \"payload\");\n    //copy connCfg props\n    pollResObj.connCfg = {}; Object.entries(db.connCfg).forEach(([key, val]) => (pollResObj[key] = msg[key]) ?? delete pollResObj[key])\n    return msg;\n}\nelse\n    return node.error({ txt: \"missing poll result\", full: msg });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1069,
        "y": 1846,
        "wires": [
            [
                "7a6dcca68d8d3b55",
                "9b9d0815ba1aff29"
            ]
        ]
    },
    {
        "id": "7a6dcca68d8d3b55",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "SELECTED CYCLE ROW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    /** /$pollCtxKey := \"dbPollGet\";/**/\t    /**/$pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey; /**/\t    $pollCtx := $lookup(msg, $pollCtxKey);\t    $res := msg.payload;\t    $template := {\t        \"gErr\":$pollCtx.sqlErrorList_grouped,\t        \"pollCtx\":$pollCtx,\t        \"full\":msg     \t    };\t    /* if/else statement (ternary)\t        //$merge fails if array members aren't objects */\t    /* if is array */\t    $type($res) = \"array\" ? (\t        /* if empty */\t        $count($res) = 0 ? (\t            $template\t        ) : (\t        /* else if single rows */\t            $count($res) = 1 and $type($res[0]) = \"object\" ? (\t                $merge([$res, $template])\t        /* else (many rows) */\t            ) :  $merge([{\"res\":$res}, $template])\t        )\t        /*else (!array) */\t    ) : $merge([{\"res\":$res}, $template])\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1404,
        "y": 1846,
        "wires": []
    },
    {
        "id": "9080aef5a76447cb",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "QueryDB prod+exc of (lastCycleNum)  retry:6t / 2s / 30s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//verify msg holds the values required by the sql query\nlet lastCycleNumber = msg.multiQueryData?.lastCycleNumber;\nif (utils.isNotSet(lastCycleNumber)){\n  node.error({ txt: \"missing last cycle number. Aborted flow\", lastCycNum: lastCycleNumber, full:msg });\n  return null;\n}\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 6,\n  delay: 2 * 1000,\n  toutDelay: 30 * 1000,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n})\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\n//CAUTION! running isSuccess() twice will always return true, as it also updates prevNotNullRes\n  //overridden for final success and final fail outputs (remember to redact them if you copy this node)\npollCtx.prevNotNullRes ?? (pollCtx.prevResNotNull = null);\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const dbPoll = global.get(\"db\").polledQuery;\n  const pollCtx = resMsg[dbPoll.pollCtxKey];\n  const utils = global.get(\"utils\");\n  \n  //got twice the same result size\n  let didResMatch = pollCtx.prevNotNullRes && Array.isArray(resMsg.payload) && resMsg.payload.length == pollCtx.prevNotNullRes.length;\n  out_errTxt.value = didResMatch ? \"unequal results (\"+resMsg.payload?.length+\" vs \"+pollCtx?.prevNotNullRes?.length+\")\" : out_errTxt.value = resMsg.error?.message ?? \"\";\n  if(didResMatch && resMsg.payload.length == 0 && pollCtx.attempt != pollCtx.maxAttempt){\n    out_errTxt.value = \"got empty result. Waiting for late update before accepting it..\";\n    return false;\n  }\n  //update pollCtx\n  pollCtx.prevNotNullRes = resMsg.payload ?? pollCtx.prevNotNullRes;\n  return !resMsg.error && didResMatch;\n});\n\n//seleziona le righe (+ di una) relative agli ordini appena prodotti\n  //select\n      //prodColums (with aliases)\n      //excColumns (with aliases)\n  //from\n      //prodTable + excTable WHERE cycNum == last\npollCtx.query = db.sqlString.format(`\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    lastProd.ORDER_ID as orderId,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime,\n    lastProd.QUANT_PROD as prod_quantProd,\n    ESITO as esito,\n    \n    \\`STATUS\\` as \\`status\\`,\n    QUANT_TO_DO as quantToDo,\n    italmatic_exchange.QUANT_PROD as exc_quantProd\n  FROM\n    (\n      SELECT\n        *\n      FROM\n        italmatic_production\n      WHERE\n        CYCLE_NUMBER = ?\n    ) as lastProd\n    LEFT JOIN italmatic_exchange ON lastProd.ORDER_ID = italmatic_exchange.ORDER_ID\n\n`, lastCycleNumber);\n\n\n//do a one-time only validation of pollCtx init parameters\n//prevent typos\nif (!ctxGet(\"isValidInit\", dbPoll.validatePollCtxInit(node, msg)))\n  return node.error({ txt: \"failed dbPollCtx init validation. check syntax\", full: msg });\n  \nreturn dbPoll.performPollStep(node, msg);",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 584,
        "y": 1981,
        "wires": [
            [
                "af5f41dd59499c85"
            ],
            [
                "3a62cbbc637d084b"
            ],
            [
                "2c8f67d7b646b461"
            ]
        ],
        "outputLabels": [
            "success",
            "dbQuery (retry)",
            "any fail"
        ]
    },
    {
        "id": "95ef279f0943b019",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "completes on two equal-sized successes",
        "info": "",
        "x": 594,
        "y": 1951,
        "wires": []
    },
    {
        "id": "2c8f67d7b646b461",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 724,
        "y": 2026,
        "wires": [
            [
                "9080aef5a76447cb"
            ]
        ]
    },
    {
        "id": "3a62cbbc637d084b",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "db 1xCycUpdate anyFail out",
        "mode": "link",
        "links": [
            "650a926a311fecc6",
            "51968d61999c8841"
        ],
        "x": 964,
        "y": 1966,
        "wires": [],
        "l": true
    },
    {
        "id": "af5f41dd59499c85",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "to multiQueryData.orderId",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nmsg.multiQueryData.orderId = msg.payload?.[0]?.orderId ?? node.error({txt:\"missing result\",full:msg});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 959,
        "y": 1996,
        "wires": [
            [
                "9d90626a90bf1770"
            ]
        ]
    },
    {
        "id": "9d90626a90bf1770",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "to multiQueryData.joinedProdExcRowList_pollRes",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nif (msg.dbPollGet) {\n    var pollResObj = (msg.multiQueryData.joinedProdExcRowList_pollRes = msg.dbPollGet);\n    pollResObj.result = msg.payload;\n    global.get(\"utils\").addAliasTo(pollResObj, \"result\", \"payload\");\n    return msg;\n}\nelse\n    return node.error({ txt: \"missing poll result\", full: msg });\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1029,
        "y": 2028,
        "wires": [
            [
                "346d710e4205f31e"
            ]
        ]
    },
    {
        "id": "346d710e4205f31e",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "isNotEmpty [ ]",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$count(multiQueryData.prodRowList_pollRes.result) <= 0",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1304,
        "y": 1996,
        "wires": [
            [
                "c1edb9b4181c7c95",
                "f5dff1ca496ff678"
            ],
            [
                "1910530bfcdc5a1b",
                "4d42bdcfd779108d",
                "f5dff1ca496ff678"
            ]
        ]
    },
    {
        "id": "c1edb9b4181c7c95",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "SELECTED PROD+EXC ROWS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    /** /$pollCtxKey := \"dbPollGet\";/**/\t    /**/$pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey; /**/\t    $pollCtx := $lookup(msg, $pollCtxKey);\t    $res := msg.payload;\t    $template := {\t        \"gErr\":$pollCtx.sqlErrorList_grouped,\t        \"pollCtx\":$pollCtx,\t        \"full\":msg     \t    };\t    /* if/else statement (ternary)\t        //$merge fails if array members aren't objects */\t    /* if is array */\t    $type($res) = \"array\" ? (\t        /* if empty */\t        $count($res) = 0 ? (\t            $template\t        ) : (\t        /* else if single rows */\t            $count($res) = 1 and $type($res[0]) = \"object\" ? (\t                $merge([$res, $template])\t        /* else (many rows) */\t            ) :  $merge([{\"res\":$res}, $template])\t        )\t        /*else (!array) */\t    ) : $merge([{\"res\":$res}, $template])\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1554,
        "y": 1951,
        "wires": []
    },
    {
        "id": "1910530bfcdc5a1b",
        "type": "debug",
        "z": "467287adb311067b",
        "d": true,
        "g": "fdecb8c58742ed8d",
        "name": "NOTHING PRODUCED",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    /** /$pollCtxKey := \"dbPollGet\";/**/\t    /**/$pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey; /**/\t    $pollCtx := $lookup(msg, $pollCtxKey);\t    $res := msg.payload;\t    $template := {\t        \"gErr\":$pollCtx.sqlErrorList_grouped,\t        \"pollCtx\":$pollCtx,\t        \"full\":msg     \t    };\t    /* if/else statement (ternary)\t        //$merge fails if array members aren't objects */\t    /* if is array */\t    $type($res) = \"array\" ? (\t        /* if empty */\t        $count($res) = 0 ? (\t            $template\t        ) : (\t        /* else if single rows */\t            $count($res) = 1 and $type($res[0]) = \"object\" ? (\t                $merge([$res, $template])\t        /* else (many rows) */\t            ) :  $merge([{\"res\":$res}, $template])\t        )\t        /*else (!array) */\t    ) : $merge([{\"res\":$res}, $template])\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1704,
        "y": 2041,
        "wires": []
    },
    {
        "id": "9b9d0815ba1aff29",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "to multiQueryData.lastCycleNumber",
        "func": "msg.multiQueryData ?? (msg.multiQueryData = {});\nmsg.multiQueryData.lastCycleNumber = msg.payload?.[0]?.cycleNumber ?? node.error({txt:\"missing result\",full:msg});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1059,
        "y": 1876,
        "wires": [
            [
                "9080aef5a76447cb"
            ]
        ]
    },
    {
        "id": "0db3615f2a949d4d",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "completes when endTime > startTime and close to Date.now()",
        "info": "",
        "x": 659,
        "y": 1801,
        "wires": []
    },
    {
        "id": "4d42bdcfd779108d",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "warn nothingProd",
        "func": "let cycNum = msg?.multiQueryData?.lastCycleNumber;\nnode.warn({ \n    txt: \"[WARN] no order progressed on cycle \" + cycNum,\n    prodExc: msg.multiQueryData.prodRowList_pollRes.result,\n    idsInTable:flow.get(\"queueTable\")?.map?.(row => row.id ),\n    qData: msg.multiQueryData, \n    full:msg })",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1514,
        "y": 2041,
        "wires": []
    },
    {
        "id": "14dd2aa3f24d764e",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 1500,
        "wires": [
            [
                "9f5d222a3b85d281"
            ]
        ],
        "l": false
    },
    {
        "id": "9bff0c518c4985f6",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "manSwitch",
        "func": "return context.get(\"onMsg\")(msg);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "/**\n * manual switch, controlled by inject nodes with msg.control:\"<cmd>\" and msg.payload:<cmd args>\n * the status displays the active route, meaning the output idx non-control msgs will be fwd to\n * */\ncontext.set(\"onMsg\", function (msg) {\n    const ctxGet = (vName, defVal) => context.get(vName) ?? context.set(vName, defVal) ?? context.get(vName);\n    const setCtx = (vName, val) => context.set(vName, val) ?? context.get(vName);\n    const utils = global.get(\"utils\") ?? node.error({ txt: \"utils not yet def. Delayed msg.. (order won't be guaranteed!)\", t: Date.now(), n: node, msg: msg }) ?? callWhenDef(\"utils\", () => onMsg(msg));\n\n    //optional route names to display (fill up tmp in (tmp=[...]).\n    //Missing ones will use their idx)\n    var tmp;\n    const routeNames = ctxGet(\"routeNames\", (tmp = []).concat(utils.range(tmp.length, node.outputCount)));\n    context.get(\"routeIdx\") ?? context.set(\"routeIdx\", 0);\n    //var currRouteIdx = ctxGet(\"routeIdx\", 0); \n\n    let setRouteIdx = (idx) => {\n        if (idx < 0 || idx >= node.outputCount)\n            node.warn({ txt: `[WARN] set to idx out of range (${msg.payload} in 0-${node.outputCount}). Msgs will go nowhere.`, full: msg, n: node, max: node.outputCount })\n        context.set(\"routeIdx\", idx);\n        node.status({ fill: idx != wrappedIdx(idx) ? \"red\" : idx % 2 == 0 ? \"green\" : \"yellow\", shape: \"dot\", text: `${idx}${/^[0-9]*$/.test(routeNames[idx]) ? \"\" : ` : ${routeNames[idx]}`}` });\n    }\n    //let setToNext = () => setRouteIdx(currRouteIdx + 1 >= node.outputCount ? 0 : currRouteIdx + 1);\n    function wrappedIdx(idx) { return global.get(\"utils\").wrapIntAround(idx, 0, node.outputCount - 1); }\n\n    if (utils.isSet(msg.control)) {\n        switch (msg.control) {\n            case \"toggle\":\n            case \"next\": {\n                setRouteIdx(wrappedIdx(context.get(\"routeIdx\") + 1));\n                return;\n                //return setRouteIdx(currRouteIdx + 1 >= node.outputCount ? 0 : currRouteIdx + 1)\n            }\n            case \"setSafe\": { msg.payload = wrappedIdx(msg.payload); }\n            case \"set\": {\n                // if(msg.payload >= node.outputCount)\n                //     node.warn({txt:`[WARN] set to idx out of range (${msg.payload} in 0-${node.outputCount}). Msgs will go nowhere.`,full:msg, n:node, max:node.outputCount})\n                // return context.set(\"routeIdx\", msg.payload);\n                setRouteIdx(msg.payload);\n                return;\n            }\n            default: {\n                node.error({ txt: `unknown control value (${msg.control}). msg forwarded on curr channel` })\n                sendOnRouteIdx(context.get(\"routeIdx\"));\n                return;\n            }\n        }\n    } else {\n        sendOnRouteIdx(context.get(\"routeIdx\"));\n        return;\n    }\n\n    function sendOnRouteIdx(idx) {\n        let ret = new Array(node.outputCount).fill(null);\n        ret[idx] = msg;\n        node.send(ret);\n    }\n});\nconst onMsg = context.get(\"onMsg\");\n//set to default value, and display its node status\ncallWhenDef(\"utils\", () => {\n    onMsg({ control: \"next\" });\n    onMsg({ control: \"set\", payload: context.get(\"routeIdx\") - 1 >= 0 ? context.get(\"routeIdx\") - 1 : node.outputCount - 1 });\n})\n//onMsg({ control: \"set\", payload: utils.wrapIntAround(context.get(\"routeIdx\")-1, 0, node.outputCount)});\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 815,
        "y": 1500,
        "wires": [
            [
                "09ac4f74f0f13e29"
            ],
            [
                "4acd9c73f0879c01"
            ]
        ]
    },
    {
        "id": "b9da37c944852df8",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 715,
        "y": 1470,
        "wires": [
            [
                "e82c2d30593592ab"
            ]
        ],
        "l": false
    },
    {
        "id": "09ac4f74f0f13e29",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "INSERT newCycle in prodTable",
        "func": "\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n\nlet lastRow = msg.payload?.[0] ?? node.warn(\"got empty result from prodTable. Using 0 as cycNum\")\n    ?? [{ cycleNumber: 0 }];\n\nlet toSqlDate = dt => db.sqlString.dateToString(dt, \"local\").slice(1, -5);\nlet startTime = lastRow.endTime ?? (() => { let tmp = Date.now(); tmp.setHours(tmp.getHours()-1); return tmp; })()\nlet endTime = Date.now();\n\nreturn db.attachQuery(\n    db.sqlString.format(`\n        INSERT INTO\n            oven.italmatic_production (\n                CYCLE_NUMBER,\n                ORDER_ID,\n                BEGIN_TIME,\n                END_TIME,\n                ESITO,\n                QUANT_PROD\n            )\n        VALUES\n            (?, ?, ?, ?, true, '1')\n        `,\n        [\n            lastRow.cycleNumber + 1,\n            msg.ordId,\n            toSqlDate(startTime),\n            toSqlDate(endTime)\n        ]\n    )\n);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1485,
        "wires": [
            [
                "06140d8a4d2499a7"
            ]
        ]
    },
    {
        "id": "48d36f1939668445",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "set:1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 795,
        "y": 1545,
        "wires": [
            [
                "9bff0c518c4985f6"
            ]
        ]
    },
    {
        "id": "69f09cbf5d042517",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 1545,
        "wires": [
            [
                "48d36f1939668445"
            ]
        ],
        "l": false
    },
    {
        "id": "31c955cdf3825d25",
        "type": "trigger",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "5000",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 710,
        "y": 1290,
        "wires": [
            [
                "2a1c40448116ee56"
            ]
        ]
    },
    {
        "id": "34bcc63c28f5fc05",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1290,
        "wires": [
            [
                "dd00bdb14272d3f4"
            ]
        ],
        "l": false
    },
    {
        "id": "dd00bdb14272d3f4",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "set:1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1290,
        "wires": [
            [
                "31c955cdf3825d25",
                "46e4d5dc11327b5e"
            ]
        ]
    },
    {
        "id": "2a1c40448116ee56",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "set:0",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 855,
        "y": 1290,
        "wires": [
            [
                "46e4d5dc11327b5e"
            ]
        ]
    },
    {
        "id": "358b050e5078acd4",
        "type": "trigger",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "5000",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 710,
        "y": 1365,
        "wires": [
            [
                "6c56f15f043c0473"
            ]
        ]
    },
    {
        "id": "a971e4f93ad39ca7",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "set:1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1365,
        "wires": [
            [
                "358b050e5078acd4",
                "06478a7e9de8fde4"
            ]
        ]
    },
    {
        "id": "6c56f15f043c0473",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "set:0",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 855,
        "y": 1365,
        "wires": [
            [
                "06478a7e9de8fde4"
            ]
        ]
    },
    {
        "id": "d11b147b7597ffc0",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1365,
        "wires": [
            [
                "a971e4f93ad39ca7"
            ]
        ],
        "l": false
    },
    {
        "id": "5805f596341cb3a2",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1370,
        "y": 1320,
        "wires": [
            [
                "668ba0727e5c7e50"
            ]
        ]
    },
    {
        "id": "668ba0727e5c7e50",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "cycleTable INSERT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(     /** /$pollCtxKey := \"dbPollGet\";/**/     /**/$pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey; /**/     $pollCtx := $lookup(msg, $pollCtxKey);     $res := msg.payload;     $template := {         \"gErr\":$pollCtx.sqlErrorList_grouped,         \"pollCtx\":$pollCtx,         \"full\":msg          };     /* if/else statement (ternary)         //$merge fails if array members aren't objects */     /* if is array */     $type($res) = \"array\" ? (         /* if empty */         $count($res) = 0 ? (             $template         ) : (         /* else if single rows */             $count($res) = 1 and $type($res[0]) = \"object\" ? (                 $merge([$res, $template])         /* else (many rows) */             ) :  $merge([{\"res\":$res}, $template])         )         /*else (!array) */     ) : $merge([{\"res\":$res}, $template]) )",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1335,
        "y": 1350,
        "wires": []
    },
    {
        "id": "bab4bbbe0f4d2916",
        "type": "inject",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "CAUTION! THIS TABLE IS SHARED",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 335,
        "y": 1320,
        "wires": [
            [
                "46e4d5dc11327b5e"
            ]
        ]
    },
    {
        "id": "08680ee51511554d",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "add dummy row to oven.cycle",
        "info": "",
        "x": 285,
        "y": 1290,
        "wires": []
    },
    {
        "id": "832d00f09a14ebe3",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "temporary unlock  using both \"set:1\"",
        "info": "",
        "x": 305,
        "y": 1350,
        "wires": []
    },
    {
        "id": "46e4d5dc11327b5e",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "manSwitch",
        "func": "return context.get(\"onMsg\")(msg);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "/**\n * manual switch, controlled by inject nodes with msg.control:\"<cmd>\" and msg.payload:<cmd args>\n * the status displays the active route, meaning the output idx non-control msgs will be fwd to\n * */\ncontext.set(\"onMsg\", function (msg){\n    const ctxGet = (vName, defVal) => context.get(vName) ?? context.set(vName, defVal) ?? context.get(vName);\n    const setCtx = (vName, val) => context.set(vName, val) ?? context.get(vName);\n    const utils = global.get(\"utils\") ?? node.error({ txt: \"utils not yet def. Delayed msg.. (order won't be guaranteed!)\", t: Date.now(), n: node, msg: msg }) ?? callWhenDef(\"utils\", () => onMsg(msg));\n    \n    //optional route names to display (fill up tmp in (tmp=[...]).\n        //Missing ones will use their idx)\n    var tmp;\n    const routeNames = ctxGet(\"routeNames\", (tmp = []).concat(utils.range(tmp.length, node.outputCount)));\n    context.get(\"routeIdx\") ?? context.set(\"routeIdx\", 0);\n    //var currRouteIdx = ctxGet(\"routeIdx\", 0); \n    \n    let setRouteIdx = (idx) => {\n        if (idx < 0 || idx >= node.outputCount)\n            node.warn({ txt: `[WARN] set to idx out of range (${msg.payload} in 0-${node.outputCount}). Msgs will go nowhere.`, full: msg, n: node, max: node.outputCount })\n        context.set(\"routeIdx\", idx);\n        node.status({ fill: idx != wrappedIdx(idx) ? \"red\" : idx % 2 == 0 ? \"green\" : \"yellow\", shape: \"dot\", text: `${idx}${/^[0-9]*$/.test(routeNames[idx]) ? \"\" : ` : ${routeNames[idx]}`}` });\n    }\n    //let setToNext = () => setRouteIdx(currRouteIdx + 1 >= node.outputCount ? 0 : currRouteIdx + 1);\n    function wrappedIdx(idx) { return global.get(\"utils\").wrapIntAround(idx, 0, node.outputCount-1); } \n\n    if (utils.isSet(msg.control)) {\n        switch (msg.control) {\n            case \"toggle\":\n            case \"next\": {\n                setRouteIdx(wrappedIdx(context.get(\"routeIdx\")+1));\n                return;\n                //return setRouteIdx(currRouteIdx + 1 >= node.outputCount ? 0 : currRouteIdx + 1)\n            }\n            case \"setSafe\": { msg.payload = wrappedIdx(msg.payload); }\n            case \"set\":{\n                // if(msg.payload >= node.outputCount)\n                //     node.warn({txt:`[WARN] set to idx out of range (${msg.payload} in 0-${node.outputCount}). Msgs will go nowhere.`,full:msg, n:node, max:node.outputCount})\n                // return context.set(\"routeIdx\", msg.payload);\n                setRouteIdx(msg.payload);\n                return;\n            }\n            default: {\n                node.error({ txt: `unknown control value (${msg.control}). msg forwarded on curr channel` })\n                sendOnRouteIdx(context.get(\"routeIdx\"));\n                return;\n            }\n        }\n    } else {\n        sendOnRouteIdx(context.get(\"routeIdx\"));\n        return;\n    }\n\n    function sendOnRouteIdx(idx) {\n        let ret = new Array(node.outputCount).fill(null);\n        ret[idx] = msg;\n        node.send(ret);\n    }\n});\nconst onMsg = context.get(\"onMsg\");\n//set to default value, and display its node status\ncallWhenDef(\"utils\", ()=>{\n    onMsg({ control: \"next\" });\n    onMsg({ control: \"set\", payload: context.get(\"routeIdx\") - 1 >= 0 ? context.get(\"routeIdx\") - 1 : node.outputCount - 1 });\n})\n//onMsg({ control: \"set\", payload: utils.wrapIntAround(context.get(\"routeIdx\")-1, 0, node.outputCount)});\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 585,
        "y": 1320,
        "wires": [
            [],
            [
                "06478a7e9de8fde4"
            ]
        ]
    },
    {
        "id": "06478a7e9de8fde4",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "manSwitch",
        "func": "return context.get(\"onMsg\")(msg);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "/**\n * manual switch, controlled by inject nodes with msg.control:\"<cmd>\" and msg.payload:<cmd args>\n * the status displays the active route, meaning the output idx non-control msgs will be fwd to\n * */\ncontext.set(\"onMsg\", function (msg){\n    const ctxGet = (vName, defVal) => context.get(vName) ?? context.set(vName, defVal) ?? context.get(vName);\n    const setCtx = (vName, val) => context.set(vName, val) ?? context.get(vName);\n    const utils = global.get(\"utils\") ?? node.error({ txt: \"utils not yet def. Delayed msg.. (order won't be guaranteed!)\", t: Date.now(), n: node, msg: msg }) ?? callWhenDef(\"utils\", () => onMsg(msg));\n    \n    //optional route names to display (fill up tmp in (tmp=[...]).\n        //Missing ones will use their idx)\n    var tmp;\n    const routeNames = ctxGet(\"routeNames\", (tmp = []).concat(utils.range(tmp.length, node.outputCount)));\n    context.get(\"routeIdx\") ?? context.set(\"routeIdx\", 0);\n    //var currRouteIdx = ctxGet(\"routeIdx\", 0); \n    \n    let setRouteIdx = (idx) => {\n        if (idx < 0 || idx >= node.outputCount)\n            node.warn({ txt: `[WARN] set to idx out of range (${msg.payload} in 0-${node.outputCount}). Msgs will go nowhere.`, full: msg, n: node, max: node.outputCount })\n        context.set(\"routeIdx\", idx);\n        node.status({ fill: idx != wrappedIdx(idx) ? \"red\" : idx % 2 == 0 ? \"green\" : \"yellow\", shape: \"dot\", text: `${idx}${/^[0-9]*$/.test(routeNames[idx]) ? \"\" : ` : ${routeNames[idx]}`}` });\n    }\n    //let setToNext = () => setRouteIdx(currRouteIdx + 1 >= node.outputCount ? 0 : currRouteIdx + 1);\n    function wrappedIdx(idx) { return global.get(\"utils\").wrapIntAround(idx, 0, node.outputCount-1); } \n\n    if (utils.isSet(msg.control)) {\n        switch (msg.control) {\n            case \"toggle\":\n            case \"next\": {\n                setRouteIdx(wrappedIdx(context.get(\"routeIdx\")+1));\n                return;\n                //return setRouteIdx(currRouteIdx + 1 >= node.outputCount ? 0 : currRouteIdx + 1)\n            }\n            case \"setSafe\": { msg.payload = wrappedIdx(msg.payload); }\n            case \"set\":{\n                // if(msg.payload >= node.outputCount)\n                //     node.warn({txt:`[WARN] set to idx out of range (${msg.payload} in 0-${node.outputCount}). Msgs will go nowhere.`,full:msg, n:node, max:node.outputCount})\n                // return context.set(\"routeIdx\", msg.payload);\n                setRouteIdx(msg.payload);\n                return;\n            }\n            default: {\n                node.error({ txt: `unknown control value (${msg.control}). msg forwarded on curr channel` })\n                sendOnRouteIdx(context.get(\"routeIdx\"));\n                return;\n            }\n        }\n    } else {\n        sendOnRouteIdx(context.get(\"routeIdx\"));\n        return;\n    }\n\n    function sendOnRouteIdx(idx) {\n        let ret = new Array(node.outputCount).fill(null);\n        ret[idx] = msg;\n        node.send(ret);\n    }\n});\nconst onMsg = context.get(\"onMsg\");\n//set to default value, and display its node status\ncallWhenDef(\"utils\", ()=>{\n    onMsg({ control: \"next\" });\n    onMsg({ control: \"set\", payload: context.get(\"routeIdx\") - 1 >= 0 ? context.get(\"routeIdx\") - 1 : node.outputCount - 1 });\n})\n//onMsg({ control: \"set\", payload: utils.wrapIntAround(context.get(\"routeIdx\")-1, 0, node.outputCount)});\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 765,
        "y": 1320,
        "wires": [
            [],
            [
                "a12a92f26169293f"
            ]
        ]
    },
    {
        "id": "9f5d222a3b85d281",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "GET last prod row",
        "func": "\nlet db = global.get(\"db\");\n\nlet dtNow = new Date();\nvar dtBef = new Date();\ndtBef.setHours( dtBef.getHours()-1);\n\nreturn db.attachQuery(\n    db.sqlString.format(`\n            SELECT\n                CYCLE_NUMBER as cycleNumber,\n                ORDER_ID as orderId,\n                BEGIN_TIME as startTime,\n                END_TIME as endTime,\n                QUANT_PROD as quantProd,\n                ESITO as esito\n            FROM\n                italmatic_production\n            WHERE\n                CYCLE_NUMBER =(\n                    SELECT\n                        MAX(CYCLE_NUMBER)\n                    FROM\n                        italmatic_production\n                    LIMIT 1\n                )\n        `,\n        [\n            msg.ordId,\n            db.sqlString.dateToString(dtNow,\"local\").slice(1,-5),\n            db.sqlString.dateToString(dtBef,\"local\").slice(1,-5)\n        ]\n    ),\n    msg\n);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 565,
        "y": 1485,
        "wires": [
            [
                "e77073d8e6d91811"
            ]
        ]
    },
    {
        "id": "e77073d8e6d91811",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 615,
        "y": 1515,
        "wires": [
            [
                "9bff0c518c4985f6",
                "48d36f1939668445"
            ]
        ]
    },
    {
        "id": "e82c2d30593592ab",
        "type": "change",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "set:0",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 785,
        "y": 1470,
        "wires": [
            [
                "9bff0c518c4985f6"
            ]
        ]
    },
    {
        "id": "a12a92f26169293f",
        "type": "function",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "GET last cycle row",
        "func": "\nlet db = global.get(\"db\");\n\nlet dtNow = new Date();\nvar dtBef = new Date();\ndtBef.setHours( dtBef.getHours()-1);\n\nreturn db.attachQuery(\n    db.sqlString.format(`\n            SELECT\n                *\n            FROM\n                cycle\n            WHERE\n                CYCLE_NUMBER =(\n                    SELECT\n                        MAX(CYCLE_NUMBER)\n                    FROM\n                        cycle\n                    LIMIT 1\n                )\n        `\n    ),\n    msg\n);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1320,
        "wires": [
            [
                "db707c303280e161"
            ]
        ]
    },
    {
        "id": "db707c303280e161",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 1010,
        "y": 1350,
        "wires": [
            [
                "32d818c186b9f117"
            ]
        ]
    },
    {
        "id": "185754c865ee0e5a",
        "type": "link in",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "dbQuery : last produced ord list",
        "links": [],
        "x": 289,
        "y": 1831,
        "wires": [
            [
                "5fa11b5d9436d7ad"
            ]
        ],
        "l": true
    },
    {
        "id": "f5dff1ca496ff678",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "isCallback",
        "property": "_linkSource",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1494,
        "y": 1996,
        "wires": [
            [
                "e4c66d229abddd27"
            ],
            [
                "f6eeca01a55a202f"
            ]
        ]
    },
    {
        "id": "e4c66d229abddd27",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "link out 25",
        "mode": "return",
        "links": [],
        "x": 1604,
        "y": 1981,
        "wires": []
    },
    {
        "id": "f6eeca01a55a202f",
        "type": "function",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "warn not implemented",
        "func": "node.warn({txt:\"[WARN] no flow listening to non-callbacks\", dt:new Date(), full:msg});\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1689,
        "y": 2011,
        "wires": []
    },
    {
        "id": "9ef3cf24dbfff175",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "dopo la prima aggiunta passa da solo a \"agg. su stesso cycNum\"",
        "info": "",
        "x": 905,
        "y": 1410,
        "wires": []
    },
    {
        "id": "2d382d60f4f2a299",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "agg. ordine prodotto",
        "info": "",
        "x": 280,
        "y": 1440,
        "wires": []
    },
    {
        "id": "323019d8daa8a8d2",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "su nuovo NumCyc",
        "info": "",
        "x": 755,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c05ec4dc2727a82a",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "su stesso NumCyc",
        "info": "",
        "x": 765,
        "y": 1575,
        "wires": []
    },
    {
        "id": "0e5aaf62340ff84e",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "69aa6256f2c9bd04",
        "name": "simula inizio/fine s7",
        "info": "",
        "x": 265,
        "y": 1590,
        "wires": []
    },
    {
        "id": "e06cf1177698ef46",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "aad49237e214af20",
        "name": "versione a piu passi. Non va",
        "info": "",
        "x": 300,
        "y": 2235,
        "wires": []
    },
    {
        "id": "eb3143bc7bdf3103",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "DB POLL CRITICAL FAIL",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "(\t   $pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey;\t   $pollCtx := $lookup(msg,$pollCtxKey);\t   {\t       \"lastErr\": $pollCtx.sqlErrorList[$count($pollCtx.sqlErrorList)-1],\t       \"gErr\":$pollCtx.sqlErrorList_grouped,\t       \"pollCtx\":$pollCtx,\t       \"full\":msg     \t   };\t   )",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "counter",
        "x": 910,
        "y": 2085,
        "wires": []
    },
    {
        "id": "e4977103a672d13a",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "FAILED DB POLL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    $pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey;\t    $pollCtx := $lookup(msg,$pollCtxKey);\t    {\t        \"lastErr\": $pollCtx.sqlErrorList[$count($pollCtx.sqlErrorList)-1],\t        \"gErr\":$pollCtx.sqlErrorList_grouped,\t        \"pollCtx\":$pollCtx,\t        \"full\":msg\t    };\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 2115,
        "wires": []
    },
    {
        "id": "e3be76a15147658e",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "isPollComplete",
        "property": "$lookup(msg, $globalContext(\"db\").polledQueue.pollCtxKey).isPollComplete",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 2100,
        "wires": [
            [
                "eb3143bc7bdf3103"
            ],
            [
                "e4977103a672d13a"
            ]
        ]
    },
    {
        "id": "51968d61999c8841",
        "type": "link in",
        "z": "467287adb311067b",
        "g": "fdecb8c58742ed8d",
        "name": "db 1xCycUpdate anyFail in",
        "links": [
            "05f2b120519f4dfa",
            "88bd769aefb4a3a3",
            "d9858ba4d7b042ea",
            "5be651135f505d47",
            "867483dc69ed67b2",
            "439c3801ec3fdf28",
            "1c086dfb06b5e0f8",
            "3a62cbbc637d084b"
        ],
        "x": 465,
        "y": 2100,
        "wires": [
            [
                "e3be76a15147658e"
            ]
        ],
        "l": true
    },
    {
        "id": "27782c61a4ea4768",
        "type": "function",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "QueryDB cycle(lastCycleNumber) retry:15t / 2s / 30s",
        "func": "const ctxGet = (vName, defVal) => { let tmp; (tmp = context.get(vName)) ?? context.set(vName, defVal); return tmp ?? context.get(vName) }\nconst db = global.get(\"db\");\nconst utils = global.get(\"utils\");\n//routes: [ success , retry (dbQuery) , any fail ]\nconst dbPoll = db.polledQuery;\n\n//setup pollCtx\ndbPoll.initPollCtx_core(node, msg);\ndbPoll.initPollCtx_cfg(node, msg, {\n  maxAttempts: 15,\n  delay: 2 * 1000,\n  toutDelay: undefined,   //undefined fields will be generated from other vals\n  toutTolerance: undefined,\n  toutTime: undefined\n});\nconst pollCtx = msg[dbPoll.pollCtxKey];\n\npollCtx.isSuccess ?? (pollCtx.isSuccess = function (node, resMsg, out_errTxt) {\n  const dbPoll = global.get(\"db\").polledQuery;\n  const pollCtx = resMsg[dbPoll.pollCtxKey];\n  const utils = global.get(\"utils\");\n  \n  let s7CycleEndTime = pollCtx.startTime - 15 * 1000;\n  //has result\n  if(resMsg.error || !resMsg.payload?.length)\n    return !(out_errTxt.value = resMsg.error?.message ?? \"empty or null result\");\n  if(resMsg.payload.length >= 2)\n    node.warn({txt:out_errTxt=\"[WARNING] got more than one row\",node:node,full:resMsg});\n  let dbRow = resMsg.payload[0];\n  //is Date\n  if (!utils.isDateObject(dbRow.endTime) || isNaN(Date.parse(dbRow.endTime)))\n    return !(out_errTxt.value = \"cycle endTime is not a Date() or a parsable Date-string\")\n  //NOT (endTime is date && startTime is date && endTime >= startTime && endTime)\n  if (!(Date.parse(dbRow.endTime) >= Date.parse(dbRow.startTime) /**/&& Date.parse(dbRow.endTime) >= s7CycleEndTime /**/)) { //parse(\"notADate\") <=> NaN  //NaN ><= int <=> false  //NaN ><= NaN <=> false\n    return !(out_errTxt.value = \"oven.cycle has not yet been updated (endTime is not a date or is smaller than startTime or is too distant from Date.now()) st:\" + Date.parse(dbRow.startTime) + \" end: \" + Date.parse(dbRow.endTime));\n  }\n  out_errTxt.value = resMsg.error?.message ?? \"\";\n  return true;\n});\n\n//seleziona la riga (una) con max cycNumber (quella appena prodotta)\npollCtx.query = ctxGet(\"query\", `\n  SELECT\n    CYCLE_NUMBER as cycleNumber,\n    RECIPE_NAME as recipeName,\n    BEGIN_TIME as startTime,\n    END_TIME as endTime,\n    \\`COMMENT\\` as \\`note\\`\n  FROM\n    cycle\n  WHERE\n    CYCLE_NUMBER =(\n      SELECT\n        MAX(CYCLE_NUMBER)\n      FROM\n        cycle\n    )\n`);\n\n//prevent typos\nif(!ctxGet(\"isValidInit\", dbPoll.validatePollCtxInit(node, msg)))\n  return node.error({txt:\"failed dbPollCtx init validation. check syntax\", full:msg});\n\nreturn dbPoll.performPollStep(node, msg);",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 455,
        "y": 1020,
        "wires": [
            [
                "77964d0808add840"
            ],
            [
                "d12c49aea07f941f"
            ],
            [
                "0817582443744dd8"
            ]
        ],
        "outputLabels": [
            "success",
            "any fail",
            "final fail"
        ]
    },
    {
        "id": "0817582443744dd8",
        "type": "link call",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "ToDB",
        "links": [
            "e425438737e4e626"
        ],
        "linkType": "static",
        "timeout": "99999",
        "x": 605,
        "y": 1065,
        "wires": [
            [
                "27782c61a4ea4768"
            ]
        ]
    },
    {
        "id": "77964d0808add840",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "success",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 1005,
        "wires": [
            [
                "ce1368deea4563f9"
            ]
        ]
    },
    {
        "id": "d12c49aea07f941f",
        "type": "switch",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "isFinalFail",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "dbPollGet.maxAttempts >= $count(dbPollGet.sqlErrorList)",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 800,
        "y": 1037,
        "wires": [
            [
                "ac9a8008eb04b9ae",
                "0e0f2c7869fe450e"
            ],
            [
                "f76e1a82444464ae",
                "3e8d1273ee53e910"
            ]
        ]
    },
    {
        "id": "ce1368deea4563f9",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet cycleNumber success out",
        "mode": "link",
        "links": [],
        "x": 925,
        "y": 990,
        "wires": []
    },
    {
        "id": "265716f9bf9ed593",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet SUCCESS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    /** /$pollCtxKey := \"dbPollGet\";/**/\t    /**/$pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey; /**/\t    $pollCtx := $lookup(msg, $pollCtxKey);\t    $res := msg.payload;\t    $template := {\t        \"gErr\":$pollCtx.sqlErrorList_grouped,\t        \"pollCtx\":$pollCtx,\t        \"full\":msg     \t    };\t    /* if/else statement (ternary)\t        //$merge fails if array members aren't objects */\t    /* if is array */\t    $type($res) = \"array\" ? (\t        /* if empty */\t        $count($res) = 0 ? (\t            $template\t        ) : (\t        /* else if single rows */\t            $count($res) = 1 and $type($res[0]) = \"object\" ? (\t                $merge([$res, $template])\t        /* else (many rows) */\t            ) :  $merge([{\"res\":$res}, $template])\t        )\t        /*else (!array) */\t    ) : $merge([{\"res\":$res}, $template])\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 990,
        "wires": []
    },
    {
        "id": "ac9a8008eb04b9ae",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet cycleNumber midFail out",
        "mode": "link",
        "links": [],
        "x": 925,
        "y": 1022,
        "wires": []
    },
    {
        "id": "f76e1a82444464ae",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet cycleNumber finalFail out",
        "mode": "link",
        "links": [],
        "x": 925,
        "y": 1050,
        "wires": []
    },
    {
        "id": "9a87d6c1f0362405",
        "type": "link in",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet cycleNumber in",
        "links": [],
        "x": 175,
        "y": 1020,
        "wires": [
            [
                "27782c61a4ea4768"
            ]
        ]
    },
    {
        "id": "0e0f2c7869fe450e",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet  CRITICAL FAIL",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "(\t   $pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey;\t   $pollCtx := $lookup(msg,$pollCtxKey);\t   {\t       \"lastErr\": $pollCtx.sqlErrorList[$count($pollCtx.sqlErrorList)-1],\t       \"gErr\":$pollCtx.sqlErrorList_grouped,\t       \"pollCtx\":$pollCtx,\t       \"full\":msg     \t   };\t   )",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "counter",
        "x": 1060,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3e8d1273ee53e910",
        "type": "debug",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "DBPollGet  MID FAIL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "(\t    $pollCtxKey := $globalContext(\"db\").polledQuery.pollCtxKey;\t    $pollCtx := $lookup(msg,$pollCtxKey);\t    {\t        \"lastErr\": $pollCtx.sqlErrorList[$count($pollCtx.sqlErrorList)-1],\t        \"gErr\":$pollCtx.sqlErrorList_grouped,\t        \"pollCtx\":$pollCtx,\t        \"full\":msg\t    };\t)",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1050,
        "wires": []
    },
    {
        "id": "a7c99c03b1fd75e8",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "TEMPLATE per nodi DB POLL",
        "info": "eseguono piu tentativi di eseguire una query,\nfintanto che una funzione custom isSuccess() definita al  loro interno non ritorna true",
        "x": 290,
        "y": 945,
        "wires": []
    },
    {
        "id": "9a3069d6cf029032",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "4b01377d3d4d53a4",
        "name": "completes when <is success condition>",
        "info": "",
        "x": 445,
        "y": 990,
        "wires": []
    },
    {
        "id": "d54be42788f5e0ad",
        "type": "link out",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "log uncaught out",
        "mode": "link",
        "links": [
            "f07a5882094bb355",
            "f06c3b8f566b9d90"
        ],
        "x": 822,
        "y": 432,
        "wires": [],
        "l": true
    },
    {
        "id": "25e586867aa60c2c",
        "type": "function",
        "z": "467287adb311067b",
        "g": "290ebf86bbdaeb68",
        "name": "send global.db",
        "func": "let thisClassName = \"db\";\nreturn global.get(thisClassName) ?? node.error(`global.${thisClassName} not yet def`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 150,
        "wires": [
            [
                "95a4f1fe5241a805"
            ]
        ]
    },
    {
        "id": "30e6d608b9a93494",
        "type": "comment",
        "z": "467287adb311067b",
        "g": "be2329cc51c75d4d",
        "name": "SQL BKP: GRANT PRIVILEGES (per NF119_v1.2.0)",
        "info": "/*\nquery per assegnare i privilegi sulle tabelle utilizzate.\nNON FUNZIONA su dev, perchè il db non è su localhost (ma su una vm CITECT separata).\n     Sostituisci localhost con % o assegna manualmente i massimi privilegi.\n*/\n\n/* parti da 0 */\nREVOKE ALL PRIVILEGES, GRANT OPTION\n  FROM 'nodered_client';\n\n/* assegna ampi privilegi a _production, ovvero la tabella su cui\n     gli ordini vengono inseriti/aggiornati da CITECT.\n     usati(prod):SELECT\n     usati(prod+dev):.., INSERT */\nGRANT\n\tDELETE, \n    INSERT, \n    SELECT, \n    SHOW VIEW, \n    UPDATE\nON oven.`italmatic_production`\nto 'nodered_client'@`localhost`;\n\n/* assegna ampi privilegi a _production, ovvero la tabella su cui\n     gli ordini vengono aggiornati da CITECT ed inseriti/cancellati da NodeRed.\n     usati(prod):SELECT, INSERT, DELETE\n     usati(prod+dev):.. */\nGRANT\n\tDELETE, \n    INSERT, \n    SELECT, \n    SHOW VIEW, \n    UPDATE\nON oven.`italmatic_exchange`\nto 'nodered_client'@`localhost`;\n\n/* assegna minimi privilegi a cycle, ovvero la tabella su cui\n     CITECT inserisce ogni ciclo.\n     usati(prod):SELECT,\n     usati(prod+dev):.., INSERT */\nGRANT\n    SELECT, \n    SHOW VIEW\nON oven.`cycle`\nto 'nodered_client'@`localhost`;\n\n",
        "x": 355,
        "y": 615,
        "wires": []
    },
    {
        "id": "42b8d6d1.fc68e8",
        "type": "ui_template",
        "z": "6f31d3b30c01f78f",
        "group": "de425a720011e6e9",
        "name": "Logo / Clock",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<script id=\"clockScript1\" type=\"text/javascript\">\n    var clockInterval;\n    $(function () {\n        if (clockInterval) return;\n\n        \n        var logoContainer = document.createElement(\"div\");\n        logoContainer.style.margin = \"5px auto\";\n        //logoContainer.style.marginBottom = \"0px\";\n        \n        var imgCont = document.createElement(\"span\");\n        imgCont.style.position = \"relative\";\n        imgCont.style.top = \"0px\";\n        logoContainer.append(imgCont);\n       \n        logoItal = new Image();\n        logoItal.src = \"/loghi/italmatic/logoItalmatic.png\";\n        logoItal.height = 33;\n        logoContainer.children[0].append(logoItal);\n\n\n\n        var imgCont2 = document.createElement(\"span\");\n        imgCont2.style.marginLeft=\"30px\";\n        imgCont2.style.position = \"relative\";\n        imgCont2.style.top = \"5px\";\n        logoContainer.append(imgCont2);\n\n        logoGiga = new Image();\n        logoGiga.src = \"/loghi/giga/logoGiga.png\";\n        logoGiga.height = 45;\n        logoContainer.children[1].append(logoGiga);\n\n\n        //add clock\n        var div2 = $('<div/>');\n        var p = $('<p/>');\n\n        div2.append(p);\n        div2[0].style.margin = '5px';\n\n        function displayTime() {\n            p.text(new Date().toLocaleString());\n        }\n        \n        clockInterval = setInterval(displayTime, 1000);\n\n        //add to toolbar when it's available\n        var addToToolbarTimer;\n        \n        function addToToolbar() {\n            var toolbar = $('.md-toolbar-tools');\n            \n            if(!toolbar.length) return;\n            \n            toolbar.append(logoContainer);\n            toolbar.append(div2);\n            clearInterval(addToToolbarTimer);\n        }\n        addToToolbarTimer = setInterval(addToToolbar, 100);\n    });\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 220,
        "y": 90,
        "wires": [
            []
        ]
    },
    {
        "id": "8e39d745e4965e86",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "catchAll",
        "scope": null,
        "uncaught": true,
        "x": 430,
        "y": 150,
        "wires": [
            [
                "aae2e97773e8f88e"
            ]
        ]
    },
    {
        "id": "328da80124dc4cee",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "set global utils",
        "func": "//look into start tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet def = {\n    \"errorBlink\": function (node, last = 1500, text = \"\") {\n        node.status({ fill: \"red\", text: text });\n        setTimeout(() => {\n            node.status({ fill: \"\", text: text });\n        }, 250);\n        setTimeout(() => {\n            node.status({ fill: \"yellow\", text: text });\n        }, 350);\n        setTimeout(() => {\n            node.status({ fill: \"\", text: text });\n        }, last)\n    },\n\n    \"##litEndian2int\": function (a, b){\n        return a<<16 | b;\n    }, //msg.payload[0] << 16) | msg.payload[1]\n    \n    \"isObject\"(v) {\n        return (typeof (v) == \"object\" && !Array.isArray(v) && v !== null)\n    },\n    /**\n     * converts a binary array to a single number\n     */\n    \"bitArrayToInt\"(arr) {\n        var res = 0;\n        for (let i = 0,minLen=Math.min(arr.length, 8*8); i < minLen; i++) {\n            if (arr[i])\n                res += Math.pow(2, i);\n        }\n        return res;\n    },\n\n    /** @summary capitalize the first character of a given string\n        * @param {string} word \n        * @return {string} new processed string\n        */\n    \"firstCharUp\"(word){\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    },\n\n    /**\n    * @summary recursively merge two Objects\n        * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n        * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n        * - -res.a===main.a\n        * - -res.c===sec.c\n        * - -res.b!==sec.b2\n        * @param {Object} main \n        * @param {Object} sec \n        */\n    \"mergeRec\":function thisFun(main, sec){\n        for(let p in sec) {\n            //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n            //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n            //main[p] = sec[p];\n            if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                thisFun(main[p], sec[p]);\n            else\n                main[p] = sec[p];\n        }\n        return main;\n    }.bind(this),\n\n    /** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */ \n    \"callWhenDef\": function callWhenDef(cb, opts, ...varNames){\n        //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n        if(typeof(cb)==\"string\") // @ts-ignore //ignore type mismatch\n            var [cb, opts={}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n        //check for opts presence\n        if(typeof(opts) == \"string\")\n            varNames.push(opts);\n        let { timeout=3000, retryDelay=100, errorCb=null, ctx=\"global\" } = (typeof(opts)==\"string\" ? {} : (opts??{}) );\n        var tout, intv, tmp;\n        //switch context to the one specified in ctx\n        var store = ctx===\"global\" ? global : ctx===\"flow\" ? flow : ctx===\"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n        //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n        //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n        let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n        //try immediately, before doing any work\n        if(varNames.every(name => store.get(name) !== undefined))\n            return wrappedCb()\n        //set timeout unless false or not specified\n        if(timeout) {\n            tout = setTimeout(() => {\n                clearInterval(intv);\n                errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n            }, timeout);\n        }\n        //set store-checking interval\n        intv = setInterval(() => {\n            if( !varNames.every(name => store.get(name) !== undefined))\n                return\n            clearTimeout(tout);\n            clearInterval(intv);\n            wrappedCb();\n        }, retryDelay)\n    },\n    /** pseudo random string generator\n     */\n    \"randomHexString4\":function(){\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); //1.X * 2^16 toString(radix) clipFirst //== 4 characters hex\n    },\n    /** returns an iterator-maker that uses the keys in orderedKeys to access its parent's properties\n         * @param {string[]} orderedKeys\n         * @returns {function} f() -> iterator object.\n         */\n    \"makeKeyIterator\":function (orderedKeys) {\n        return function () {\n            //console.log(\"2# this\",this); this === parent object\n            let keys = orderedKeys, idx = 0;\n            return {\n                next:()=>{\n                    //console.log(this, idx, orderedKeys);\n                    return (idx < keys.length ? { value: this[keys[idx++]], done: false } : { done: true });\n                }\n            }\n        }\n    },\n    /** attach a general iterator going through all the enumerable obj's key.\n        * -Not very memory-performant as a redundant key[] array is stored\n        * @param {object} the object to which attach the iterator\n        * @returns {function} the attached iterator\n        */\n    \"generateIteratorFor\": function (obj) {\n        obj[Symbol.iterator] = this.makeKeyIterator(Object.keys(obj));\n        return obj[Symbol.iterator];\n    },\n    \"errorLog\"(...param){ return this.logError(...param);},\n    \"logError\": function thisFun(nodeRef, err){\n        if(arguments.length != thisFun.length) throw new SyntaxError(`expected ${thisFun.length} arguments, got ${arguments.length}`);\n        var error = (typeof (err) == \"string\" ? {err:err} : err);\n        nodeRef.error(error);\n    },\n\n    /** the first time the property is accessed the value is calculated calling valueGetter() in obj, and the result is stored in propName_cache.\n        * - Subsequent calls will return propName_cache's value.\n        */\n    \"defineCachedProp\": function defineCachedProp(obj, propName, valueGetter){\n        if (arguments.length != 3) throw new SyntaxError(\"defineCachedGetter() arguments mismatch\");\n        const propName_cache = propName + \"_cache\";\n\n        Object.defineProperty(obj, propName_cache, {value:undefined, writable:true, configurable:true}); //not enumerable\n        Object.defineProperty(obj, propName, {  \n            get() {\n                return this[propName_cache] ?? (this[propName_cache] = valueGetter.call(this,this))\n            },\n            set(v) { this[propName_cache] = v },\n            enumerable: true,\n            configurable: true\n        },)\n    },\n    \"removeIdx\": (arr, i) => (i == arr.length - 1) ? arr.pop() : arr[i] = arr.pop(),\n    \"removeAllOccurrences\": function (arr, val){\n        for(let i=0; i<arr.length; i++)\n            if(arr[i] == val)\n                (i == arr.length - 1) ? arr.pop() : arr[i] = arr.pop();\n    },\n\n    \"clone\":function (obj){\n        return JSON.parse(global.get(\"utils\").safeStringify(obj));\n    },\n    \n    \"safeStringify\": function safeStringify(obj,indent){\n        var cache = [];\n        var cacheKeys = [];\n        return JSON.stringify(obj, (key, value) => {\n            if (typeof value === 'object' && value !== null) { //arrays and null are also \"objects\" //functions are too, but typeof returns \"function\" instead\n                //Duplicate reference found -> discard key / store\n                const idx = cache.indexOf(value)\n                //if duplicate found\n                //return twin's key instead\n                if(idx != -1) //-1 means not present\n                return \"dupOf_\"+(cacheKeys[idx].toString() ?? \"root\");\n                //else store it\n                else{\n                cache.push(value);\n                cacheKeys.push(key);\n                }\n            }\n            return value;\n        }, indent);\n    },\n    /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n         * @param {any} value accepts anything\n         * @returns {boolean}\n         *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n         */\n    \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n        return  !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n                // it has a prototype that's also truthy\n                !!(value = Object.getPrototypeOf(value)) &&\n                // which has `null` as parent prototype\n                !Object.getPrototypeOf(value);\n    },\n    /** recursively looks up a target object enumerable childrens for properties that would need to be restored after a JSON conversion.\n         * @returns a mask of the original Object containing only the (restored) properties to restore.\n         */\n    \"toRestoreOf\":function toRestoreOf(origin){\n        //let isPlainObj = global.get(\"utils\").isPlainObj;\n        let needsRecursion = (prop, target) => this.isPlainObj(target?.[prop]) //target is an object and target.prop is an object too\n        let needsRestoration = (prop, target) => {\n            return typeof(target[prop])===\"function\"// && !node.warn(\"restored \"+prop+\":\"+typeof(target[prop]))\n        }\n        let empty=true; //optimize performance, avoiding recursive Object.keys calls\n        var toRes = {};\n        if(this.isPlainObj(origin))\n            Object.keys(origin).forEach(key => { //#TODO extend to non-enumerables\n                if(origin.toRestore)\n                    toRes[key] = origin.toRestore(origin[key])\n                else if(needsRecursion(key, origin)){\n                    let tmp=toRestoreOf.call(this, origin[key]);\n                    if(tmp !== null)\n                        toRes[key]=tmp;\n                    // if(Object.keys(toRes[key]).length==0)\n                    //     delete toRes[key];\n                }\n                else if(needsRestoration(key, origin)){ //if is function\n                    toRes[key] = origin[key]\n                }else{\n                    //skip\n                }\n                if(toRes[key])\n                    empty=false;\n                //toRes[key] && node.warn(key+\" set\")\n            })\n            //return Object.keys(target).filter( key => needsRestoration(key, target))\n        \n        return empty ? null : toRes;\n    },\n    /** pseudo alias of Object.assign\n        * only ADDS props and keeps the original refs for plain objects.\n        * ex.               {a:4, b:{a1:5, b1:6}},              //target\n        *                        {b:{      b1:\"v\", c1:7}, c:8}  //source\n        *   assign     ->   {a:4, b:{      b1:\"v\", c1:7}, c:8}  //b is a reference to source.b //a1 was lost\n        *   recAssign  ->   {a:4, b:{a1:5, b1:\"v\", c1:7}, c:8}  \n        */\n    \"recAssign\": function recAssign( target, source){\n        for(let k in source)\n            target[k] = (this.isPlainObj(source[k]) ? recAssign.call(this, target[k]??{}, source[k]) : source[k])\n        return target;\n    },\n    /** \n        * \n        */\n    \"inflate\":function (target, source){\n        let mask = this.toRestoreOf(source) ?? {};\n        return this.recAssign(target, mask);\n    },\n    \n    // \"genericInflater\":function inflated(target, origin=this){ //assume target is a mask of origin, meaning origin has AT LEAST all props of target.\n    //     let utils=global.get(\"utils\");\n    //     let hasOwnInflater = targ => targ?.inflated\n    //     let restore = (prop, target, origin) => {\n    //         var tmp;\n    //         if(!(tmp=Object.getOwnPropertyDescriptor(origin, prop).enumerable))\n    //             Object.defineProperty(target,prop,tmp)\n    //         else if(typeof origin[prop]==\"function\")\n    //             target[prop] = origin[prop]\n    //         return target[prop];\n    //     }\n    //     //CHOOSE AN APPROACH: init all missing target vals\n    //     //target can be anything, origin is an object\n    //     //parse origin for all keys that need to be restored on a version of themselves that went throug a JSON.stringify(JSON.parse())\n    //         //set those keys using either an inflater defined by the key or a generic one. Feed the original value to the inflater, or undefined.\n    //     //returns an inflated version of target\n\n    //     let allKeysOf = obj => Object.keys(obj);\n    //     if(utils.isPlainObj(origin))\n    //         for(let k of allKeysOf(origin))\n    //             inflatedTarget[k] = inflated(target?.[k], origin[k])\n\n\n    //     //if is inflatable\n    //     var inflatedTarget={};\n    //     if(utils.isPlainObj(origin)){\n    //         //inflate all keys //#TODO include non-enumerables\n    //         for(let k of origin)\n    //             //use own inflation method //responsible for that key and all its children\n    //             if(hasOwnInflater(origin[k]))\n    //                 inflatedTarget[k] = origin[k].inflated(target?.[k]);\n    //             //recurse\n    //             else if(utils.isPlainObj(origin[k]))\n    //                 inflatedTarget[k] = inflated(target?.[k], origin[k])\n    //             //generic restoration //mutates target[k] if necessary, then returns it\n    //             else\n    //                 inflatedTarget[k] = target?.[k]!==undefined ? restore(k, target, origin)\n    //     }\n    //     else\n    //         return inflatedTarget;\n    // },\n    // /** recursively traverse object children calling the inflate/inflater method on all of them\n    //      * the method is supposed to restore all the properties that would not survive a JSON.parse(JSON.stringify()).\n    //      * restoring a class from its json, or restoring non enumerable properties and functions, for example.\n    //      * NOTE: a parent that implements \"inflate\" or \"inflater\" is responsible for all its children restoration, and \n    //      *       should therefore call the genericInflater() on all properties it chooses to not explicitly handle\n    //      */\n    // \"inflate\"(target){ return global.get(\"utils\").genericInflater.call(this, target) },\n    // \"ggenericInflater\":function inflate(target){\n    //     //looks for and calls inflate() methods for all keys\n    //         //recursing over objects\n    //     for(let k in target){\n    //         //if has inflate method\n    //         if(this && typeof(this[k])==\"object\" && this[k].inflate)\n    //             target[k] = this[k].inflate(target[k]);\n    //         else    //else recurse over object props\n    //             if(typeof(target[k])==\"object\" && this && typeof(this[k])==\"object\")\n    //                 inflate.call(this[k], target[k])\n    //     }\n    //     return target;\n    // },\n\n    \n    /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n     *      skip non-function, assign wrapped to their original key\n     *  @param root {Object} the object to parse for functions\n     *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n    \"wrapFunctions\":function wrapFunctions(root, prefix){\n        prefix ?? node.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n        const isPlainObj = this.isPlainObj;\n        //recursively parse root\n            //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n        let desc;\n        for(let k in root){\n            if(isPlainObj(root[k]))\n                root[k] = wrapFunctions.call(this,root[k],prefix+`.${k}`);\n            else if(//is a simple function, or an arrow function\n                    //value of root[k] has type function\n                    typeof(root[k])==\"function\"\n                    //root[k] itself is a function, not the result of it's getter call\n                    && (desc=Object.getOwnPropertyDescriptor(root,k)).value !== undefined    // @ts-ignore\n                    && !desc.get\n                ){\n                //wrap in an exception catching function\n                    //trace errors back to their source, independently of the caller\n                let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                root[k] = function (...args){\n                    try{\n                        return cb.call(this, ...args)\n                    }catch(e){\n                        e.nrStack = (e.nrStack ?? []);\n                        e.nrStack.push({summ:`at ${k}(${args.join(\", \")}) of ${prefix}`, fName:k, args:args, root:prefix, err:e.message, e:e});\n                        e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                        //node.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                        throw e;\n                    }\n                }\n            }\n        }\n        return root;\n    }\n};\n\ndef.wrapFunctions(def,\"[utils]\");\nglobal.set(\"utils\", def);\nnode.send(def);\nnode.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n\nfunction safeStringify(obj) {\n    var cache = [];\n    var cacheKeys = [];\n    return JSON.stringify(obj, (key, value) => {\n        if (typeof value === 'object' && value !== null) { //arrays and null are also \"objects\" //functions are too, but typeof returns \"function\" instead\n            //Duplicate reference found -> discard key / store\n            const idx = cache.indexOf(value)\n            //if duplicate found\n            //return twin's key instead\n            if (idx != -1) //-1 means not present\n                return \"dupOf_\" + (cacheKeys[idx].toString() ?? \"root\");\n            //else store it\n            else {\n                cache.push(value);\n                cacheKeys.push(key);\n            }\n        }\n        return value;\n    });\n}\n",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 225,
        "wires": [
            [
                "cec906aeaff48aaa",
                "9bd5cc5f726fdba6"
            ]
        ]
    },
    {
        "id": "aae2e97773e8f88e",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "catchAll",
        "func": "if(msg.error){\n    node.error({\"err\":msg.error.message,\"src\":msg.error.source.id,\"n\":msg.error.source.name,\"nrStack\":msg._error?.nrStack,\"full\":msg});\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 150,
        "wires": [
            []
        ]
    },
    {
        "id": "7514f9f4a7abf65f",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "GLOBALI",
        "info": "",
        "x": 285,
        "y": 150,
        "wires": []
    },
    {
        "id": "cec906aeaff48aaa",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "set global List & utils.list",
        "func": "let utils = msg;\nvar isObject = utils.isObject;\nclass List {\n    head;\n    //#lastPrev;\n    //get last(){ return (this.#lastPrev ? this.#lastPrev.next : this.head) }\n    last;\n\n    constructor() {\n        this.head = null;\n        this.last = this.head;\n    }\n\n    static isListNode(val){\n        return (isObject(val) && Object.hasOwnProperty(\"next\"))\n    }\n    static isTwoWayListNode(val){\n        return (List.isListNode(val) && Object.hasOwnProperty(\"prev\"));\n    }\n\n    peekFirst() {\n        return (this.head ? this.head.value : null);\n    }\n\n    popFirst() {\n        let res = this.peekFirst();\n        //remove\n        if (this.head && this.head.next)\n            this.head = this.head.next;\n        return res;\n    }\n\n    peekLast() {\n        return (this.last ? this.last.value : null);\n    }\n\n    popLast() {\n        if (!this.head)\n            return null;\n\n        let res = this.peekLast();\n\n        let n = this.head,\n            n2last = null; //'next-to-last' <=> 'penultimate'\n        while (n.next) {\n            n2last = n;\n            n = n.next;\n        }\n        n2last.next = null;\n        this.last = n2last;\n\n        return res;\n    }\n\n    /** creates a one-way list node with value=val */\n    static newNode(val) {\n        return { value: val, next: null }\n    }\n    /** creates a two-way list node with value=val and empty prev */\n    static newTwoWayNode(val) {\n        return { value: val, prev: null, next: null }\n    }\n    /** creates a two-way list node with value=val and empty prev */\n    static _append(el, listHead){\n        if (listHead) {\n            let node = listHead;\n            while (node.next) {\n                node = node.next;\n            }\n            node.next = (List.isListNode(el) ? el : List.newNode(el))\n            return node.next;\n        }\n        else {\n            return (List.isListNode(el) ? el : List.newNode(el));\n        }\n    }\n    append(el) { List._append(el, this.head) }\n\n    static _appendTwoWay(el, listHead) {\n        if (List.isTwoWayListNode(el))\n            List._append(el, listHead)\n        else\n            List._append(List.newTwoWayNode(el), listHead);\n    }\n\n\n    static _prepend(el, listHead){\n        let newHead  = (List.isListNode(el) ? el : List.newNode(el))\n        newHead.next = listHead;\n        return newHead;\n    }\n    prepend(el) {\n        this.head = List._prepend(el, this.head)\n    }\n\n    static _prependTwoWay(el,listHead){\n        let newHead = List._prepend(el, listHead);\n        if(listHead)\n            listHead.prev = newHead;\n        return newHead;\n    }\n\n    static iterator(listHead) {\n        return {\n            last: listHead,\n            next() {\n                if (this.last === null)\n                    return { done: true }\n                else {\n                    let ret = { value: this.last.value, done: false }\n                    this.last = this.last.next;\n                }\n            },\n            return(){} //optional, do cleanup routine (close db connection and such)\n        }\n    }\n\n    *[Symbol.iterator](){\n        return List.iterator(this.head);\n    }\n\n    toArray(){\n        var ret = [];\n        for(let val of this.head)\n            ret.push(val)\n        return ret;\n    }\n\n    toString(){\n        return this.toArray.toString();\n    }\n\n    values(){\n        return this.toArray();\n    }\n\n}\n\nconst twoWayListClass = class TwoWayList extends List {\n    //head\n    //last\n    constructor(){\n        super();\n    }\n\n    popLast(){\n        if(!this.head)\n            return null;\n        //pop\n        let ret = this.last ? this.last.value : null;\n        this.last = this.last.prev;\n        //pop() on \"lenght == 1\" => last===head===null -> skip\n        if(this.last)\n            this.last.next=null;\n        return ret;\n    }\n\n    static _prepend(...args){List._prependTwoWay.apply(null,args)};\n    prepend(el){\n       this.head = List._prependTwoWay(el);\n    }\n\n    static iterator(listHead){\n        let oneWay = List.iterator(listHead);\n        oneWay.prev = (function () {\n            if (this.last === null)\n                return { done: true }\n            else {\n                // @ts-ignore\n                let ret = { value: this.last.prev.value, done: false }\n                // @ts-ignore\n                this.last = this.last.prev;\n            }\n        }).bind(oneWay)\n        return oneWay;\n    }\n\n    inverseIterator(){\n        let it = TwoWayList.iterator(this.last);\n        [it.next, it.prev] = [it.prev, it.next];\n        return it;\n    }\n\n\n    \n}\n\n\nglobal.set(\"List\", List.prototype);\nglobal.set(\"TwoWayList\", twoWayListClass);\n\nutils.List = List; global.set(\"utils\", utils);\n\n\n/* TypeError    \nnode.status({\n    fill: \"green\",\n    text: Object.keys(\n        utils.mergeRec(\n            new List(),\n            new twoWayListClass()\n        )\n    ).join(' & ')\n});\n/**/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 545,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "c5f8a581b6ade2b8",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "set globals towersControl & towersBitArray",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "/* interfaccia per la lettura ed il controllo delle colonnine \n    esempio:    towCtrl.FA423.greenLight = truthy/falsy;    //will get/set the correspondig bit in towersBitArray\n                towCtrl.FA423.hasDevice(\"greenLight\") <=> towCtrl.macHasDevice(\"FA423\",\"greenLight\")  //true if dev has a correspondig bit in posOf[]\n    \n    errori:     towCtrl.FA423.unregDev = 5 -> setter does nothing, getter evaluates to null, both log warning  //unregDev === present in dictionary.devKeys but missing in posOf[thatMacKey]\n                towCtrl.unknwMac -> Exception    \n                towCtrl.FA423.unknDev -> Exception\n\n    template finale:\n    {\n        \"dictionary\":{\n            \"macKeys\" : macKey[]    //{string[]} <=> enum\n            \"devices\" : device[]    //{string[]} <=> enum\n        },\n\n        \"posOf\":{\n            {macKey}:{  //all dictionary.macKeys are defined and objects\n                {device}:0 < number < 2^n | null //bit index //all dictionary.devices are defined\n            }\n        },\n\n        \"sharedBits\":{\n                {bit}:{ //only the shared ones are defined\n                    'devKey': <devKey> //associated device. //it presumes all machines sharing the bit use the same device\n                    'output'\n                }\n           }\n\n        \"towersBitArray\":Array(NBITS).fill(0),\n\n        \"macHasDevice\": function (macKey, devKey) { return this.posOf[macKey][devKey] !== null }\n\n        /** all dictionary.macKeys are defined. //dictionary.devices are reference to towersBitArray or non-enumerable errorLogging getters/setters * /\n        {macKey}:{  //all dictionary's macKeys are defined. \n            'hasDevice'(...): this.macHasDevice.bind(def, <macKey>, ...)    //alias with one less parameter //not enum\n            {linkedDeviceKey}: truthy|falsy,     //only posOf[<macKey>]'s devKeys are defined. //dictionary's devKeys missing in posOf[<macKey>] are instead not-enumerable warning-loggers\n            {linkedDeviceKey}: truthy|falsy,\n            ..\n        },\n        * / \n    }\n*/\ncallWhenDef( ()=>{\n    const utils = global.get(\"utils\");\n\n    /** error logging function */\n    function onUnconfigKeySet(key, macKey) {\n        node.warn({\n            err: \"[towersControl] trying to set() an unconfigured bit.\",\n            key: key,\n            macKey: macKey\n        });\n    }\n    function onUnconfigKeyGet(key, macKey) {\n        node.warn({\n            err: \"[towersControl] trying to get() an unconfigured bit.\",\n            key: key,\n            macKey: macKey\n        });\n    }\n    //also used for initial validation\n    const dictionary = {\n        /** {String[]} macKeys \"machine keys\". match the ones used in uibuilder's app. */\n        macKeys: [\"FA419\", \"FA420\", \"FA421\", \"FA422\", \"FA423\", \"MO41\", \"MO42\", \"OMET\"],\n        /**  {String[]} devices devices that may be associated with each towersBitArray bit*/\n        devices: [\"redLight\", \"greenLight\", \"horn\"],\n    };\n    /** index of various devices on towersBitArray.\n     * NOT ALL ARE NECESSARILY PRESENT! use macHasDevice() and def[macKey][device]=val instead\n     * setting ===null is the same as leaving it undefined, but will throw a warning */\n    const posOf = {\n        \"FA423\": {\n            \"redLight\": 0,\n            \"greenLight\": 1,\n            \"horn\": 2\n        },\n        \"FA420\": {\n            \"redLight\": 3,\n            \"greenLight\": 4,\n            \"horn\": 5\n        },\n        \"FA421\": {\n            \"redLight\": 6,\n            \"greenLight\": 7,\n            //set \"horn\"(val) { onUnconfigKey(\"horn\",\"FA419\") }\n            \"horn\": 5, //same as undefined\n        },\n        \"FA419\": {\n            \"redLight\": 8,\n            \"greenLight\": 9,\n            \"horn\": 5\n        },\n        \"OMET\": {\n            \"redLight\": 10,\n            \"greenLight\": 11,\n            \"horn\": 2,\n        },\n        \"FA422\": {\n            \"redLight\": 12,\n            \"greenLight\": 13,\n            \"horn\": 2,\n        },\n        \"MO41\": {\n        },\n        \"MO42\": {\n        }\n    };\n    const NBITS = 16; //length of towersBitArray\n    //complete posOf with iterators\n    posOf[Symbol.iterator] = utils.makeKeyIterator(dictionary.macKeys);\n    // posOf[Symbol.iterator] = utils.makeKeyIterator(Object.keys(posOf));\n    // posOf.forEach(mac => utils.generateIteratorFor(mac) )\n    // const sharedDevs = (()=>{ var arr=new Array(NBITS);  posOf.forEach((v,i) => arr[]) return arr;})()\n\n    //validate and guaratee posOf syntax\n        //posOf keys are macKeys\n        //posOf[macKey] keys are devices\n        //posOf[macKey][devKey] are positive integers < NBITS\n    for (let macKey in posOf) {\n        if (!dictionary.macKeys.includes(macKey))\n            node.warn(\"[towersControl] Syntax Validation Error: unknown macKey \" + macKey + \" in posOf{}. typo?\");\n        for (let linkedDeviceKey in posOf[macKey]) {\n            if (!dictionary.devices.includes(linkedDeviceKey))\n                node.warn(\"[towersControl] Syntax Validation Error: unknown linkedDeviceKey \" + linkedDeviceKey + \" in posOf[\"+macKey+\"]{}. typo?\");\n            if (posOf[macKey]<0 || posOf[macKey]>=NBITS)\n                node.warn(\"[towersControl] Syntax Validation Error: invalid bit number. must be >= 0 && < \" + NBITS + \". in posOf[\" + macKey + \"][\"+linkedDeviceKey+\"]. typo?\");\n        }\n    }   //all macKeys have an EXPLICIT posOf[macKey][device] set (!== undefined), set to null and warn otherwise\n    //all dictionary macKeys are defined\n    for (let macKey of dictionary.macKeys)\n        if (posOf[macKey] == undefined || typeof (posOf[macKey]) != \"object\")\n            node.warn(\"[towersControl] Syntax Validation Error: missing macKey in posOf :\" + macKey);\n    //all present devices are null || number \n    if (!Object.keys(posOf).every(macKey => dictionary.devices.every(device => posOf[macKey][device] !== undefined))) {\n        node.warn(\"[towersControl]: Syntax validation Warning: implicit null devices in posOf\");\n        for (let macKey of dictionary.macKeys)\n            for (let device of dictionary.devices)\n                posOf[macKey][device] = posOf[macKey][device] ?? null;\n    }\n\n   \n    {   //generate sharedBits\n\n        const inversePosOf = (() => {\n            var arr = new Array(NBITS);\n            for(let macKey in posOf)\n                for(let devKey in posOf[macKey]){\n                    let bit = posOf[macKey][devKey];\n                    if(bit === null) continue;\n                    arr[bit] ?? (arr[bit] = []);\n                    arr[bit].push({ \"macKey\": macKey, \"devKey\": devKey });\n                }\n            return arr;\n        })()\n        //node.warn({\"inversePosOf\":inversePosOf});\n        \n        var sharedBits = {};\n        //define how bits are combined toghether when they're read as one\n        let atLeastOneTrue = function(){\n            for(let macKey in this.values)\n                if(this.values[macKey])\n                    return true;\n            return false\n        }\n        //create sharedBits only copying the values with more than one associated machine\n        for(let bit in inversePosOf){\n            if(inversePosOf[bit].length > 1){\n                //check that all machine have the same device on this bit, log a warning if they don't //use the first device anyway\n                if(!inversePosOf[bit].every((pair,i,arr) => i==arr.length-1 || pair.devKey== arr[i+1].devKey ))    node.warn({err:\"[towerControl|sharedBits{}]: different devices appear to share the same bit. \", bit:bit, revPosOf:inversePosOf[bit]});\n                inversePosOf[bit].forEach( pair => {\n                    sharedBits[bit] = sharedBits[bit] ?? {\n                        \"devKey\": pair.devKey, \"values\": {}, \"output\": atLeastOneTrue,\n                        toArray(){ let ret=[]; for(let v of this.values) ret.push(v); return ret;  }\n                    };\n                    sharedBits[bit].values[pair.macKey] = false;\n                })\n            }\n        }\n        //add iterators\n            //for sharedBits\n            //for each sharedBits[].values\n        let valKeys;\n        utils.generateIteratorFor(sharedBits);\n        // @ts-ignore\n        for(let item of sharedBits){\n            valKeys = Object.keys(item.values).map(v=>v);\n            item.values[Symbol.iterator] = utils.makeKeyIterator(valKeys);\n        }\n    }\n    //node.warn({\"sharedBits\":sharedBits });\n    // sharedBits.forEach( bitItem => bitItem.values.fill(true) );\n    // @ts-ignore\n    //for(let bitItem of sharedBits) for(let mk in bitItem.values) bitItem.values[mk] = true;\n\n\n\n    //towersControl\n    var def = {\n        /** holds allowed keys as <string>[] //also used for validation purposes on towersControl definition\n             * - {String[]} macKeys \"machine keys\". match the ones used in uibuilder's app.\n             * - {String[]} devices devices that may be associated with each towersBitArray bit */\n        \"dictionary\": dictionary,\n        \n        /** pairs devices with the corresponding bit index to use in the modbus  queries\n            example: posOf[macKey][device]:number    //undefined macKey -> exception like 'undefined reading undefined' //undefined device -> exception like 'undefined reading <device>'\n            exposed but not expected to be used.\n            \"posOf\":{\n                {macKey}:{  //all dictionary.macKeys are defined and objects\n                    {device}:0 < number < 2^n | errorLoggingGetter() //bit index //all dictionary.devices are defined or errorLogging\n                }\n            },*/\n        \"posOf\": posOf,\n\n        /** \n          \n          \"sharedBits\":{\n                {bit}:{ //only the shared ones are defined\n                    'devKey': <devKey> //associated device. //it presumes all machines sharing the bit use the same device\n                    'output'\n                }\n           }*/\n        \"sharedBits\": sharedBits,\n\n        /** array of bits, represented by Numbers that are either 0 or 1\n             * - values should be set through towersControl[\"FA22\"].redLight = truthy|falsy\n             * - has a lenght of NBITS */\n        \"towersBitArray\": new Array(16).fill(0),\n        \n        /** @returns Bool\n         * @throws TypeError if macKey or devKey are not in dictionary */\n        \"macHasDevice\": function thisFun(macKey, devKey) {\n            if (arguments.length != thisFun.length) throw new SyntaxError(`[towersControl:macHasDevice()] expected ${thisFun.length} arguments, got ${arguments.length}`);\n            if (!posOf[macKey] || posOf[macKey][devKey] === undefined) throw new TypeError(\"[towersControl:macHasDevice()] uregistered macKey or devKey:\" + macKey + \", \" + devKey);\n            \n            return this.posOf[macKey] && typeof (this.posOf[macKey][devKey]) == \"number\"\n            //return this[macKey] && this[macKey].propertyIsEnumerable(devKey)\n        },\n        /*  \n        {macKey}:{  //all dictionary's macKeys are defined. \n            'hasDevice'(...): this.macHasDevice.bind(def, <macKey>, ...)    //alias with one less parameter //not enum\n            {linkedDeviceKey}: truthy|falsy,     //only posOf[<macKey>]'s devKeys are defined. //dictionary's devKeys missing in posOf[<macKey>] are instead not-enumerable warning-loggers\n            {linkedDeviceKey}: truthy|falsy,\n            ..\n        },\n        ..\n        */\n        [Symbol.iterator]: utils.makeKeyIterator(dictionary.macKeys)\n    }\n    \n\n\n    //complete towersControl\n        //adds a setter and getter for EACH macKey and linkedDeviceKey, even if they are not registered in posOf\n        //they will modify the corresponding towersBitArray's pos instead of themselves.\n        //setters convert the value to either 0 or 1. //not true/false for easier math and conversions\n        //setters&getters paired with unconfigured devices (posOf[][]===null) will be NOT ENUMERABLE and log a warning\n        //adds a NOT ENUMERABLE hasDevice() function, which aliases macHasDevice(macKey,...)\n    {\n        const devIsRegistered = function (macKey, linkedDeviceKey) {\n            return posOf[macKey][linkedDeviceKey] !== null && posOf[macKey][linkedDeviceKey] !== undefined\n        }\n        const devIsShared = function (macKey, linkedDeviceKey){\n            return devIsRegistered(macKey,linkedDeviceKey) && sharedBits[posOf[macKey][linkedDeviceKey]]\n        }\n        for(let macKey of dictionary.macKeys) {\n            def[macKey] = {};\n            Object.defineProperty(def[macKey], \"hasDevice\", {\n                value: def.macHasDevice.bind(def, macKey)\n            });\n            for(let linkedDeviceKey of dictionary.devices) {\n                //node.warn(\"setting \"+macKey+ \" \"+linkedDeviceKey)\n                //if device is not configured add an error-logging getter/setter\n                if(true || devIsRegistered) {\n                    Object.defineProperty(def[macKey], linkedDeviceKey, {\n                        //if bit is registered aka (typeof posof[][] == \"number\") <=> !== null && >=0\n                        set(val) {\n                            let idx = def.posOf[macKey][linkedDeviceKey];\n                            //node.warn({txt:\"setting \"+macKey+\" \"+linkedDeviceKey+\" at \"+idx+\":\"+val, isDiff:def!==global.get(\"towersControl\")});\n                            if (devIsRegistered(macKey, linkedDeviceKey)){\n                                //if bit/device is shared by multiple machines\n                                if(def.sharedBits[idx]){\n                                    def.sharedBits[idx].values[macKey] = (val ? true : false) //store the state for that machine\n                                    def.towersBitArray[idx] = (def.sharedBits[idx].output() ? 1 : 0); //set using the output function defined for that device.\n                                }\n                                else\n                                    def.towersBitArray[idx] = (val ? 1 : 0);\n                            }\n                            else\n                                onUnconfigKeySet(macKey, linkedDeviceKey);\n                        },\n                        get() {\n                            let idx = def.posOf[macKey][linkedDeviceKey];\n                            if(idx !== null && idx !== undefined){\n                                //if bit/device is shared by multiple machines\n                                if(def.sharedBits[idx])\n                                    return def.sharedBits[idx].values[macKey] ? 1 : 0;\n                                else\n                                    return def.towersBitArray[idx]\n                            }else{\n                                onUnconfigKeyGet(macKey, linkedDeviceKey);\n                                return undefined;\n                            }\n                        },\n                        enumerable: def.macHasDevice(macKey, linkedDeviceKey)\n                    })\n                }\n                else {\n                    Object.defineProperty(def[macKey], linkedDeviceKey, {\n                        set(val) {\n                            onUnconfigKeySet(macKey, linkedDeviceKey);\n                        },\n                        get() {\n                            onUnconfigKeyGet(macKey, linkedDeviceKey);\n                            return undefined;\n                        },\n                        enumerable: false\n                    })\n                }\n            }\n        }\n    }\n\n    //validate towersBitArray syntax\n\n    /*\n    //complete posOf\n        //attach to each null key an error-logging function\n        //--EDIT--allow for posOf calls on missing one\n    for (let macKey in posOf) {\n        for (let linkedDeviceKey in posOf[macKey]) {\n            if (posOf[macKey][linkedDeviceKey] === null) {\n                Object.defineProperty(posOf[macKey], linkedDeviceKey, {\n                    set(val) {\n                        onUnconfigKeySet(linkedDeviceKey, macKey)\n                    },\n                    get() {\n                        onUnconfigKeyGet(linkedDeviceKey, macKey);\n                        return null;\n                    }\n                });\n            }\n        }\n    }\n    */\n\n    global.set(\"towersControl\", def);\n    global.set(\"towersBitArray\", global.get(\"towersControl\").towersBitArray)\n    node.send(def);\n    node.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n//#######################################################################################################################\n/*** TESTS *** * /\nnode.warn(\"BEGIN TOWERSCONTROL TESTING\");\n\nconst signal = def;\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\nfunction bitArrToString(arr){\n    var str=\"\";\n    for(let i=0; i<arr.length; i++){\n        if(i%4==0)\n            str+=\"|\"\n        str+=parseInt(arr[i])+\",\";\n    }\n    return str;\n}\n\nnode.warn(\"testing bits\")\n//raise 1 bit at a time, try to raise unset devices\n    //mkList is set so you should see bits raising consecutively\n{const mkList = [\"FA423\", \"FA420\", \"FA421\", \"FA419\", \"OMET\", \"FA422\"]\nlet sBA = signal.towersBitArray\nfor (let mKey of mkList) {\n    node.warn(\"over \" + mKey)\n    signal[mKey].redLight = 1;\n    node.warn(bitArrToString(sBA));\n    signal[mKey].redLight = 0;\n\n    signal[mKey].greenLight = 1;\n    node.warn(bitArrToString(sBA));\n    signal[mKey].greenLight = 0;\n\n    //this should sometime throw warnings\n    signal[mKey].horn = 1;\n    node.warn(bitArrToString(sBA));\n    signal[mKey].horn = 0;\n\n}}\n\n//try macHasDevice on all\n    //res: {\n        //{macKey}:{\n            //{device}:true|false\n        //notDefinedList: {string[]}\nnode.warn(\"testing macHasDevice\")\n{ let res={}; res.notDefinedList=[];\nfor(let macKey of def.dictionary.macKeys){\n    res[macKey] = {};\n    for(let device of def.dictionary.devices){\n        res[macKey][device] = def.macHasDevice(macKey, device);\n        if(!res[macKey][device])\n            res.notDefinedList.push(`${macKey} has not ${device}`)\n    }\n}\nnode.warn({\"all_macHasDevice:\":res})\n}\n\nnode.warn(\"TEST END\");\n/**/\n\n},\"utils\")\n\nfunction callWhenDef(cb, opts, ...globalNames) {\n    if (typeof (opts) == \"string\")\n        globalNames.push(opts);\n    let { timeout: timeout = 3000, retryDelay: retryDelay = 100, errorCb: errorCb = null } = (typeof (opts) == \"string\" ? opts : {});\n    var tout, intv;\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb() : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments })\n        }, timeout);\n    }\n    //set global-chacking interval\n    intv = setInterval(() => {\n        for (let name of globalNames)\n            if (global.get(name) === undefined || global.get(name) === null)\n                return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}\n",
        "finalize": "",
        "libs": [],
        "x": 405,
        "y": 345,
        "wires": [
            [
                "f2d3e447871ec449",
                "7a0b607aad8df6bd"
            ]
        ]
    },
    {
        "id": "b5d7a188b9b24e75",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "callWhenDef",
        "func": "//look in onStart",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n/** alternative to using link-nodes on libraries (which requires a ton of overhead and structures)\n * \n*/\n/** repeatedly tries to fetch all globalNames with global.get(). \n    * @param {function} cb called once ALL globalName are defined\n    * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n    * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n    * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n    * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n    * @param  {...any} globalNames series of strings\n    */\nfunction callWhenDef(cb, opts, ...globalNames){\n    if(typeof(opts) == \"string\")\n        globalNames.push(opts);\n    let {timeout:timeout=3000, retryDelay:retryDelay=100, errorCb:errorCb=null} = (typeof(opts) == \"string\" ? opts : {});\n    var tout,intv;\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb() : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments })\n        }, timeout);\n    }\n    //set global-chacking interval\n    intv = setInterval(() => {\n        for (let name of globalNames)\n            if (global.get(name) === undefined || global.get(name) === null)\n                return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}\n\ncallWhenDef(function(){\n    /*\n        const obj = { .. }\n        global.set(\"..\",obj)\n        node.\n     */\n    const obj={};\n    node.status({ fill: \"green\", text: Object.keys(obj).join(' & ') });\n},\"utils\")\n\n",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "9bd5cc5f726fdba6",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "utils isDefinedEvent",
        "mode": "link",
        "links": [
            "3502536b287b497d",
            "e60ddb3d97dea1f3"
        ],
        "x": 570,
        "y": 225,
        "wires": [],
        "l": true
    },
    {
        "id": "7f11d8441c0b74c5",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "set global signalCells",
        "func": "\n//look in on start",
        "outputs": 1,
        "noerr": 0,
        "initialize": "function callWhenDef(cb, ...globalNames) {\n    for (let name of globalNames)\n        if (global.get(name) === undefined || global.get(name) === null) {\n            setTimeout(callWhenDef, 100, cb, ...globalNames)\n            return\n        }\n    cb();\n}\n\nclass toutItem {\n    #startTime\n    #endTime\n    //remainingMs\n    #cb\n    #ref\n\n    constructor(cb,delay){\n        this.#startTime = Date.now();\n        this.#endTime = this.startTime + delay;\n        this.#cb = cb;\n        this.#ref = setTimeout(cb,delay);\n    }\n\n    get remainingMs(){ return this.#startTime - this.#endTime }\n    get startTime() { return this.#startTime }\n    get endTime() { return this.#startTime }\n    get cb(){ return this.#cb }\n    get ref(){ return this.#ref }\n    \n    get timerLength(){return msToScaledString(this.startTime - this.endTime) }\n    get remainingTime(){ return msToScaledString(this.endTime - Date.now()) }\n}\n\nclass SignalCell {\n    signalKey;\n    programmedStateChanges;\n    timerStart;\n    timerEnd;\n\n    constructor(cfg={}){\n        this.signalKey = cfg?.initCellSignalKey ?? \"noop\"\n        this.programmedStateChanges = [];\n        this.timerEnd=0;\n        this.timerStart=0;\n        \n        this.config = cfg;\n        this.cfg = cfg;\n    }\n\n    programStateChange(toKey, delay, nodeRef){\n        this.programmedStateChanges.push({\n            toSignalKey:toKey,\n            tout:new toutItem(()=>{\n                this.signalKey = toKey;\n                \n            },delay)\n        })\n    }\n\n    setTout( toKey, delay){\n        if(this.programmedStateChanges[toKey])\n            this.programmedStateChanges[toKey].push(setTimeout(()=>{}))\n    }\n\n}\n\n//signalCells.OMET.setTout(\"A2\",cb, 3000)\n//signalCells.OMET.clearTouts()\n//signalCells.OMET.clearTout(\"A2\")\n\nconst cb=function(){\n    const towersControl = global.get(\"towersControl\");\n    const config = global.get(\"config\");\n    const def={\n        dictionary:{\n            macKeys:towersControl.dictionary.macKeys,\n            signalKeys:[\"A1\",\"A2\",\"A3\",\"A4\",\"B\",\"C1\",\"C2\",\"D\",\"E\"],\n            signalNames:[\"chiamata\",\"presa in carico\",\"avvio\",\"ritardo d'avvio\",\"run\",\"downtime\",\"manutenzione\",\"scarto\",\"carrelli in corsia\"]\n        },\n        /*\n        [macKey] = <SignalCell>\n        */\n\n    }\n\n    //init cells\n    for(let macKey of towersControl.dictionary.macKeys){\n        def[macKey] = new SignalCell(config.machines[macKey])\n    }\n\n    //check syntax\n        //signalNames len == signalKeys len\n    if(def.dictionary.signalNames.length != def.dictionary.signalKeys.length){\n        node.warn(\"signalCells: signalNames's lenght doesn't match signalKeys's. \" + def.dictionary.signalNames.length + \" vs \" + def.dictionary.signalKeys.length);\n        for(let i=def.dictionary.signalNames.length; i<def.dictionary.signalKeys.length; i++)\n            def.dictionary.signalNames.push(\"missingName\");\n    }\n\n    global.set(\"signalCells\", def);\n    node.send(def);\n    node.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n}\n\ncallWhenDef(cb,\"utils\",\"towersControl\",\"config\");\n\n\nfunction msToScaledString(ms){\n    let units = [\"ms\",\"s\",\"min\",\"h\",\"gg\"];\n    let treshHoldMult = new Array(units.length).fill(2); //in terms of the associated unit // 1 hour == 3600ms -> if treshholdMult==2 then threshHold==3600*2\n    let unitFactors=[1,1000,60,60,24]; //in terms of the preceding unit //ex. min are 1*1000*60\n    //let getUnitFactor = (idx) => { var ret=0; for(let i=0;i<idx;i++) ret*=factor[i]; return ret; }\n    \n    var unitFactor = unitFactors[0];\n    for(let i=1; i<units.length; i++){\n        let lastUF = unitFactor;\n        unitFactor *= unitFactors[i];\n        if(ms < unitFactor * treshHoldMult[i] || i==units.length-1)\n        return (ms/lastUF).toFixed(1) + units[i-1];\n    }\n    return \"shouldNeverGetHere\";\n}",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 405,
        "wires": [
            [
                "3276a60dd8f20243"
            ]
        ]
    },
    {
        "id": "f17b11a2e1704a11",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "lettura e scrittura colonnine",
        "info": "",
        "x": 705,
        "y": 345,
        "wires": []
    },
    {
        "id": "66608353d1970e27",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "UI celle",
        "info": "",
        "x": 550,
        "y": 405,
        "wires": []
    },
    {
        "id": "4e8e251b1e64ab1d",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "allMain isDefinedEvent",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/** alternative to using link-nodes on libraries (which requires a ton of overhead and structures)\n * \n*/\nfunction callWhenDef(cb, ...globalNames) {\n    for (let name of globalNames)\n        if (global.get(name) === undefined || global.get(name) === null) {\n            setTimeout(callWhenDef, 300, cb, ...globalNames)\n            return\n        }\n    cb();\n}\n\nconst tout = setTimeout(()=>{\n    node.error(node.name+\" timeout. check node \"+node.id+\" for typos\")\n}, 10000)\ncallWhenDef(function () {\n   node.send({topic:\"isDefinedEvent\", payload:\"allMain\"})\n   clearTimeout(tout);\n}, \"utils\",\"towersControl\",\"towersBitArray\",\"signalCells\")",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 180,
        "wires": [
            [
                "028f6998b11454ba"
            ]
        ]
    },
    {
        "id": "028f6998b11454ba",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "allMain isDefinedEvent out",
        "mode": "link",
        "links": [
            "51b2e2cad1a2f2fd",
            "cc9d5b0b240172ae",
            "8a7b266f172db654",
            "41052036e4260285",
            "5fe604351ee66213",
            "eb51da252c184f8b",
            "ee47774db553980b",
            "2585275db935f830",
            "a92151a1a1d8a360",
            "fb72aaf30f378de5",
            "53f5b685a1ec4809",
            "807fcc0a56e37f7a"
        ],
        "x": 725,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "f2d3e447871ec449",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "towersControl isDefinedEvent",
        "mode": "link",
        "links": [],
        "x": 860,
        "y": 345,
        "wires": []
    },
    {
        "id": "51b2e2cad1a2f2fd",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "allMain isDefinedEvent out",
        "links": [
            "028f6998b11454ba"
        ],
        "x": 830,
        "y": 150,
        "wires": [
            []
        ]
    },
    {
        "id": "3276a60dd8f20243",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "signalCells isDefinedEvent",
        "mode": "link",
        "links": [],
        "x": 650,
        "y": 405,
        "wires": []
    },
    {
        "id": "0db2e2cabb48c924",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "about:config",
        "info": "//config file validation is independent from the classes architecture,\n    //as it's defined before both classes definition and instantiations\n//upon changing the class attributes contraints it's important to\n    //also update the json schemas responsible for that validation.",
        "x": 795,
        "y": 405,
        "wires": []
    },
    {
        "id": "cf6b9c32b50edbc7",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "set global buttonsControl",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\ncallWhenDef(()=>{\n    const signalKeys = global.get(\"signalCells\").dictionary.signalKeys;\n\n    const def = {\n        dictionary:{\n            /** {String[]} macKeys \"machine keys\". match the ones used in uibuilder's app. */\n            macKeys: global.get(\"signalCells\").dictionary.macKeys,\n            /**  {String[]} devices devices that may be associated with each towersBitArray bit*/\n            devices: [\"redBtn\", \"greenBtn\", \"whiteBtn\",\"blackBtn\"],\n            actKeys:[...(( )=>{ return signalKeys.map( v => \"set\"+v) })()]\n        },\n\n        actionOf:{\n            \"blackBtn\": \"setA1\", //chiamata\n            \"redBtn\": \"setD\", //scarto\n            \"greenBtn\": \"setB\", //run\n            \"whiteBtn\": \"setC1\", //downtime\n            \"whiteBtnTwice\": \"setC2\", //manut\n        },\n\n        // bitMap:{ //plcKey : {macKey, btnKey}\n        //     \"ZBRN1-23KF1\":[\n        //         {macKey:\"FA420\",btnKey:\"blackBtn\"}\n        //     ]\n        // },\n        // getBitMap(plcKey){\n        //     if(!this.bitMap[plcKey]){ node.error(\"[buttonsControl.getBitMap()]: unknown plcKey: \"+plcKey); return false;}\n        //     return this.bitMap;\n        // },\n\n        prepareActionMsg:function (msg, macKey, btnKey){\n            if(!this.actionOf[btnKey] || !this.dictionary.macKeys.includes(macKey))\n                node.error({ txt: \"unknown macKey or btnKey\", mac: macKey, btn: btnKey, msg: msg});\n            if(typeof msg != \"object\")\n                node.error({txt:\"expecting msg object, got\",v:msg});\n\n            node.warn(\"PRESSED \"+ btnKey + \" of \"+ macKey)\n            msg.topic=macKey;\n            if(btnKey == \"whiteBtn\" && global.get(\"signalCells\")[macKey].signalKey == \"C1\")\n                msg.action=this.actionOf[btnKey+\"Twice\"];\n            else\n                msg.action = this.actionOf[btnKey] ?? node.error(\"UNKNOWN BTNKEY\");\n            return msg;\n        }\n\n    }\n\n\n    global.set(\"buttonsControl\", def);\n    node.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n},\"utils\",\"signalCells\")\n\n/** @summary repeatedly tries to fetch all globalNames with global.get(). \n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} globalNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...globalNames) {\n    if (typeof (opts) == \"string\")\n        globalNames.push(opts);\n    let { timeout: timeout = 3000, retryDelay: retryDelay = 100, errorCb: errorCb = null } = (typeof (opts) == \"string\" ? opts : {});\n    var tout, intv;\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb() : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments })\n        }, timeout);\n    }\n    //set global-chacking interval\n    intv = setInterval(() => {\n        for (let name of globalNames)\n            if (global.get(name) === undefined || global.get(name) === null)\n                return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}\n\n/*** tests * /\ncallWhenDef(()=>{\n    node.warn(\"[buttonsControl] begin testing\");\n    const utils = global.get(\"utils\");\n    const buttonsControl = global.get(\"buttonsControl\");\n    var results = {};\n\n    //try prepareActionMsg with all dev and macs\n    node.warn(\"[buttonsControl] prepMsgs\");\n    results.prepMsgs = [];\n    for(let dev of buttonsControl.dictionary.devices){\n        for(let mKey of buttonsControl.dictionary.macKeys)\n            results.prepMsgs.push(buttonsControl.prepareActionMsg({},mKey,dev))\n    }\n\n    //try wrong mac and Devs\n    node.warn(\"[buttonsControl] expected fails\");\n    results.fails = [];\n    results.fails.push(buttonsControl.prepareActionMsg({},\"noMac\", buttonsControl.dictionary.devices[0]))\n    results.fails.push(buttonsControl.prepareActionMsg({},buttonsControl.dictionary.macKeys[0],\"noDev\"))\n    node.warn(results);\n\n    \n\n},\"utils\",\"buttonsControl\")\n/**/\n",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 465,
        "wires": [
            []
        ]
    },
    {
        "id": "76f9fb62b9b2627a",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "interpretazione pulsantiere",
        "info": "",
        "x": 640,
        "y": 465,
        "wires": []
    },
    {
        "id": "7a0b607aad8df6bd",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "tests",
        "func": "/*** TESTS *** */\nnode.warn(\"BEGIN TOWERSCONTROL TESTING\");\n\nconst signal = global.get(\"towersControl\");\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\nfunction bitArrToString(arr) {\n    var str = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 4 == 0)\n            str += \"|\"\n        str += parseInt(arr[i]) + \",\";\n    }\n    return str;\n}\n\nnode.warn(\"testing bits 0->1\")\n//raise 1 bit at a time, try to raise unset devices\n//mkList is set so you should see bits raising consecutively\nif(false){\n    const mkList = [\"FA423\", \"FA420\", \"FA421\", \"FA419\", \"OMET\", \"FA422\",\"MO41\",\"MO42\"]\n    let sBA = signal.towersBitArray\n    for (let mKey of mkList) {\n        node.warn(\"over \" + mKey)\n        \n        signal[mKey].redLight += 1;\n        node.warn(\"red\"+bitArrToString(sBA));\n        //signal[mKey].redLight = 0;\n\n        signal[mKey].greenLight += 1;\n        node.warn(\"green:\"+bitArrToString(sBA));\n        //signal[mKey].greenLight = 0;\n\n        //this should sometime throw warnings\n        signal[mKey].horn += 1;\n        node.warn(\"horn:\"+bitArrToString(sBA));\n        //signal[mKey].horn = 0;\n\n    }\n}\n\nnode.warn(\"testing bits 1->0\")\n//raise 1 bit at a time, try to raise unset devices\n//mkList is set so you should see bits raising consecutively\nif(false){\n    const mkList = [\"FA423\", \"FA420\", \"FA421\", \"FA419\", \"OMET\", \"FA422\", \"MO41\", \"MO42\"].reverse()\n    let sBA = signal.towersBitArray\n    for(let mKey of mkList){\n        node.warn(\"over \" + mKey)\n        signal[mKey].redLight -= 1;\n        node.warn(\"red\" + bitArrToString(sBA));\n        //signal[mKey].redLight = 0;\n\n        signal[mKey].greenLight -= 1;\n        node.warn(\"green:\" + bitArrToString(sBA));\n        //signal[mKey].greenLight = 0;\n\n        //this should sometime throw warnings\n        signal[mKey].horn -= 1;\n        node.warn(\"horn:\" + bitArrToString(sBA));\n        //signal[mKey].horn = 0;\n\n    }\n}\n\n\nnode.warn(\"testing sharedBits\")\n//raise 1 bit at a time, try to raise unset devices\n//mkList is set so you should see bits raising consecutively\nif(true){\n    const towCtrl = signal;\n    const sharedBits = towCtrl.sharedBits;\n    const clone = global.get(\"utils\").clone;\n    const inversePosOf = (() => {\n        let posOf = towCtrl.posOf;\n        var arr = new Array(towCtrl.towersBitArray.length);\n        for(let macKey in posOf)\n            for(let devKey in posOf[macKey]){\n                let bit = posOf[macKey][devKey];\n                if(bit === null) continue;\n                arr[bit] ?? (arr[bit] = []);\n                arr[bit].push({ \"macKey\": macKey, \"devKey\": devKey });\n            }\n        return arr;\n    })()\n    const deviceOf = bit => inversePosOf[bit]?.[0]?.devKey ?? node.error(\"[towCtrl tests] no device at bit \"+bit);\n    for(let shBit of sharedBits){\n        node.warn({txt:\"from \"+shBit.toArray().map(v=>v?1:0).join()+\"->\"+shBit.output()})\n        //raise all bits\n        for(let mk in shBit.values){\n            towCtrl[mk][shBit.devKey] = true;\n            node.warn({txt:\"raised \"+mk+\" -> \"+shBit.toArray().map(v=>v?1:0).join()+\"->\"+shBit.output()})\n        }\n    }\n}\n\n\n//try macHasDevice on all\n//res: {\n//{macKey}:{\n//{device}:true|false\n//notDefinedList: {string[]}\nconst def = global.get(\"towersControl\");;\nnode.warn(\"testing macHasDevice\")\n{\n    let res = {}; res.notDefinedList = [];\n    for (let macKey of def.dictionary.macKeys) {\n        res[macKey] = {};\n        for (let device of def.dictionary.devices) {\n            res[macKey][device] = def.macHasDevice(macKey, device);\n            if (!res[macKey][device])\n                res.notDefinedList.push(`${macKey} has not ${device}`)\n        }\n    }\n    node.warn({ \"all_macHasDevice:\": res })\n}\n\nnode.warn(\"TEST END\");\n/**/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 945,
        "y": 345,
        "wires": [
            []
        ]
    },
    {
        "id": "18c21c6d00a60420",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "5cf67bd384745bc4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 860,
        "y": 315,
        "wires": [
            [
                "7a0b607aad8df6bd"
            ]
        ],
        "l": false
    },
    {
        "id": "65cc909c78aef1b6",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "OPEN/CLOSE ALL DBG UI GATES",
        "info": "",
        "x": 1210,
        "y": 345,
        "wires": []
    },
    {
        "id": "472cc451c664a073",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1120,
        "y": 390,
        "wires": [
            [
                "89c3dfd6c81b6570"
            ]
        ],
        "l": false
    },
    {
        "id": "be9dd324a7bf99e1",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "all dbgGates",
        "mode": "link",
        "links": [
            "b1b26324a134cc2d",
            "7f3f720f5ffa9ec8",
            "ff4d8fe7b4d510fc",
            "c607bf35e3292560",
            "c4aefeb3271ffd19",
            "22eff3ffb0bed0bb",
            "8bb1049bc22ea9df",
            "72fd60d9b9326fd5",
            "f5d7f2274f0bfaab",
            "136fc326302a8398",
            "341b965237eba473"
        ],
        "x": 1385,
        "y": 420,
        "wires": [],
        "l": true
    },
    {
        "id": "4ce40e9bfc8af3d3",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "onStartup 0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1175,
        "y": 465,
        "wires": [
            [
                "6b3cbc7f60f41ee7"
            ]
        ]
    },
    {
        "id": "89c3dfd6c81b6570",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 390,
        "wires": [
            [
                "be9dd324a7bf99e1"
            ]
        ]
    },
    {
        "id": "29050b1d36bb0071",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "open",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1125,
        "y": 420,
        "wires": [
            [
                "6b3cbc7f60f41ee7"
            ]
        ],
        "l": false
    },
    {
        "id": "6b3cbc7f60f41ee7",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d5cd79b677b0e975",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 420,
        "wires": [
            [
                "be9dd324a7bf99e1"
            ]
        ]
    },
    {
        "id": "a314bd6064611eee",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9b2d800cf2d90b2c",
        "name": "shared catchAll",
        "func": "/** shared by common catchAll nodes. Standardize error outputs.\n    * NOTICE: must be called with thisArg, like catchAll.call(this, msg) or the error messages will originate here */\nmsg.sharedErrorOutput = {\n    \"err\": msg.error.message, \n    \"src\": msg.error.source.id, \n    \"n\": msg.error.source.name, \n    \"fName\": msg._error?.nrStack?.[0]?.fName,\n    \"args\": msg._error?.nrStack?.[0]?.args?.join?.() ?? \"missing error stack\",\n    \"nrStack\": msg._error?.nrStack, \n    \"full\": msg\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1195,
        "y": 180,
        "wires": [
            [
                "336dc73c123ae887",
                "0fa6bc1ebe9f15e7"
            ]
        ]
    },
    {
        "id": "b04c108b95e88fb1",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9b2d800cf2d90b2c",
        "name": "shared catchAll",
        "links": [],
        "x": 1085,
        "y": 180,
        "wires": [
            [
                "a314bd6064611eee"
            ]
        ]
    },
    {
        "id": "336dc73c123ae887",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9b2d800cf2d90b2c",
        "name": "shared catchAll",
        "mode": "return",
        "links": [],
        "x": 1310,
        "y": 180,
        "wires": []
    },
    {
        "id": "0fa6bc1ebe9f15e7",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9b2d800cf2d90b2c",
        "name": "count",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 1375,
        "y": 180,
        "wires": []
    },
    {
        "id": "c37451428f3dc6ef",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9b2d800cf2d90b2c",
        "name": "set msg.sharedOutput",
        "info": "",
        "x": 1200,
        "y": 150,
        "wires": []
    },
    {
        "id": "0643ba455aee4a09",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "GUIVars isDefinedEvent",
        "mode": "link",
        "links": [
            "f3f4cefb642a5925",
            "695cd301cf91de89",
            "ddb91cf0e29fbfd8",
            "c7fa28f92c0e3d96",
            "5d6ab63552f78a32",
            "8cbaad5982d6c107",
            "6cb7a60944ddb99c",
            "3fa9a0039ceb03e3",
            "34023d48b298316d",
            "d8e02269d74961a5"
        ],
        "x": 1020,
        "y": 1215,
        "wires": [],
        "l": true
    },
    {
        "id": "05a3fa79792c351e",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "GUIVars.json read",
        "links": [
            "edb583c153f84e48"
        ],
        "x": 875,
        "y": 1185,
        "wires": [
            [
                "5715f2abae4537f7"
            ]
        ],
        "l": true
    },
    {
        "id": "5715f2abae4537f7",
        "type": "gate",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "once",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1060,
        "y": 1185,
        "wires": [
            [
                "4dbae3ed42f23fb0",
                "0643ba455aee4a09"
            ]
        ]
    },
    {
        "id": "4dbae3ed42f23fb0",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 1155,
        "wires": [
            [
                "5715f2abae4537f7"
            ]
        ]
    },
    {
        "id": "09cd39e1e8f3eacf",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "editedConfig",
                "pt": "flow",
                "to": "config",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 625,
        "y": 1290,
        "wires": [
            [
                "cc0a07fbf37db494"
            ]
        ]
    },
    {
        "id": "34b18fe79d6813dc",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "globalConfig isDefinedEvent",
        "links": [
            "b6da99b42391a973"
        ],
        "x": 380,
        "y": 1290,
        "wires": [
            [
                "09cd39e1e8f3eacf"
            ]
        ],
        "l": true
    },
    {
        "id": "3f48447c71db9446",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "share configPage flowVars",
        "mode": "link",
        "links": [
            "5d99e0d71292471b",
            "70769ab50b342ceb",
            "46904fb88b78dee7"
        ],
        "x": 605,
        "y": 1230,
        "wires": []
    },
    {
        "id": "ca601c76ca5f9b88",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "share configPage flowVars",
        "func": "let toShare = [\n    \"fallbackGUIVars\",\n    \"converters\",\n    \"GUIVars\"\n]\n\nreturn {\n    flowVars:toShare.map( name => [name,flow.get(name)]),\n    unpackTo:function(store){\n        this.flowVars.forEach( pair => store.set(pair[0],pair[1] ))\n        return this.flowVars.every( pair => pair[1] !== undefined )\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1230,
        "wires": [
            [
                "3f48447c71db9446"
            ]
        ]
    },
    {
        "id": "5d99e0d71292471b",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "share configPage flowVars",
        "links": [
            "3f48447c71db9446"
        ],
        "x": 765,
        "y": 1230,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "cc0a07fbf37db494",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "editedConfig isDefinedEvent",
        "mode": "link",
        "links": [],
        "x": 875,
        "y": 1290,
        "wires": [],
        "l": true
    },
    {
        "id": "0f682da50f651c25",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "set flow.tabUtils",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nfunction twoDigit(x){\n    if(typeof x == \"string\")\n        x = parseInt(x);\n    return x<10 ? '0'+x : x;\n}\n//\"1\".padStart(5,\"0\")\n\n//yet to decide where to store it\nfunction getHtmlClass(className = \"HTML\") {\n    return (global.get(\"html\") ?? flow.get(\"html\") ?? {})[className] ?? flow.get(className)\n}\n\ncallWhenDef(\"config\", \"utils\", ()=>{\n    callWhenDef(\"html\", { ctx: \"global\" }, () => {\n        const utils = global.get(\"utils\");\n        const HTMLElement = getHtmlClass(\"HTMLElement\");\n        const HTMLOptionElement = getHtmlClass(\"HTMLOptionElement\");\n        const HTMLSelectElement = getHtmlClass(\"HTMLSelectElement\");\n\n        const tabUtils={\n            /**\n             * returns the index of the row with rowId==rowId in the provided table, -1 if not found\n             * \n             * @param {number} rowId name of the button to affect, like \"sendToPressa1\"\n             * @param {object} tableRef reference to the row to check, must have a fieldName button.\n             * @return {number} the index of the row with rowId==rowId in the provided table, -1 if not found\n            */\n            posOf(rowId, tableRef) {\n                if (arguments.length != 2) node.warn({err:\"[tabUtils][posOf] arguments count mismatch.\",count:arguments.length,arg:arguments});\n                //look in expected pos first\n                if (rowId < tableRef.length && tableRef[rowId].rowId == rowId)\n                    return rowId;\n                for (let i = 0; i < tableRef.length; i++)\n                    if (tableRef[i].rowId == rowId)\n                        return i;\n                return -1; //not found\n            },\n\n            hasRow(rowId, tableRef) {\n                return this.posOf(rowId, tableRef) >= 0;\n            },\n\n            deleteRowIdx(rowIdx, tableRef){\n                if(tableRef.length <= rowIdx || rowIdx < 0)\n                    return false;\n                for (let i = rowIdx; i < tableRef.length-1; i++)\n                    tableRef[i] = tableRef[i + 1];\n                tableRef.pop();\n                return true;\n            },\n\n            deleteRowId(rowId, tableRef) {\n                let rowIdx = this.posOf(rowId, tableRef);\n                return rowIdx > 0 ? this.deleteRowIdx(rowIdx, tableRef) : false\n            },\n\n            deleteRow(row, tableRef){\n                return this.deleteRowId(row.rowId, tableRef);\n            },\n            \n            newRowId(table) {\n                //if table empty assign first \n                if(table.length == 0)\n                    return 0; //first rowId\n                //if rowId equals its table's index -> use shortcut\n                if(table[table.length-1].rowId==table.length-1)\n                    return table.length;\n                //else\n                //load all possible indexes\n                var indexes = new Array()\n                let i = 0;\n                for (let row of table)\n                    indexes[i++] = true;\n                indexes[i++] = true;\n                //flag off the used ones\n                for (let row of table)\n                    indexes[row.rowId] = false;\n                //return the first available one\n                i = 0;\n                while (!indexes[i])\n                    i++;\n                return i;\n            },\n\n            \"viewsEditor\":{\n                \"adminUI\":{\n                    newRow(rowId) {\n                        var row = {\n                            rowId: rowId,\n                            deleteButton: '<div class=\"table-button delete\"><i class=\"fa fa-trash-o\" ></i></div>',//\"<center><i class='fa fa-trash-o' ></i></center>\",\n                            viewKey: \"\",\n                            //<macKey>_isAdmin: <html>,\n                            //<macKey>_isAdmin_state: false,\n                            note: \"\"\n                        }\n                        \n                        //add untoggled buttons for all macKeys\n                            //<macKey>_isAdmin: <html>,\n                            //<macKey>_isAdmin_state: false,\n                        global.get(\"signalCells\").dictionary.macKeys.forEach( mk => {\n                            row[mk + \"_isAdmin\"] = '<input type=\"checkbox\" class=\"switch switchify\">',\n                            row[mk + \"_isAdmin_state\"] = false\n                        })\n                        \n                        return row;\n                    },\n\n                    newCreatorRow(rowId){\n                        //(rowId ?? !tableRef) || node.error(\"[tabUtils.exactIpList.addCreatorRow] invalid arguments. types:\"+arguments.map(a => typeof(a)).join())\n                        //if(this.hasCreatorRow(tableRef))\n                        var row = this.newRow(rowId);\n                        row.deleteButton='<div class=\"table-button add\"><i class=\"fa fa-plus-square\" ></i></div>';\n                        \n                        return row;\n                    },\n\n                    setRowToView(row, view_or_viewKey, views=global.get(\"config\").views ){\n                        //retrieve the missing one with the other\n                        let {view:view, viewKey:viewKey} = typeof view_or_viewKey == \"string\" ? {view:getView(view_or_viewKey, views), viewKey:view_or_viewKey} : {view:view_or_viewKey, viewKey: (function keyOfView(view, views){ for (let vk in views) if (view === views[vk]) return vk })(view_or_viewKey, views)}\n\n                        row.viewKey = viewKey;\n                        //set each <macKey>_isAdmin_state to its view correspective\n                        const macKeys = global.get(\"signalCells\").dictionary.macKeys;\n                        macKeys.forEach( mk => this.setSwitchState(row, mk+\"_isAdmin\", view.adminUI.includes(mk) ));\n                        \n                        row.note = \"\";\n                        \n                        return row;\n                    },\n\n                    toAdminUIArray(row){\n                        return global.get(\"signalCells\").dictionary.macKeys.filter(mk => row[mk+\"_isAdmin_state\"])\n                    },\n\n                    //switch\n                    switchHtml:'<input type=\"checkbox\" class=\"switch switchify\">',\n\n                    refreshSwitchState(row, fieldKey){\n                        return row[fieldKey+\"_state\"] = !!row[fieldKey].match(/^<input\\s+checked/);\n                    },\n\n                    getSwitchState(row, fieldKey, fromHtml = false){\n                        if(fromHtml)\n                            this.refreshSwitchState(row, fieldKey);\n                        return row[fieldKey+\"_state\"];\n                    },\n\n                    setSwitchState(row, fieldKey, state){\n                        if(state != this.getSwitchState(fieldKey, row)){\n                            row[fieldKey+\"_state\"] = !!state;\n                            row[fieldKey] = state ? this.switchHtml.replace(\"<input\",\"<input checked \") : this.switchHtml;\n                        }\n                    },\n\n                    isIsAdminSwitch(fieldKey){\n                        return !!fieldKey.match(\"_isAdmin\");\n                    }\n\n                },\n                \"exactIpList\":{\n                    newRow(rowId) {\n                        const select = this.viewKeySelect.element; //new HTMLSelectElement with unselected options\n                        \n                        var row = {\n                            rowId: rowId,\n                            deleteButton: '<div class=\"table-button delete\"><i class=\"fa fa-trash-o\" ></i></div>',\n                            apKey:\"\",\n                            ip:\"0.0.0.0\",\n                            viewKeySelect: this.emptySelectHtml,\n                            viewKeySelect_selected: null,\n                            hasCfgPage:false,\n                            //viewKeySelect: select.updatedHtml,\n                            //viewKeySelect_element: select,\n                            //\"0\": \"\",\n                            //..: \"\",\n                            //\"100\": \"\",\n                            note: \"\"\n                        }\n                        //add values for all invisible columns used to detect the select's value\n                            //a click on the invisible cells is dispatched by the select's onchange event,\n                                //each option is paired with one ghost-cell by the attribute 'ghost-idx' so that opt's ghost-idx == tabulatorCell's tabulator-field\n                            //added only first and last since their presence in the in/out is not necessary\n                                //added for the sake of remembering their existence when looking at debug outputs\n                        row[0]=\"\"; row[99]=\"\";\n                        // for(let i=0; i<100; i++)\n                        //     row[i]=\"\";\n                        \n                        \n                        return row;\n                    },\n\n                    newCreatorRow(rowId){\n                        //(rowId ?? !tableRef) || node.error(\"[tabUtils.exactIpList.addCreatorRow] invalid arguments. types:\"+arguments.map(a => typeof(a)).join())\n                        //if(this.hasCreatorRow(tableRef))\n                        var row = this.newRow(rowId);\n                        row.deleteButton='<div class=\"table-button add\"><i class=\"fa fa-plus-square\" ></i></div>';\n                        row.viewKeySelect=this.viewKeySelect.newPopulatedSelect(\"default\");\n                        row.viewKeySelect_selected=\"default\";\n                        return row;\n                    },\n                    \n                    allIpsFor(tableRef, viewKey){\n                        tableRef ?? viewKey ?? node.error(\"[tabUtils.exactIpList.allIpsFor()] missing arguments. received:\"+[...arguments].join())\n                        tableRef.filter( row => row.viewKeySelect_selected==viewKey ).map( row => row.ip )\n                    },\n\n                    viewKeySelect:{\n                        // inflater(bare){\n                        //     //var self = bare ? bare : this;\n                        //     var inflated = {};\n                        //     for(let key in bare){\n                        //         switch(key){\n                        //             default:{ inflated[key] = bare[key]; break;}\n                        //             case \"attributes\":\n                        //         }\n                        //     }                        \n                        // },\n                        onChange: ` //cannot use 'greater than' characters besides in '=>' or HTMLElement.explodeHtml() won't work\n                                    let isDbgOn = window.dbg || window.DBG;\n                                    //log every now and then a memo about the possibility to turn on dbg\n                                    isDbgOn || (window.isDbgOnMemo ?? (window.isDbgOnMemo = console.info('[info] set window.dbg or window.DBG to enable more pedant logging') || setTimeout(()=>window.isDbgOnMemo=null,10000)))\n                                    isDbgOn && console.log('val changed to ',this.value,'on',this);\n                                    //alike Array.find() //parse an element and its siblings\n                                    let findSibling = function findSibling(pred, el){\n                                        isDbgOn && console.log('parsing', el);\n                                        return !el ? undefined : (pred(el) ? el : findSibling(pred, el.nextElementSibling))\n                                    }\n                                    //get option with value == this.value\n                                    let selected = findSibling( opt => this.value == (opt.value ?? opt.innerText), this.firstElementChild);\n                                    //get table column with field == ghost-idx\n                                    let ghostCell = findSibling( cell => cell.getAttribute('tabulator-field') == selected.getAttribute('ghost-idx'), this.parentElement)\n                                    //simulate click\n                                    ghostCell.dispatchEvent(new Event('click'));\n                                    console.log('dispatched from',isDbgOn ? this : ['compactRef',this],'on opt',selected,'to','ghost',ghostCell);\n                                    `.replaceAll('\"',\"'\"),\n                            // @ts-ignore\n                        idxMap: new Map(Object.keys(global.get(\"config\").views).map((key, idx) => [[idx, key], [key, idx]]).flat(1)),\n\n                        newPopulatedSelect(selected=null, viewKeys=Object.keys(global.get(\"config\").views)){\n                            let selLib = this; //tableLib.viewKeySelect;\n                            return `<select class=\"minimal\" onchange=\"${selLib.onChange}\" >${(() => {\n                                let opts = viewKeys.map(k => `<option ghost-idx=\"${this.idxMap?.get(k)}\" value=\"${k}\" ${k == selected ? \"selected\" : \"\"}>${k}</option>`).join(\"\\n\\t\");\n                                return opts; //node.warn({ optsString: opts }) || \n                            })()}</select>`\n                        },\n\n                        setSelected(row, viewKey){\n                            if(!row || !viewKey) node.error(\"[tabUtils.viewKeySelect.setSelected] invalid arguments\")\n                            if(!row.viewKeySelect) node.warn(\"[tabUtils.viewKeySelect.setSelected] undefined row.viewKeySelct. using empty one\")\n                            let select = HTMLElement.explodeHtml(row.viewKeySelect ?? this.emptySelectHtml);\n                            var options = HTMLSelectElement.explodeOptions(select.innerHtml);\n                            //remove \"select\" from currently selected\n                            options.forEach( opt => opt.attributes = opt.attributes.filter( attr => attr.name != \"selected\" ))\n                            //set \"select\" on 'viewKey' opt\n                            let optToSel = options.find(opt => opt.attributes.find(attr => attr.name==\"value\")?.value==viewKey) ?? node.warn(\"[TabUtils.viewKeySelect.setSelected] no opt with value \"+viewKey) ?? {};\n                            optToSel.attributes.push(HTMLElement.newAttribute(\"selected\"));\n                            //let valOfAttr = (name,str) => (str.match(new RegExp(name+'=\"([^\"]*)\"')) || [])[1]\n                            //options = options.map(opt => `<option ghost-idx=\"${valOfAttr(\"ghost-idx\", opt.tagContent)}\" value=\"${valOfAttr(\"value\", opt.tagContent)}\" ${opt===OptToSel ? \"selected\" : \"\"}>${opt.innerHtml}</option>`)\n                            select.innerHtml = \"\\n\\t\"+options.map(opt => HTMLElement.implodeHtml(opt)).join(\"\\n\\t\")+\"\\n\";\n                            row.viewKeySelect_selected = viewKey;\n                            node.warn({ txt: \"setSelecting \" + viewKey, row: row,sel:select });\n                            return row.viewKeySelect = HTMLElement.implodeHtml(select) //`<select ${select.tagContent}>${options.join(\"\\n\\t\")+\"\\n\"}</select>`;\n                            //return row.viewKeySelect = row.viewKeySelect_element.setSelected(viewKey).updatedHtml;\n                        },\n\n                        toOptionString(explodedOpt,selected=false){\n                            if(!explodedOpt || typeof(explodedOpt.tagContent)!=\"string\") node.error(\"[tabUtils.viewKeySelect.toOptionString] invalid arguments\")\n                            let opt = explodedOpt;\n                            let valOfAttr = (name, str) => (str.match(new RegExp(name + '=\"([^\"]*)\"')) || [])[1]\n                            return `<option ghost-idx=\"${valOfAttr(\"ghost-idx\", opt.tagContent)}\" value=\"${valOfAttr(\"value\", opt.tagContent)}\" ${selected ? \"selected\" : \"\"}>${opt.innerHtml}</option>`;\n                        },\n\n                        explodeOptions(html, isLogOn=false){\n                            if(typeof (html) !== \"string\") return node.error({ err: \"[HTMLSelectElement explodeOptions] argument is invalid\", html: html, args: arguments, e: new TypeError(\"[HTMLElement explodeHtml] argument is invalid\") })\n                            return [...(html.matchAll(/<\\s*option(?:(?<!<\\/option).)+\\s*>/sg) || [])].map(regExpRes => { isLogOn && node.warn({txt:\"creating opt\",from:regExpRes[0], full:regExpRes }); return HTMLElement.explodeHtml(regExpRes[0]) }) //new HTMLOptionElement({ html:regExpRes[0] })  })  //regExpRes is an iterator over [0:fullOptHtml, index:firstCharPos, input:originalString, groups:undefined]\n                        },\n\n                        emptySelectHtml:`<select class=\"minimal\" onchange=\"${this.onChange}\"></select>`,\n\n                        get attributes(){\n                            //node.warn({\"gettingAttrFrom\":this.viewKeySelect})\n                            return { \"class\": \"minimal\", \"onchange\": this.onChange }\n                        },\n                        get options(){\n                            let viewKeys = Object.keys(global.get(\"config\").views);\n                            return []//return viewKeys.map(vk => new HTMLOptionElement(`<option ghost-idx=\"${this.indexTable.indexOf(vk)}\" value=\"${vk}\">${vk}</option>`)) //new HTMLOptionElement({attributes:{\"value\":vk,\"ghost-idx\":idx},innerHtml:vk})\n                        },\n                        get element(){\n                            return {}\n                            return new HTMLSelectElement({ attributes: this.attributes, options: this.options })\n                        },\n                        \n                        newOption(value, idx){\n                            return new HTMLOptionElement(`<option ghost-idx=\"${idx}\" value=\"${value}\">${value}</option>`) //HTMLOptionElement({attributes:[{\"value\":value},{\"ghost-idx\":idx}], innerHtml:value})\n                        }\n                        // ghostedSelect:class gHSE extends HTMLSelectElement {\n                        //     constructor(indexTable){ super()}\n                        // }\n\n\n                        //emptySelectElement: new HTMLSelectElement({ tag: \"select\", attributes: { \"class\": \"minimal\", \"onchange\": this.viewKeySelect.onChange }, innerHtml: \"\" })\n                    },\n\n                    setSelectedView(row, viewKey){\n                        row.viewKeySelect\n                    },\n\n                    // select = new HtmlElement()\n\n                    // selectHtml: (()=>{\n                    //                 let onChange = this.selectOnChange;\n                    //                 return `<select class=\"minimal\" onchange=\"${onChange.replaceAll('\"',\"'\")}\">\n                    //                     ${}\n                    //                 </select>`}\n                    //             )(),\n                    // selectOptions\n\n                    // optionHtml(ghostIndex, text, value=text, selected=false){\n                    //     return `<option ${selected ? 'selected' : \"\"} ghost-idx=${ghostIndex} value=${value}>${text}</option>`\n                    // },\n\n\n                    toOptionsJson(optionHtml){\n                        const isLogOn = false;\n                        //explode element // <tag tagContent> innerHtml </tag>\n                        var [full, tagContent, innerHtml] = optionHtml.match(/<\\s*option([^>]+)>((?:(?!<\\/option>).)*)<\\s*\\/option\\s*>/); //isLogOn && console.log(full, \",\", tagContent, \",\", innerHtml);\n                        //explode attributes from tagContent\n                            //from                  attrName=\"value\"                |   attrName=\"\"                 |    attrName\n                            //to [ full ].concat(   [attrName, value, undefined]    |   [attrName, \"\", undefined]   |   [attrName, undefined, \"\"]   )\n                            //mask      [ full,     attrName,   attrValue,      attrValueIfMissing ]\n                            //of types  [ string,   string,  string|undefined,   undefined|string ]\n                        for (let regExpRes of tagContent.matchAll(/\\s+([^=\\s]+)(?:(?:=\"([^\"]*)\")|())/g)) {\n                            var [full, attrName, attrValue, attrValueIfMissing] = regExpRes;\n                            //console.log(\"full\", full, \"name\", attrName, \" val\", attrValue, \"ifMiss\", attrValueIfMissing);\n                            let a = { \"name\": attrName, \"value\":attrValue ?? \"\", \"isValueMissing\": attrValueIfMissing===undefined ? true : false }\n                        }\n\n                        return { tag:\"option\", attributes:[], innerHtml:innerHtml, html:full }\n                    },\n                },\n            },\n\n        }\n        utils.wrapFunctions(tabUtils,\"[tabUtils]\");\n        flow.set(\"tabUtils\", tabUtils);\n    }) //end nested callWhenDef\n}) //end callWhenDef\n\n/**\n * recursively traverse views.\n * @returns the view at the end of the reference chain or undefined\n */\nfunction getView(viewKey, haystack) {\n    if (typeof haystack[viewKey] == \"string\") {\n        //recurse over a smaller set\n        let slicedSet = Object.assign({}, haystack);\n        delete slicedSet[viewKey];\n        return getView(haystack[viewKey], slicedSet)\n    }\n    else {\n        if (haystack[viewKey] === undefined)\n            node.warn(\"[tabUtils] getView(\" + viewKey + \") \" + (Object.keys(haystack).length ? \"is undefined\" : \" is part of a self-referencing loop\"));\n        return haystack[viewKey]; //self referencing props result in 'undefined'\n    }\n}\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n    * @param {function} cb called once ALL globalName are defined\n    * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n    * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n    * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n    * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n    * @param  {...any} varNames series of strings\n    */ \nfunction callWhenDef(cb, opts, ...varNames){\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if(typeof(cb)==\"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts={}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if(typeof(opts) == \"string\")\n        varNames.push(opts);\n    let { timeout=3000, retryDelay=100, errorCb=null, ctx=\"global\" } = (typeof(opts)==\"string\" ? {} : (opts??{}) );\n    var tout, intv;\n    //switch context to the one specified in ctx\n    var store = ctx===\"global\" ? global : ctx===\"flow\" ? flow : ctx===\"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    \n    //try immediately, before doing any work\n    if(varNames.every(name => store.get(name) !== undefined))\n        return cb();\n    //set timeout unless false or not specified\n    if(timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined), vars:{ctx:ctx} })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if( !varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 1365,
        "wires": [
            []
        ]
    },
    {
        "id": "79a0714c3c392682",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "set flow HTMLElement and derived",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n\nclass HTMLElement {\n    //this should probably be getters and setters that keep isHtmlUpdated updated\n    tag\n    attributes\n    get tagContent(){ return HTMLElement.toTagContent(this.attributes) }\n    innerHtml\n    html\n\n    isHtmlUpdated\n    isLogOn\n        //general rule: arguments received are already updated relatively to each other.\n    constructor({ tag, attributes, innerHtml, html }){\n        const isLogOn = false;\n        if(typeof(arguments[0]) == \"string\")\n            (html = arguments[0])       && (!isLogOn || node.warn(\"setting html to arguments[0]:\"+html+\" ofType:\"+typeof(html)))\n        if( !(html || tag)) node.error(new Error(\"[HTMLElement constructor] either html or tag must be defined. args: \" + Object.keys(arguments[0]).map(k => k+\":\"+arguments[0][k]).join(\", \") ))\n        \n        //convert attributes var to this class's format\n            //accepted:     [{attrName:value},{attrName2:value, attrName3:value}] or {attrName1:value, attrName2:value}\n            //converted to: see this.newAttribute()      \n        if(attributes){\n            let converted = [] \n            //cast 2nd case to 1st\n            if(!Array.isArray(attributes)) \n                attributes = [attributes];\n            //convert\n            attributes.map(group => { isLogOn && node.warn({parsing:group}); Object.keys(group).forEach(key => converted.push(HTMLElement.newAttribute(key, group[key]))) })\n            arguments[0].attributes = converted;\n            isLogOn && node.warn({\"txt\":\"completed conversion\",to:converted, now:attributes, inArgs:typeof(arguments)==\"object\" ? arguments.attributes : \"notInArgs\"})\n        }\n\n        //init props using arguments or retrieve them from html\n        var init;\n        ({ tag:this.tag, attributes:this.attributes=[], innerHtml:this.innerHtml=\"\", html:this.html=null } = init = (!html ? arguments[0] : HTMLElement.explodeHtml(html)));\n        isLogOn && node.warn({ in: \"HTMLElement constructor\", txt: \"variables set to\", varObj: { tag: this.tag, attributes: this.attributes, innerHtml: this.innerHtml, html: this.html }, from: init})    \n\n        //set html using other props if it was not passed among args //assume it's already upToDate otherwise\n        if(!this.html)\n            this.updateHtml(true)\n        this.isHtmlUpdated = true;\n\n        this.isLogOn = true; //falsy: turn off all logging //true: turn on what's explicitly on //>1: turn all on\n    }\n\n    static explodeHtml(html, isLogOn=false){\n        if(typeof(html) !== \"string\") return node.error({err:\"[HTMLElement explodeHtml] argument is invalid\",html:html,args:arguments,e:new TypeError(\"[HTMLElement explodeHtml] argument is invalid\")})\n        //explode element // <tag tagContent> innerHtml </tag>\n        //var [full, tag, tagContent, innerHtml] = [...((html).matchAll(/<\\s*(?<tag>[^\\s]+)([^>]+)>((?:(?!<\\/\\k<tag>>).)*?)<\\s*\\/\\k<tag>\\s*>/sg) || [[]])][0]// ?? [console.error(\"[HTML.. explodeHtml()] failed match for\",html)];\n        var [full, tag, tagContent, innerHtml] = [...((html).matchAll(/<\\s*(?<tag>[^\\s]+)((?:.(?<![^=]>))+)>((?:(?!<\\/\\k<tag>>).)*?)<\\s*\\/\\k<tag>\\s*>/sg) || [[]])][0]// ?? [console.error(\"[HTML.. explodeHtml()] failed match for\",html)];\n        isLogOn //&& console.log(\"[full,tag, tagContent, innerHtml] = \",full, \",\",tag,\",\", tagContent, \",\", innerHtml);\n        \n        //explode attributes from tagContent\n            //from                  attrName=\"value\"                |   attrName=\"\"                 |    attrName\n            //to [ full ].concat(   [attrName, value, undefined]    |   [attrName, \"\", undefined]   |   [attrName, undefined, \"\"]   )\n            //mask      [ full,     attrName,   attrValue,      attrValueIfMissing ]\n            //of types  [ string,   string,  string|undefined,   undefined|string ]\n        var attributes = [];\n        for(let regExpRes of tagContent.matchAll(/\\s+([^=\\s]+)(?:(?:=\"([^\"]*)\")|())/g)) {\n            var [full, attrName, attrValue, attrValueIfMissing] = regExpRes;    isLogOn //&& console.log(\"full\", full, \"name\", attrName, \" val\", attrValue, \"ifMiss\", attrValueIfMissing);\n            attributes.push( { \"name\": attrName, \"value\":attrValue ?? \"\", \"isValueMissing\": attrValueIfMissing===undefined ? false : true } )\n        }\n        \n        return { tag:tag, tagContent:tagContent, attributes:attributes, innerHtml:innerHtml, html:html }\n    }\n\n    //in any object if attributes is defined it takes precedence over tagContent\n    //innerHtml may be an array of explodedHtml \n    static implodeHtml(exploded, isLogOn=false){\n        var tagContent = exploded.attributes ? HTMLElement.toTagContent(exploded.attributes) : exploded.toTagContent\n        var innerHtml = (Array.isArray(exploded.innerHtml)) ? exploded.innerHtml.map(item => \"\\n\\t\"+HTMLElement.implodeHtml(item)).join(\"\\n\\t\")+\"\\n\\t\" : exploded.innerHtml\n        return `<${exploded.tag} ${tagContent}>${innerHtml}</${exploded.tag}>`\n    }\n\n    hasAttribute(name) { return this.getAttribute() !== undefined }\n    getAttribute(name){ // @ts-ignore\n        const isLogOn = (false && this.isLogOn) || this.isLogOn > 1;\n        true && node.warn({ \"retrievingAttr\": name, \"from\": this.attributes, get found(){ return this.attributes.find(attr => attr.name == name)} })\n        return this.attributes.find(attr => attr.name == name) ?? undefined;\n    }\n    getAttributeValue(name){\n        let attr = this.getAttribute(name) ?? {};\n        return attr.value ?? attr.isValueMissing\n    }\n    static newAttribute(name, value){\n        return { \"name\":name, \"value\":\"\"+value ?? \"\", \"isValueMissing\": (value === undefined) ? true : false };\n    }\n    setAttribute(nameOrAttr, value){\n        this.isHtmlUpdated = false;\n        var attr = typeof(nameOrAttr == \"object\") ? nameOrAttr : this.getAttribute(nameOrAttr)\n        if(!attr){\n            this.attributes.push(attr = HTMLElement.newAttribute(nameOrAttr, value))\n            return attr;\n        }\n        else\n            return Object.assign(attr, { \"value\": \"\" + value ?? \"\", \"isValueMissing\": (value === undefined) ? true : false });\n    }\n    removeAttribute(nameOrAttr){  // @ts-ignore\n        const isLogOn = (false && this.isLogOn) || this.isLogOn > 1;\n        this.isHtmlUpdated = false;\n        let attr = typeof (nameOrAttr == \"object\") ? nameOrAttr : this.getAttribute(nameOrAttr)\n        isLogOn && node.warn({\"removing\":attr,\"param\":nameOrAttr,\"from\":this.attributes})\n        let removeIdx = (i,arr) => {arr[i] = arr[arr.length-1]; arr.pop(); return arr}\n        if(attr !== undefined)\n            removeIdx(this.attributes.findIndex(item => item.name == attr.name), this.attributes)\n        return attr !== undefined //was there something to remove ? true : false\n    }\n    static toTagContent(attributes){\n        return attributes.map( attr => attr.name + (attr.isValueMissing ? \"\" : `=\"${attr.value}\"`)).join(\" \")\n    }\n    \n    get updatedHtml(){ return this.updateHtml()}\n    updateHtml(forceUpdate){\n        if(forceUpdate ?? this.isHtmlUpdated){\n            this.isHtmlUpdated = true;\n            this.html = `<${this.tag} ${HTMLElement.toTagContent(this.attributes)}>${this.innerHtml}</${this.tag}>`;\n            //attribute object to 'attrName' | 'attrName=\"attrValue\"'\n            //let attrToString = attr => attr.name+(attr.isValueMissing ? \"\" : '=\"'+attr.value+'\"'); //` ${attr.name}${attr.isValueMissing ? \"\" : `=\"${attr.value}\"`}`;\n            //return this.html = `<${this.tag} ${this.attributes.map(attr => attrToString(attr)).join(\" \")}>${this.innerHtml}</${this.tag}>`;\n        }\n        return this.html;\n    }\n\n}\n\n// function toAttr(attributes){\n//     //convert attributes var to this class's format\n//     //accepted:     [{attrName:value},{attrName2:value, attrName3:value}] or {attrName1:value, attrName2:value}\n//     //converted to: see this.newAttribute()      \n//     let converted = []  \n//     if (typeof attributes == \"object\") //cast 2nd case to 1st\n//         attributes = [attributes];\n//     attributes.map(group => Object.keys(group).forEach(key => converted.push(HTMLElement.newAttribute(key, group[key]))))\n//     return converted;\n// }\n\nclass HTMLSelectElement extends HTMLElement {\n    // tag\n    // attributes\n    // innerHtml\n    // html\n    options\n\n    // isHtmlUpdated\n    // isLogOn\n    //#isInnerHtmlUpdated\n    _isInnerHtmlUpdated\n    get isInnerHtmlUpdated(){ return this._isInnerHtmlUpdated }\n    set isInnerHtmlUpdated(val){ this._isInnerHtmlUpdated=val; if(!val) this.isHtmlUpdated = false }\n\n    constructor({ attributes, options, innerHtml, html }){\n        const isLogOn = false;\n        // if(typeof(arguments[0]) == \"string\")\n        //     (html = arguments[0])       && (!isLogOn || node.warn(\"[HTMLSelectElement] setting html to arguments[0]:\" + html))\n        \n        //align options and innerHtml to each other\n        if(options && !innerHtml) // @ts-ignore\n            var innerHtml = options.map(opt => opt.updateHtml()).join(\"\\n\\t\") + \"\\n\";\n        else if(!options && innerHtml)\n            var options = HTMLSelectElement.explodeOptions(innerHtml);\n        isLogOn && node.warn({ txt: \"aligned opt and inner \", opt: options, inner: innerHtml, willCallSuperWith:arguments })\n        \n\n        //super({ html:html ?? `<select ${ HTMLElement.toTagContent(toAttr(attributes)) }>${innerHtml}</select>` });\n        typeof(arguments[0])==\"string\" ? super(arguments[0]) : super({tag:\"select\", attributes, innerHtml, html});\n        isLogOn && node.warn({txt:\"created super() of select\", halfInited:this});\n        this.options = options ?? HTMLSelectElement.explodeOptions(this.innerHtml)\n        \n        this.isInnerHtmlUpdated = true;\n    }\n\n    updateInnerHtml(forceUpdate){\n        if(forceUpdate ?? this.isInnerHtmlUpdated){\n            this.isInnerHtmlUpdated = true;\n            return this.innerHtml = this.options.map(opt => opt.updateHtml()).join(\"\\n\\t\")+\"\\n\";\n        }\n    }\n    \n    updateHtml(forceUpdate){\n        this.updateInnerHtml(forceUpdate);\n        return super.updateHtml(forceUpdate);\n    }\n\n    setSelected(valueOrOpt){\n        this.isInnerHtmlUpdated = false;\n        let toSelect = (typeof(valueOrOpt)==\"object\" && valueOrOpt.prototype instanceof HTMLOptionElement) ? valueOrOpt : this.options.find( opt => opt.value == valueOrOpt)\n        this.options.forEach( opt => (opt === toSelect) ? opt.setAttribute(\"selected\") : opt.removeAttribute(\"selected\"))\n        return this;\n    }\n\n    //tested on select html or options-only html //shuould work even on a whole page's html\n    static explodeOptions(html, isLogOn=false){\n        if(typeof (html) !== \"string\") return node.error({ err: \"[HTMLSelectElement explodeOptions] argument is invalid\", html: html, args: arguments, e: new TypeError(\"[HTMLElement explodeHtml] argument is invalid\") })\n        return [...(html.matchAll(/<\\s*option(?:(?<!<\\/option).)+\\s*>/sg) || [])].map(regExpRes => { isLogOn && node.warn({txt:\"creating opt\",from:regExpRes[0], full:regExpRes }); return new HTMLOptionElement({ html:regExpRes[0] })  })  //regExpRes is an iterator over [0:fullOptHtml, index:firstCharPos, input:originalString, groups:undefined]\n    }\n\n    // implemented in HTMLOptionElement\n    // getOptionValue(opt){\n    //     opt.getAttribute(\"value\") ?? opt.innerHtml\n    // }\n    hasOption(value) { return this.getOption() !== undefined }\n    getOption(value) {  // @ts-ignore\n        const isLogOn = (false && this.isLogOn) || this.isLogOn > 1;\n        isLogOn && node.warn({\"options is\":this.options, lookingFor:value, found:this.options.find(opt => opt.value == value) ?? undefined})\n        return this.options.find(opt => opt.value == value) ?? undefined;\n    }\n    // newOption(name, value){\n    //     this.isInnerHtmlUpdated = false;\n    //     var newOpt = { \"name\":name, \"value\":\"\"+value ?? \"\", \"isValueMissing\": value===undefined ? true : false };\n    //     if(this.hasOption(name))\n    //         newOpt = this.setOption(name, value);\n    //     else\n    //         this.options.push(newOpt)\n    //     return newOpt;\n    // }\n    // setOption(valueOrOpt, value){\n    //     this.isInnerHtmlUpdated = false;\n    //     let opt = typeof(valueOrOpt == \"object\") ? valueOrOpt : this.getOption(valueOrOpt)\n    //     return (opt===undefined) ? this.newOption(valueOrOpt, value) : Object.assign(opt, { \"value\":\"\"+value ?? \"\", \"isValueMissing\": value===undefined ? true : false } )\n    // }\n    removeOption(valueOrOpt){\n        this.isInnerHtmlUpdated = false;\n        let opt = typeof (valueOrOpt == \"object\") ? valueOrOpt : this.getOption(valueOrOpt)\n        let removeIdx = (i,arr) => {arr[i] = arr[arr.length-1]; arr.pop(); return arr}\n        if(opt !== undefined)\n            removeIdx(this.options.findIndex(item => item.value == opt.value), this.options)\n        return opt !== undefined //was there something to remove ? true : false\n    }\n}\n\nclass HTMLOptionElement extends HTMLElement {\n    // tag\n    // attributes\n    // innerHtml\n    // html\n\n    // isHtmlUpdated\n    // isLogOn\n\n    get value() { return (this.getAttribute(\"value\")??{}).value ?? this.innerHtml }\n    set value(val) { this.setAttribute(\"value\", val) }\n\n    constructor ({ tag, attributes, innerHtml, html }){\n        if(typeof (arguments[0]) == \"string\")   // @ts-ignore\n            var html = arguments[0];\n        super({ tag, attributes, innerHtml, html });\n        false && node.warn({txt:\"created HTMLopt\",opt:this});\n    }\n    \n    getValue() { return this.value }\n    setValue(val) { return this.value = val; }\n}\n\nlet classes = [\n    HTMLElement,\n    HTMLOptionElement,\n    HTMLSelectElement\n]\n\nlet ownPropNames = obj => Object.getOwnPropertyNames(obj).filter(name => ![\"name\", \"length\", \"prototype\"].includes(name)).concat(Object.getOwnPropertyNames(obj.prototype).filter(name => ![\"constructor\"].includes(name)))\nownPropNames(classes[0])\nlet defClassOn = (on,cls) => {\n    on[cls.name] = cls;\n    let props = {}; ownPropNames(cls).forEach(name => props[name] = typeof( cls[name] ?? cls.prototype[name] ));\n    on[cls.name + \"_props\"] = props;\n    return on;\n}\n//define global holding them all\nlet html = {};\nclasses.forEach(cls => html[cls.name]=cls)\n//classes.forEach( cls => defClassOn(html, cls))\nglobal.set(\"html\", html)\n//define singularly on flow\nclasses.forEach( cls => flow.set(cls.name, cls) )\n\n//let text = classes.map( cls => \"CLASS \"+cls.name+\": \"+ownPropNames(cls).join(' & ') ).join(' | ')\nnode.status({ fill: \"green\", text: \"\" });\n\n\n//TESTS\n\nlet doTests = false, afterDelay=100;\nif(doTests){\n    setTimeout( ()=>{\n        node.warn(\"TESTING HTML CLASSES\")\n\n    \n        // var el = new HTMLElement('<div class=\"someClass\" >text</div>');\n        // let opt='<option value=\"5\"></option>';\n\n        // {node.warn(\"BEGIN TESTING HTMLELEMENT\");\n        // //define test suite\n        //     //return a test-function\n        var hasAttr = (name, value = \"doNotCheck\") => (el => { let attr = el.getAttribute(name); return !!attr && (\"doNotCheck\" == value || ((value ?? \"missing\") ? attr.isValueMissing : attr.value === value)) })\n        // let commonHasAttr = el => hasAttr(\"someattr\",14)(el) && hasAttr(\"scnd\",\"wal\")(el) && hasAttr(\"thrd\",\"val\")(el)\n        //     //common test-functions\n        // let shared = [ el=>Object.keys(el).every(k => el[k]!==undefined), el=>el.isHtmlUpdated, el => el.isInnerHtmlUpdated !== false]\n        //     //test suite\n        //         //pairs of [ [...argsToPass], [testFun, testFun,..]]\n        // let toCheck=[\n        //     [['<select class=\"minimal\" ></select>'], ...shared, el => el.attributes.length == 1, el => el.innerHtml === \"\", hasAttr(\"class\",\"minimal\")]\n        //     , [[{ html: '<select class=\"minimal\" ></select>' }], ...shared, el => el.attributes.length == 1, el => el.innerHtml === \"\", hasAttr(\"class\", \"minimal\")]\n        //     , [[{ html: '<select class=\"minimal\" >someInnerText</select>' }], ...shared, el => el.innerHtml.match(\"<\"), hasAttr(\"class\", \"minimal\")]\n        //     , [[{ html: `<select class=\"minimal\" >\n        //                     < option ghost-idx=\"0\" value=\"SMED1\">F1</option >\n        //                     < option ghost-idx=\"1\" value=\"SMED2\">G</option >\n        //                     <option ghost-idx=\"2\" value=\"SMED2\">H</option>\n        //                 </select>`\n        //         }],...shared, el => el.attributes.length==1]\n        //     , [[{ tag: \"select\", attributes: [{ someattr: 14 }, { scnd: \"wal\", thrd: \"val\" }], innerHtml: \"someInnerText\" }], ...shared, el => el.attributes.length == 3, el => el.innerHtml === \"someInnerText\", commonHasAttr]\n        //     , [[{ tag: \"select\", attributes: { someattr: 14, moreattr: \"str\" }, innerHtml: \"someInnerText\" }], ...shared, el => el.attributes.length == 2, el => el.innerHtml === \"someInnerText\", commonHasAttr]\n        //     , [[{ tag: \"select\", innerHtml: \" someInnerText \" }], ...shared, el => el.attributes.length == 0, el => el.innerHtml === \"\",]\n        //     , [[{ tag: \"select\" }], ...shared, el => el.attributes.length == 0, el=>el.innerHtml === \"\"]\n            \n        // ]\n        // //check test suite\n        // {let i=0\n        // for(let pair of toCheck){\n        //     let [args, ...tests] = pair;\n        //     node.warn({txt:\"#\"+(1+i++)+\" CALLING NEW HTMLElement(..)\",args:args});\n        //     // @ts-ignore\n        //     var el = new HTMLElement(...args);\n        //     // let tests = [\n        //     //     Object.keys(select).every(k => select[k] !== undefined)\n        //     //     // ,(()=>{ let el = new HTMLElement({tag:select.tag,attributes:select.attributes, options:select.options })\n        //     //     //     return el.updatedHtml == select.html && el.html==select.updatedHtml\n        //     //     // })()\n        //     // ]\n        //     // @ts-ignore\n        //     let passed = tests.every(t => t(el));   // @ts-ignore\n        //     node[passed ? \"warn\" : \"error\"]({txt:\"#\"+(i)+\" RESULTS\", withArgs:args, res:el, sharedTests:shared.map(t => t(el)), othTests:tests.slice(shared.length-1).map(t => t(el))});\n        // }}\n        // node.warn(\"\\nTESTED HTMLElement CLASS \\n\")\n        // }\n\n        let ell = new HTMLElement({tag:\"div\"})\n        ell.attributes.push(HTMLElement.newAttribute(\"name\",\"val\"));\n        node.warn({txt:\"direct test\",el:ell,attributes:ell.attributes, has:hasAttr(\"name\",\"val\")(ell)})\n\n        {node.warn(\"BEGIN TESTING HTMLSelectElement\")\n        //define test suite\n        //return a test-function\n        let hasAttr = (name, value = \"doNotCheck\") => el => { let attr = el.getAttribute(name); return !!(attr && (value == \"doNotCheck\" || (value === null ? attr.isValueMissing : attr.value == value))) }\n        let commonHasAttr = el => hasAttr(\"someattr\", 14)(el) && hasAttr(\"scnd\", \"wal\")(el) && hasAttr(\"thrd\", \"val\")(el)\n        //common test-functions\n        let shared = [el => Object.keys(el).every(k => el[k] !== undefined), el => el.isHtmlUpdated, el => el.isInnerHtmlUpdated !== false]\n        \n        let idxTable = [\"SMED1\",\"SMED2\",\"SMED3\"];\n        let hasOpt = (value) => { return el => {let opt=el.getOption(value); return !!opt }}//&& opt.getAttribute(\"ghost-idx\") == idxTable.indexOf(value)})\n        let ghostMatch = (value) => { return el => !!el.getOption(value) && el.getOption(value).getAttributeValue(\"ghost-idx\") == idxTable.indexOf(value) }\n            //let commonHasOpt = [el => idxTable.map(v => hasOpt(v)).every(cb => cb(el))] // { return ((node.error(\"got at the beginning\") || true) && el.options && (node.error(\"got after el.opt\") || true) && hasOpt(\"SMED1\")(el) && (node.error(\"got after SMED1\") || true) && hasOpt(\"SMED2\")(el) && hasOpt(\"SMED3\")(el) && (node.error(\"got at the end\")||true))};\n            let commonHasOpt = (()=>{   let arr=idxTable.map(val => [el => \"for \" + val + \":\", hasOpt(val),ghostMatch(val)]).flat(); node.warn({ arr: arr}); return arr; })()\n                                // { return ((node.error(\"got at the beginning\") || true) && el.options && (node.error(\"got after el.opt\") || true) && hasOpt(\"SMED1\")(el) && (node.error(\"got after SMED1\") || true) && hasOpt(\"SMED2\")(el) && hasOpt(\"SMED3\")(el) && (node.error(\"got at the end\") || true)) };\n        //TESTING SINGLE OPTION METHODS\n        // var opt = new HTMLOptionElement('< option ghost-idx=\"0\" value=\"SMED1\">F1</option >')\n        // node.warn({txt:\"getting opt val\",opt:opt,val:opt.value,check:opt.value==\"SMED1\"})\n        // {let val=opt.getAttribute(\"ghost-idx\").value}\n        // node.warn({txt:\"getting opt ghost\",opt:opt,val:opt.getAttribute(\"ghost-idx\"), check:opt.value==\"SMED1\"})\n        \n        //test suite\n        //pairs of [ [...argsToPass], [testFun, testFun,..]]\n        let toCheck = [\n            [['<select class=\"minimal\" ></select>'], [...(shared),     el => el.attributes.length == 1,    el => el.innerHtml === \"\",  hasAttr(\"class\", \"minimal\")]]\n            , [[{ html: '<select class=\"minimal\" ></select>' }], [...(shared), el => el.attributes.length == 1, el => el.innerHtml === \"\", hasAttr(\"class\", \"minimal\")]]\n            // , [[`<select class=\"minimal\" >\n            //                 < option ghost-idx=\"0\" value=\"SMED1\">F1</option >\n            //                 < option ghost-idx=\"1\" value=\"SMED2\">G</option >\n            //                 <option ghost-idx=\"2\" value=\"SMED3\">H</option>\n            //             </select>`], [...shared, el => el.innerHtml.match(\"<\"), hasAttr(\"class\", \"minimal\"), ...commonHasOpt]]\n            , [[{html: `<select class=\"minimal\" >\n                            < option ghost-idx=\"0\" value=\"SMED1\">F1</option >\n                            < option ghost-idx=\"1\" value=\"SMED2\">G</option >\n                            <option ghost-idx=\"2\" value=\"SMED3\">H</option>\n                        </select>`\n                    }], [...shared, el => el.attributes.length == 1,  el => !!el.innerHtml.match(\"<\"), ...commonHasOpt]]\n            , [[{attributes: [{ someattr: 14 }, { scnd: \"wal\", thrd: \"val\" }], innerHtml: `\n                            < option ghost-idx=\"0\" value=\"SMED1\">F1</option >\n                            < option ghost-idx=\"1\" value=\"SMED2\">G</option >\n                            <option ghost-idx=\"2\" value=\"SMED3\">H</option>`\n                    }], [...shared, el => el.attributes.length == 3, el => !!el.innerHtml.match(\"<\"), commonHasAttr, ...commonHasOpt]]\n            , [[{attributes: [{ someattr: 14 }, { scnd: \"wal\", thrd: \"val\" }], options: HTMLSelectElement.explodeOptions(`\n                            < option ghost-idx=\"0\" value=\"SMED1\">F1</option >\n                            < option ghost-idx=\"1\" value=\"SMED2\">G</option >\n                            <option ghost-idx=\"2\" value=\"SMED3\">H</option>`\n                    )}], [...shared, el => el.attributes.length == 3, el => !!el.innerHtml.match(\"<\"), commonHasAttr, ...commonHasOpt]]\n            // , [[{ attributes: { someattr: 14, moreattr: \"str\" }, options:], [...shared, el => el.attributes.length == 2, el => el.innerHtml === \"someInnerText\", commonHasAttr]]\n            // , [[{ innerHtml: \" someInnerText \" }], [...shared, el => el.attributes.length == 0, el => el.innerHtml === \"\",]]\n            // , [[{ }], [...shared, el => el.attributes.length == 0, el => el.innerHtml === \"\"]]\n\n        ]\n        //check test suite\n        {\n            let i = 0\n            for (let pair of toCheck) {\n                let [args, tests] = pair;\n                node.warn({ txt: \"#\" + (1 + i++) + \" CALLING NEW HTMLElement(..)\", args: args });\n                // @ts-ignore\n                var el = new HTMLSelectElement(...args);\n                // let tests = [\n                //     Object.keys(select).every(k => select[k] !== undefined)\n                //     // ,(()=>{ let el = new HTMLElement({tag:select.tag,attributes:select.attributes, options:select.options })\n                //     //     return el.updatedHtml == select.html && el.html==select.updatedHtml\n                //     // })()\n                // ]\n                // @ts-ignore\n                let passed = tests.every(t => t(el));\n                node[passed ? \"warn\" : \"error\"]({ txt: \"#\" + (i) + \" RESULTS\", withArgs: args, res: el, sharedTests: shared.map(t => t(el)), othTests: tests.slice(shared.length).map(t => t && t(el)) });\n            }\n        }\n        //check identity\n        node.warn(\"identity check\")\n        {let fromHtml = new HTMLSelectElement(`<select class=\"minimal\" >\n                            < option ghost-idx=\"0\" value=\"SMED1\">F1</option >\n                            < option ghost-idx=\"1\" value=\"SMED2\">G</option >\n                            <option ghost-idx=\"2\" value=\"SMED3\">H</option>\n                        </select>`)\n        let fromOpts = new HTMLSelectElement({tag:fromHtml.tag, attributes:fromHtml.attributes.map(attr => {return {[attr.name]:attr.value}}), options:fromHtml.options})\n        \n        let passed = [\"html\", \"innerHtml\", \"updatedHtml\",\"updatedInnerHtml\"].map(prop => fromHtml[prop] == fromOpts[prop]).concat( \n            [fromHtml.options.length==fromOpts.options.length, fromHtml.options.map(opt => fromOpts.options.hasOpt(opt.value))]\n        )\n        node[passed.every(t=>t) ? \"warn\" : \"error\"]({ txt: \"identity check\", fromHtml:fromHtml, fromArgs:fromOpts,passed:passed });\n        }\n        node.warn(\"\\nTESTED HTMLSelectElement CLASS \\n\")\n        }\n\n        \n\n        node.warn(\"END OF TESTING FOR HTML CLASSES\")\n    }, afterDelay)\n}\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n    * @param {function} cb called once ALL globalName are defined\n    * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n    * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n    * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n    * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n    * @param  {...any} varNames series of strings\n    */ \nfunction callWhenDef(cb, opts, ...varNames){\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if(typeof(cb)==\"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts={}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if(typeof(opts) == \"string\")\n        varNames.push(opts);\n    let { timeout=3000, retryDelay=100, errorCb=null, ctx=\"global\" } = (typeof(opts)==\"string\" ? {} : (opts??{}) );\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx===\"global\" ? global : ctx===\"flow\" ? flow : ctx===\"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if(varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if(timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if( !varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 645,
        "y": 1365,
        "wires": [
            []
        ]
    },
    {
        "id": "a363c59d7783bf61",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "about fallbackGUIVars",
        "info": "fallbackGUIVars holds both the failsafe JSON and some\n    handling functions that are always injected into new GUIVars instances\nthe functions are restored by <root>.inflate( ), as they cannot be stored in \n    a json file.\n\nread global.utils.genericInflater() for more info",
        "x": 360,
        "y": 1155,
        "wires": []
    },
    {
        "id": "e075684bb4144690",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "95f61ab7d0989272",
        "name": "allFlow isDefinedEvent",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/** alternative to using link-nodes on libraries (which requires a ton of overhead and structures)\n*/\ncallWhenDef(\n    ()=>{\n        node.send({topic:\"isDefinedEvent\", payload:\"allFlow\"})\n    },{ //options\n        retryDelay:250,\n        timeout:6000,\n        errorCb:()=>node.error(new Error(\"callWhenDef Timedout for allFlow isDefinedEvent.\"))\n    }, //flowVars\n    \"tabUtils\",\"generateGUIVars\", \"converters\", \"editedConfig\"\n)\n\n\n\n\n/** @summary repeatedly tries to fetch all flowNames with flow.get(). \n        * @param {function} cb called once ALL flowName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first flowName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} flowNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...flowNames) {\n    if (typeof (opts) == \"string\")\n        flowNames.push(opts);\n    let { timeout: timeout = 3000, retryDelay: retryDelay = 100, errorCb: errorCb = null } = (typeof (opts) == \"string\" ? opts : {});\n    var tout, intv;\n\n    //immediately try, before doing any work\n    if (flowNames.every(name => flow.get(name) !== undefined))\n        return cb();\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: flowNames.map(name => flow.get(name) !== undefined)  })\n        }, timeout);\n    }\n    //set flow-checking interval\n    intv = setInterval(() => {\n        if (!flowNames.every(name => flow.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1470,
        "wires": [
            [
                "0dbff804eb414d31"
            ]
        ]
    },
    {
        "id": "0dbff804eb414d31",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "95f61ab7d0989272",
        "name": "allFlow isDefinedEvent out",
        "mode": "link",
        "links": [
            "f51d8d2491c17cec",
            "e3f9871e90a75df4",
            "842017b9a006b707",
            "eef3ec8694a874b2",
            "9e8a211bdf2c9810"
        ],
        "x": 635,
        "y": 1470,
        "wires": [],
        "l": true
    },
    {
        "id": "f51d8d2491c17cec",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "95f61ab7d0989272",
        "name": "allFlow isDefinedEvent out",
        "links": [
            "0dbff804eb414d31"
        ],
        "x": 805,
        "y": 1470,
        "wires": [
            []
        ]
    },
    {
        "id": "0bde5f208c7767e2",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "95f61ab7d0989272",
        "name": "log \"definitions completed\"",
        "func": "node.log(\"configPage allFlow isDefinedEvent\");\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 745,
        "y": 1515,
        "wires": [
            []
        ]
    },
    {
        "id": "842017b9a006b707",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "95f61ab7d0989272",
        "name": "allFlow isDefinedEvent out",
        "links": [
            "0dbff804eb414d31"
        ],
        "x": 565,
        "y": 1515,
        "wires": [
            [
                "0bde5f208c7767e2"
            ]
        ]
    },
    {
        "id": "d5d7a53759c109f7",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "GLOBALS and LOCALS",
        "info": "",
        "x": 370,
        "y": 1065,
        "wires": []
    },
    {
        "id": "e08bdfe9e8e5ead3",
        "type": "ui_template",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "group": "",
        "name": "config page style",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<style>\n   .machine-config.config-label {\n      position:relative;\n      top:20px;\n      padding-left:5px;\n      font-weight:bold;\n      \n   }\n\n   body {\n      --kitten:miao;\n   }\n   \n   /*----- checkbox as animated switch -------\n   //@supports (-webkit-appearance: none) or (-moz-appearance: none) { */\n      input[type='checkbox'].switchify {\n         --active: #275EFE;\n         --active-inner: #fff;\n         --focus: 2px rgba(39, 94, 254, .3);\n         --border: #BBC1E1;\n         --border-hover: #275EFE;\n         --background: #fff;\n         --disabled: #F6F8FF;\n         --disabled-inner: #E1E6F9;\n         -webkit-appearance: none;\n         -moz-appearance: none;\n         height: 1.5em;//21px;\n         outline: none;\n         display: inline-block;\n         vertical-align: top;\n         position: relative;\n         margin: 0;\n         cursor: pointer;\n         border: 1px solid var(--bc, var(--border));\n         background: var(--b, var(--background));\n         -webkit-transition: background .3s, border-color .3s, box-shadow .2s;\n         transition: background .3s, border-color .3s, box-shadow .2s;\n      }\n      input[type='checkbox'].switchify:after {\n         content: '';\n         display: block;\n         left: 0;\n         top: 0;\n         position: absolute;\n         -webkit-transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);\n         transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);\n         transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s);\n         transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);\n      }\n      input[type='checkbox'].switchify:checked {\n         --b: var(--active);\n         --bc: var(--active);\n         --d-o: .3s;\n         --d-t: .6s;\n         --d-t-e: cubic-bezier(.2, .85, .32, 1.2);\n      }\n      input[type='checkbox'].switchify:hover:not(:checked):not(:disabled) {\n         --bc: var(--border-hover);\n      }\n      input[type='checkbox'].switchify:focus {\n         box-shadow: 0 0 0 var(--focus);\n      }\n      input[type='checkbox'].switchify + label {\n         //font-size: 14px;\n         line-height: 1.5em;//21px;\n         display: inline-block;\n         vertical-align: top;\n         cursor: pointer;\n         margin-left: 4px;\n      }\n      input[type='checkbox'].switchify.switch {\n         width: 2.8em; //38px;\n         border-radius: 11px;\n      }\n      input[type='checkbox'].switchify.switch:after {\n         left: 2px;\n         top: 2px;\n         border-radius: 50%;\n         width: 1em;//15px;\n         height: 1em;//15px;\n         background: var(--ab, var(--border));\n         -webkit-transform: translateX(var(--x, 0));\n         transform: translateX(var(--x, 0));\n      }\n      input[type='checkbox'].switchify.switch:checked {\n         --ab: var(--active-inner);\n         --x: 17px;\n      }\n   /*}*/\n\n   .table-button{\n      text-align:center;\n      vertical-align:middle;\n      color:inherit;\n      border:none;\n      margin: auto auto;\n      font-size:130%;\n   }\n   .adminUI .table-button.delete{ margin-top:-0.2em; }\n   .table-button.delete:hover {\n      color:skyblue;\n   }\n\n   /*------- table select - style 'minimal' ------------*/\n\n   select {\n        /* styling */\n        background-color: white;\n        border: thin solid blue;\n        border-radius: 4px;\n        display: inline-block;\n        font: inherit;\n        line-height: 1.5em;\n        padding: 0.5em 3.5em 0.5em 1em;\n\n        width:100%; /* fit tabulator cell*/\n\n        /* reset */\n\n        margin: 0;      \n        -webkit-box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        box-sizing: border-box;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n    }\n\n    select.minimal {\n        background-image:\n            linear-gradient(45deg, transparent 50%, gray 50%),\n            linear-gradient(135deg, gray 50%, transparent 50%),\n            linear-gradient(to right, #ccc, #ccc);\n        background-position:\n            calc(100% - 20px) calc(1em + 2px),\n            calc(100% - 15px) calc(1em + 2px),\n            calc(100% - 2.5em) 0.5em;\n        background-size:\n            5px 5px,\n            5px 5px,\n            1px 1.5em;\n        background-repeat: no-repeat;\n    }\n\n    select.minimal:focus {\n        background-image:\n            linear-gradient(45deg, green 50%, transparent 50%),\n            linear-gradient(135deg, transparent 50%, green 50%),\n            linear-gradient(to right, #ccc, #ccc);\n        background-position:\n            calc(100% - 15px) 1em,\n            calc(100% - 20px) 1em,\n            calc(100% - 2.5em) 0.5em;\n        background-size:\n            5px 5px,\n            5px 5px,\n            1px 1.5em;\n        background-repeat: no-repeat;\n        border-color: green;\n        outline: 0;\n    }\n\n\n    select:-moz-focusring {\n        color: transparent;\n        text-shadow: 0 0 0 #000;\n    }\n        \n</style>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 1010,
        "y": 1530,
        "wires": [
            []
        ]
    },
    {
        "id": "01be4abb1326a3c7",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "TODO: fallbk use conv",
        "info": "the fallback definitions should use the conversion function instead of duplicating them",
        "x": 600,
        "y": 1155,
        "wires": []
    },
    {
        "id": "6a3fef6221e37c8c",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "set flow.fallbackGUIVars & flow.converters",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "callWhenDef(\"signalCells\", \"config\", \"html\",()=>{\n    callWhenDef(\"tabUtils\",{ctx:\"flow\", timeout:15000}, ()=>{\n        const signalCells = global.get(\"signalCells\");\n        const config = global.get(\"config\");\n        const tabUtils = flow.get(\"tabUtils\");\n        const HTMLSelectElement = getHtmlClass(\"HTMLSelectElement\");\n        const HTMLElement = getHtmlClass(\"HTMLElement\");\n        let signalKeys = signalCells.dictionary.signalKeys;\n        let macKeys = signalCells.dictionary.macKeys;\n\n        let configRef = config;\n        flow.set(\"converters\",{\n            // machineConfigGUI: (()=>{\n            //     let cfg=config.machines;\n            //     let ret = new DefaultedMap( (macKey, varName, value) => cfg[][varName]=value && node.warn({txt:\"using default conversion\",args:[varName,value,cfg]}) )\n            //     ret.toConfig = function (macKey, varName, value){\n                    \n            //     }\n            // })(varNames)\n            //convs:{\n                machineConfigGUI:{\n                    updateConfigFor(macKey, varName, value, config = configRef){\n                        const converter = flow.get(\"converters\").machineConfigGUI.toConfig;\n                        const GUIVars = flow.get(\"GUIVars\");\n                        if(converter[varName]){\n                            let res;\n                            //node.warn([\"with \",arguments, \" cfgSetTo \",config.machines[macKey]]);\n                            return converter[varName]( GUIVars.machines[macKey], config.machines[macKey] );\n                        }else{\n                            node.warn(\"[GUIVar converter]:implicit conversion for \"+varName+ \" in machineConfigGUI\");\n                            return config.machines[macKey][varName] = value;\n                        }\n                    },\n                    toConfig: {\n                        cellHeaderText: (GUIVar, cfg) => cfg.cellHeaderText = GUIVar.cellHeaderText,\n\n                        toA3Timeout_value: (GUIVar, cfg) => cfg.toA3Timeout = toMs(GUIVar.toA3Timeout_value, GUIVar.toA3Timeout_unit),\n                        toA3Timeout_unit: function (GUIVar, cfg){ return this.toA3Timeout_value(GUIVar, cfg) },\n\n                        toA4Timeout_value: (GUIVar, cfg) => cfg.toA4Timeout = toMs(GUIVar.toA4Timeout_value, GUIVar.toA4Timeout_unit),\n                        toA4Timeout_unit: function (GUIVar, cfg) { return this.toA4Timeout_value(GUIVar, cfg) },\n\n                        initCellSignalKey_dropdown: (GUIVar, cfg) => cfg.initCellSignalKey = (sk => sk == \"custom\" ? \"noop\" : sk)(GUIVar.initCellSignalKey_dropdown),\n                        //initCellSignalKey_color: undefined,\n                        //initCellSignalKey_backgroundColor: undefined,\n\n                        initTowerBits_switchValue: (GUIVar, cfg) => {\n                            let swVal = GUIVar.initTowerBits_switchValue;\n                            cfg.initTowerBits.redLight = (swVal == \"red\" || swVal == \"both\") ? true : false;\n                            cfg.initTowerBits.greenLight = (swVal == \"green\" || swVal == \"both\") ? true : false;\n                            return cfg.initTowerBits;\n                        },\n                        \n                        blinkIntv_period: (GUIVar, cfg) => {\n                            let period = GUIVar.blinkIntv_period, ratio = GUIVar.blinkIntv_offtimeRatio;\n                            cfg.blinkIntvOn = Math.round( (1 - ratio) * period );\n                            cfg.blinkIntvOff = Math.round( ratio * period );\n                            return { blinkIntvOn:cfg.blinkIntvOn, blinkIntvOff:cfg.blinkIntvOff}\n                        },\n                        blinkIntv_offtimeRatio: function (GUIVar, cfg) { return this.blinkIntv_period(GUIVar, cfg) },\n                    },\n                    toGUIVar: {\n                        cellHeaderText: (cfg) => cfg.cellHeaderText,\n                        toA3Timeout_value: (cfg) => msTo(cfg.toA3Timeout, \"min\"),\n                        toA3Timeout_unit: undefined,\n                        toA4Timeout_value: (cfg) =>  msTo(cfg.toA4Timeout, \"min\", 1),\n                        toA4Timeout_unit: undefined,\n                        initCellSignalKey_dropdown: (cfg) => (sk => sk == \"noop\" ? \"custom\" : sk)(cfg.initCellSignalKey),\n                        initCellSignalKey_color: undefined,\n                        initCellSignalKey_backgroundColor: undefined,\n                        initTowerBits_switchValue: (cfg) => (init => init.greenLight ? (init.redLight ? \"both\" : \"green\") : (init.redLight ? \"red\" : \"off\"))(cfg.initTowerBits),\n                        blinkIntv_period: (cfg) => cfg.blinkIntvOff + cfg.blinkIntvOn,\n                        blinkIntv_offtimeRatio: (cfg) => toFixedAsNum(cfg.blinkIntvOff / (cfg.blinkIntvOff + cfg.blinkIntvOn), 1)\n                    }\n                },\n                cellsLayoutGUI:{\n                    updateConfigFor(row, col, config = configRef){\n                        let val = flow.get(\"GUIVars\").cellsLayout.varsMatrix[row][col];\n                        config.cellsLayout[row][col] = val==\"empty\" ? null : val;\n                    },\n                    toGUIVar(config){\n                        return config.cellsLayout.map(row => row.map(val => val==null?\"empty\":val ));\n                    }\n                }\n            //},\n\n            // machineConfigGUI:{\n            //     toConfig:function (macKey, varName, value, config = configRef){\n            //         const converter = flow.get(\"converters\").convs.machineConfigGUI.toConfig;\n            //         const GUIVars = flow.get(\"GUIVars\");\n            //         if(converter[varName]){\n            //             node.warn([arguments, \" mach \",config.machines]);\n            //             converter[varName]( GUIVars.machines[macKey], config.machines[macKey] );\n            //         }else{\n            //             node.warn(\"[GUIVar converter]:implicit conversion for \"+varName+ \" in machineConfigGUI\");\n            //             config.machines[macKey][varName] = value;\n            //         }\n            //     }\n            // }\n        })    \n        \n\n\n//------------------------------------------------------------------------------------------------------------------------------\n//        FALLBACK GUIVARS\n//------------------------------------------------------------------------------------------------------------------------------\n\n        const converters = flow.get(\"converters\");\n        //const varNames = [\"toA3Timeout_value\", \"toA3Timeout_value\", \"toA4Timeout_value\", \"toA4Timeout_unit\", \"initCellSignalKey_dropdown\", \"initCellSignalKey_color\", \"initCellSignalKey_backgroundColor\", \"initTowerBits_switchValue\", \"blinkIntv_period\", \"blinkIntv_ratio\"]\n        const varNames = [\n            \"toA3Timeout_value\",\n            \"toA3Timeout_unit\",\n            \"toA4Timeout_value\",\n            \"toA4Timeout_unit\",\n            \"initCellSignalKey_dropdown\",\n            \"initCellSignalKey_color\",\n            \"initCellSignalKey_backgroundColor\",\n            \"initTowerBits_switchValue\",\n            \"blinkIntv_period\",\n            \"blinkIntv_ratio\"\n        ]\n        const toFixedAsNum = (val,p) => {let pow = Math.pow(10,p); return Math.round(val*pow)/pow }\n        // function GUIVarsForSingleMachine(cfg){\n        //     return {\n        //         toA3Timeout_value: toFixedAsNum( msTo(cfg.toA3timeout, \"min\"), 1) ,\n        //         toA3Timeout_unit: \"min\",\n        //         toA4Timeout_value: toFixedAsNum( msTo(cfg.toA3timeout, \"min\"), 1),\n        //         toA4Timeout_unit: \"min\",\n        //         initCellSignalKey_dropdown: (sk => sk == \"noop\" ? \"custom\" : sk)(cfg.initSignalKey),\n        //         initCellSignalKey_color: undefined,\n        //         initCellSignalKey_backgroundColor: undefined,\n        //         initTowerBits_switchValue: (init => { init.greenLight ? (init.redLight ? \"both\" : \"green\") : (init.redLight ? \"red\" : \"off\") })(cfg.initTowerBits),\n        //         blinkIntv_period: cfg.blinkIntvOff + cfg.blinkIntvOn,\n        //         blinkIntv_ratio: Math.round((cfg.blinkIntvOff / cfg.blinkIntvOff + cfg.blinkIntvOn)*10)/10,\n        //     }\n        // }\n        flow.set(\"fallbackGUIVars\", {\n            // inflate(target){\n            //     const inflate=function inflate(obj){\n            //         if(obj.inflate)\n            //             return obj.inflate(obj)\n            //         else{\n            //             for(let key in obj)\n            //                 if(typeof(obj[key] == \"object\"))\n            //                     obj[key] = inflate(obj[key])\n            //             return obj;\n            //         }\n            //     }\n            //     return inflate(target);\n            // },\n            inflate:function inflate(target){\n                return global.get(\"utils\").genericInflater.call(this, target);\n                // //looks for and calls inflate() methods for all keys\n                //     //recursing over objects\n                // let hasOwnInflater = (obj, k) => obj && obj[k] && obj[k].inflate\n                // for(let k in target){\n                //     //if has inflate method\n                //     if(this && typeof(this[k])==\"object\" && this[k].inflate)\n                //         target[k] = this[k].inflate(target[k]);\n                //     else    //else recurse over object props\n                //         if(typeof(target[k])==\"object\" && this && typeof(this[k])==\"object\")\n                //             inflate.call(this[k], target[k])\n                // }\n                // return target;\n            },\n            \"machines\": (()=>{\n                let ret={};\n                //macKeys.forEach( mk => ret[mk] = GUIVarsForSingleMachine(config.machines[mk]) )\n                for(let mk of macKeys){\n                    let cfg = config.machines[mk];\n                    //mk == \"OMET\" && node.warn({ toA3: cfg.toA3Timeout,cfg:cfg })\n                    ret[mk] = {\n                        cellHeaderText: cfg.cellHeaderText,\n                        toA3Timeout_value: msTo(cfg.toA3Timeout, \"min\", 1),\n                        toA3Timeout_unit: \"min\",\n                        toA4Timeout_value: msTo(cfg.toA4Timeout, \"min\", 1),\n                        toA4Timeout_unit: \"min\",\n                        initCellSignalKey_dropdown: (sk => sk == \"noop\" ? \"custom\" : sk)(cfg.initCellSignalKey),\n                        initCellSignalKey_color: undefined,\n                        initCellSignalKey_backgroundColor: undefined,\n                        initTowerBits_switchValue: (init => init.greenLight ? (init.redLight ? \"both\" : \"green\") : (init.redLight ? \"red\" : \"off\") )(cfg.initTowerBits),\n                        blinkIntv_period: cfg.blinkIntvOff + cfg.blinkIntvOn,\n                        blinkIntv_offtimeRatio: toFixedAsNum(cfg.blinkIntvOff / (cfg.blinkIntvOff + cfg.blinkIntvOn), 1),\n                    }\n                    // let blinktimes = ( function toBlinkTimes(period, offtimeRatio){    return [ period*1000*(1 - offtimeRatio), period*1000*offtimeRatio ]     })(ret[mk].blinkIntv_period, ret[mk].blinkIntv_offtimeRatio)\n                    // mk == \"OMET\" && node.warn({ txt: \"blinkTimes\", bOn: blinktimes[0], bOff:blinktimes[1] })\n                }\n                return ret;\n            })(),\n            //instead than using varNames like other widjets, it uses msg.row and msg.col and stores the GUIVars in a\n                //matrix reflecting the config prop that it's being affected\n            \"cellsLayout\":{\n                nRows: config.cellsLayout.length,\n                nCols: config.cellsLayout[0].length,\n                \n                varsMatrix: converters.cellsLayoutGUI.toGUIVar(config)//.cellsLayout.map(row => row.map( col => col))\n            },\n\n            \"views\":{\n                // //restore GUIVar-like object from it's json reduction\n                // inflate:function (target){\n                //     if(typeof target == \"object\")\n                //         for(let k in this){\n                //             if(typeof(this[k]) == \"function\")\n                //                 target[k] = this[k];\n                //             else\n                //                 target[k] = global.get(\"utils\").genericInflater.call(this[k], target[k])\n                //         }\n                //     //exactIpList_table -> restore HTMLSelectElements\n                //     //self.exactIpList_table = self.exactIpList_table.map( row => row.viewKeySelect_element = new HTMLSelectElement(row.viewKeySelect_element))\n                // },\n                adminUI_table:(()=>{\n                    let ret = [], tableLib = tabUtils.viewsEditor.adminUI;\n                    ret.push(tableLib.newCreatorRow(tabUtils.newRowId(ret)));\n                    for(let vk in config.views){\n                        let row = tabUtils.viewsEditor.adminUI.newRow( tabUtils.newRowId( ret ) )\n                        tabUtils.viewsEditor.adminUI.setRowToView(row, vk, config.views)\n                        if(vk == \"default\")\n                            row.deleteButton = \"\";\n                        ret.push(row);\n                    }\n                    return ret;\n                })(),\n                //[ vk, vk, .. ]\n                //copycats: Object.keys(config.views).filter( vk => typeof(config.views[vk]) == \"string\" ),\n                                                            // @ts-ignore\n                //does not survive JSONification//exactIpList_viewKeySelect_idxMap: tabUtils.viewsEditor.exactIpList.viewKeySelect.idxMap,//new Map( Object.keys(global.get(\"config\").views).map((key,idx) => [[idx, key],[key, idx]]).flat(1) ),\n\n                exactIpList_table: (() => {\n                    var ret = [];\n                    let tableLib = tabUtils.viewsEditor.exactIpList;\n                    let viewKeys = Object.keys(config.views);   // @ts-ignore\n                    const idxMap = new Map(viewKeys.map((key, idx) => [[idx, key], [key, idx]]).flat(1))\n                    //let fullIpList = viewKeys.map( vk => { try{var view = getView(config.views);}catch{}; return view ? view.exactIpList : [];}).flat();\n                    //fullIpList = withoutDuplicates(fullIpList);\n                    const fallbackIpInfos=[\n                        { ip:undefined, ipExp: /\\.111$/, apKey: \"MasterDisplay1\", note: \"collocato a fianco dell'Area SMED1\" },\n                        { ip:undefined, ipExp: /\\.112$/, apKey: \"SlaveDisplay2\", note: \"precede in senso orario MasterDisplay1\" },\n                        { ip:undefined, ipExp: /\\.113$/, apKey: \"SlaveDisplay3\", note: \"precede in senso orario SlaveDisplay2\" },\n                        { ip:undefined, ipExp: /\\.114$/, apKey: \"SlaveDisplay4\", note: \"precede in senso orario SlaveDisplay3\" },\n                        { ip:undefined, ipExp: /\\.115$/, apKey: \"SlaveDisplay5\", note: \"precede in senso orario SlaveDisplay4\" },\n                        { ip:undefined, ipExp: /\\.116$/, apKey: \"PC Area SMED1\", note: \"\" },\n                        { ip:undefined, ipExp: /\\.117$/, apKey: \"PC Area SMED2\", note: \"\" },\n                    ];\n                    ret.push(tableLib.newCreatorRow(tabUtils.newRowId(ret)));\n                    var countUnnamed = 0;\n                    for(let vk of viewKeys){\n                        if(typeof (config.views[vk]) != \"string\") //avoid duplicating devices //problem: the reference will have the name of the referenced instead than the referee as one'd expect\n                            for(let ip of (config.views[vk].exactIpList ?? [])){\n                                let viewKey = vk;\n                                //get \"empty\" row (instantiated with default values)\n                                var row = tableLib.newRow(tabUtils.newRowId(ret));\n                                const ipInfo = fallbackIpInfos.find( info => info.ip ? info.ip==ip : ip.match(info.ipExp));\n                                //set row to vals\n                                row.ip = ip;\n                                // row.viewKeySelect = (()=>{\n                                //     let selLib = tableLib.viewKeySelect;\n                                //     return `<select class=\"minimal\" onchange=\"${selLib.onChange}\" >${(()=>{\n                                //         let opts = viewKeys.map(k => `<option ghost-idx=\"${idxMap.get(k)}\" value=\"${k}\" ${k==vk ? \"selected\" : \"\"}>${k}</option>`).join(\"\\n\\t\");\n                                //         return node.warn({optsString:opts}) || opts;\n                                //     })()}</select>`\n                                //     let options = viewKeys.map(vk => tableLib.viewKeySelect.toOptionString(vk, idxMap.get(vk), vk===viewKey));\n                                //     return tableLib.viewKeySelect.toSelectString(options);\n                                //     // row.viewKeySelect_element.options = viewKeys.map(vk => tableLib.viewKeySelect.newOption(vk, idxMap.get(vk)));\n                                //     // tableLib.viewKeySelect.setSelected(row, vk); //row.viewKeySelect = row.viewKeySelect_element.setSelected(vk).updatedHtml();\n                                //     // return row.viewKeySelect_element.updateHtml(true);\n                                // })()\n                                row.viewKeySelect = tableLib.viewKeySelect.newPopulatedSelect(vk)\n                                row.viewKeySelect_selected = vk;\n                                row.apKey = ipInfo!==undefined ? ipInfo.apKey : vk + \" #\" + (1+countUnnamed++); //\"senza nome\"+(countUnnamed++ ? \" \"+countUnnamed : \"\");\n                                row.note = ipInfo!==undefined ? ipInfo.note : \"\";\n                                ret.push(row);\n                                //node.warn(row.viewKeySelect);\n                            }\n                    }\n\n                    // for(let viewKey in config.views){\n                    //     //set select html\n                    //     let viewKeys = Object.keys(config.views);\n                    //     row.viewKeySelect = tableLib.buildSelectHtml(viewKeys.map((vk, i) => tableLib.buildOptionHtml({ \"ghostIndex\":i, \"text\":vk, \"value\":vk, \"selected\":false })))\n                    //     //set selected option\n                    //     tableLib.setSelected(row, \"viewKeySelect\", viewKey)\n                        \n                    //     ret.push(row);\n                    // }\n                    return ret;\n                })(),\n                \n                \"getView\":function getView(key, views = global.get(\"config\").views){\n                    if(typeof(views[key])==\"string\"){\n                        let subSet = Object.assign({}, views)\n                        delete subSet[key];\n                        return getView(views[key], subSet) ?? node.warn(\"[GUIVar getView()] circular loop or invalid reference. last:\"+key+\"|remaining:\"+Object.keys(views).join())\n                    }\n                    else\n                        return views[key];\n                },\n\n                \"renameApKey\":function(oldName, newName, config = global.get(\"config\")){\n                    node.warn(\"called renameApKey with \"+[...arguments].join())\n                    //reject duplicates\n                    for(let ak in config.views)\n                        if(ak == newName)\n                            return \"duplicate\";\n                    //ensure that exactIpList table holds the new value\n                    {let row; \n                    if(row=this.exactIpList_table.find(row => row.apKey==oldName))\n                        row.apKey=newName;    //catch(e){ node.error(\"[GUIVars renameView()] cannot find row in adminUI. args:\"+arguments.join())}\n                    }\n\n                    return \"renamed\";\n                },\n                \n                \"renameView\":function(oldName, newName, config = global.get(\"config\")){\n                    node.warn(\"called renameApKey with \"+[...arguments].join())\n                    // if(oldName === newName)\n                    //     return \"renamed\";\n                    // if(!Object.keys(config.views).every( vk => vk != newName))\n                    //     return \"duplicate\"\n                    // //update views\n                    // config.views[newName] = config.views[oldName];\n                    // delete config.views[oldName];\n                    // //update\n\n                    //reject duplicates\n                    for(let vk in config.views)\n                        if(vk == newName)\n                            return \"duplicate\";\n                    //ensure that adminUI table holds the new value\n                    {let row; \n                    if(row=this.adminUI_table.find(row => row.viewKey==oldName))\n                        row.viewKey=newName;    //catch(e){ node.error(\"[GUIVars renameView()] cannot find row in adminUI. args:\"+arguments.join())}\n                    }\n\n                    //update exactIpList GUI Selects\n                    {let tableLib = tabUtils.viewsEditor.exactIpList;\n                    for(let row of this.exactIpList_table){\n                        //explode html  //to { tag, attributes:[{name,value,isValueMissing},..], innerHtml, html }\n                        let select = HTMLElement.explodeHtml(row.viewKeySelect);\n                        let options = HTMLSelectElement.explodeOptions(select.innerHtml)\n                        //find and edit option with value oldName\n                        for(let opt of options)\n                            for(let attr of opt.attributes)\n                                if(attr.name == \"value\" && attr.value == oldName){\n                                    attr.value=newName;\n                                    opt.innerHtml=newName;\n                                    break;\n                                }\n                        //re-stringify select html\n                        select.innerHtml = \"\\n\\t\"+options.map( opt => HTMLElement.implodeHtml(opt) ).join(\"\\n\\t\")+\"\\n\\t\";\n                        delete select.attributes; //avoid re-generating them as they didn't change\n                        //update viewKeySelect\n                        row.viewKeySelect = HTMLElement.implodeHtml(select)\n                        \n                        // try{    //find option with value oldName\n                        //     let opt=options.find( opt => opt.attributes.find( attr => attr.name=\"value\" )?.value == oldName)\n                        //         //edit attribute value\n                        //     opt.attributes.find( attr => attr.name=\"value\" ).value = newName\n                        //         //edit displayed name\n                        //     opt.innerHtml = newName\n                        // }catch(e){ node.error({txt:\"[GUIVars renameView()] cannot find option to rename in exactIpList\",args:arguments.join(),row:row)}\n                    }}\n                    node.warn(\"renamed\");\n                    return \"renamed\";\n                },\n\n                \"deleteView\":function (viewKey, config=global.get(\"config\")){\n                    //ensure that adminUI table holds the new value\n                    {let row; \n                    if(row=this.adminUI_table.find(row => row.viewKey==viewKey))\n                        tabUtils.deleteRow(row, this.adminUI_table)    //catch(e){ node.error(\"[GUIVars renameView()] cannot find row in adminUI. args:\"+arguments.join())}\n                    }\n                    node.warn(\"deleted\");\n\n                    //update exactIpList GUI Selects\n                    {let tableLib = tabUtils.viewsEditor.exactIpList;\n                    for(let row of this.exactIpList_table){\n                        \n                        //explode html  //to { tag, attributes:[{name,value,isValueMissing},..], innerHtml, html }\n                        let select = HTMLElement.explodeHtml(row.viewKeySelect);\n                        let options = HTMLSelectElement.explodeOptions(select.innerHtml)\n                        //find and remove option with value viewKey\n                            //if option was selected, select 'default' in its stead\n                        {const getAttr = (name, opt) => opt?.attributes?.find?.(attr => attr.name == name)\n                        const getOption = value => options.find(opt => getAttr(\"value\",opt)?.value==value);\n                        let optToRem = getOption(viewKey) ?? node.warn(\"[GUIVars] deleteView(): no option to delete\");\n                        if( getAttr(\"selected\", optToRem) ){\n                            getOption(\"default\")?.attributes?.push?.(HTMLElement.newAttribute(\"selected\"))  ?? node.warn(\"[GUIVars] deleteView(): no option with 'default' value found, to set as selected in place of \"+viewKey);\n                            row.viewKeySelect_selected = \"default\"\n                        }\n                        options = options.filter( opt => opt!==optToRem)\n                        }\n\n                        //re-stringify select html\n                        select.innerHtml = \"\\n\\t\"+options.map( opt => HTMLElement.implodeHtml(opt) ).join(\"\\n\\t\")+\"\\n\\t\";\n                        delete select.attributes; //avoid re-generating them as they didn't change\n                        //update viewKeySelect\n                        row.viewKeySelect = HTMLElement.implodeHtml(select)\n                    }}\n\n                    config.views[viewKey] || node.warn(\"deleteView(): no viewKey to delete in config\")\n                    delete config.views[viewKey]\n                },\n\n                onViewKeySelectChange(){\n\n                }\n            },\n\n            // mmachines: (() => {\n            //     let ret = {};\n            //     const converter = flow.get(\"converters\").machineConfig;\n            //     //macKeys.forEach( mk => ret[mk] = GUIVarsForSingleMachine(config.machines[mk]) )\n            //     for (let mk of macKeys) {\n            //         let cfg = config.machines[mk];\n            //         for(let varName of varNames)\n            //             ret[mk] = converter.toGUIVar(varName, cfg)\n            //     }\n            //     return ret;\n            // })()\n        });\n\n        \n\n        if(!varNames.every(v => flow.get(\"fallbackGUIVars\")[v] !== undefined))\n            node.warn(\"not all varNames are defined in fallbackGUIVars\")\n\n        node.send(flow.get(\"fallbackGUIVars\"))\n        //node.warn(flow.get(\"fallbackGUIVars\"))\n        \n    })//end nested callWhenDef {ctx:flow}\n})//end callWhenDef\n\n\n//-------------------------------------------------------------------------------------------------------------------\n\n\nclass DefaultedMap extends Map {\n    defaultValue\n    defaultKey\n\n    constructor(defaultValue, ...args) {\n        super(...args);\n        this.defaultValue = defaultValue;\n        this.defaultKey = \"default\";\n        super.set(this.defaultKey, this.defaultValue)\n    }\n\n    get(key) {\n        return super.get(key) ?? this.defaultValue;\n    }\n\n    setDefault(val) {\n        this.defaultValue = val;\n    }\n\n    setDefaultKey(key) {\n        this.defaultKey = key;\n    }\n\n}\n\nfunction msTo(val, unit, toFixedDecimals = undefined) {\n    let units = [\"ms\", \"s\", \"min\", \"h\", \"gg\"];\n    let unitFactors = [1, 1000, 60, 60, 24]; //in terms of the preceding unit //ex. min are 1*1000*60\n    let factor = 1;\n    for (let i = units.indexOf(unit); i >= 0; i--)\n        factor *= unitFactors[i];\n    const toFixedAsNum = (val, p) => { let pow = Math.pow(10, p); return Math.round(val * pow) / pow }\n    return (toFixedDecimals === undefined) ? val / factor : toFixedAsNum(val / factor, toFixedDecimals);\n}\n\n\nfunction toMs(val, unit) {\n    let units = [\"ms\", \"s\", \"min\", \"h\", \"gg\"];\n    let unitFactors = [1, 1000, 60, 60, 24]; //in terms of the preceding unit //ex. min are 1*1000*60\n    let factor = 1;\n    for (let i = units.indexOf(unit); i >= 0; i--)\n        factor *= unitFactors[i];\n    //node.warn({txt:\"[toMs]\",res:val*factor,from:arguments})\n    return Math.round(val * factor);\n}\n\n\n/**\n * recursively traverse views.\n * @returns the view at the end of the reference chain or undefined\n */\nfunction getView(viewKey, haystack) {\n    if (typeof haystack[viewKey] == \"string\") {\n        //recurse over a smaller set\n        let slicedSet = Object.assign({}, haystack);\n        delete slicedSet[viewKey];\n        return getView(haystack[viewKey], slicedSet)\n    }\n    else {\n        if (haystack[viewKey] === undefined)\n            node.warn(\"[fallbackGUIVars] getView(\" + viewKey + \") \" + (Object.keys(haystack).length ? \"is undefined\" : \" is part of a self-referencing loop\"));\n        return haystack[viewKey]; //self referencing props result in 'undefined'\n    }\n}\n\nfunction withoutDuplicates(array, isDup = (a, b) => a === b){\n    var shift = 0;\n    array.sort().forEach((item, i) => {\n        if (i < array.length - 1 && isDup(item, array[i + 1]))\n            shift++; //continue\n        else if (shift)\n            array[i - shift] = item\n    })\n    array.length -= shift;\n    return array;\n}\n//yet to decide where to store it\nfunction getHtmlClass(className = \"HTML\"){\n    return (global.get(\"HTML\") ?? flow.get(\"HTML\") ?? {})[className] ?? flow.get(className)\n}\n\n /** @summary repeatedly tries to fetch all varNames with store.get().\n *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n    * @param {function} cb called once ALL globalName are defined\n    * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n    * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n    * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n    * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n    * @param  {...any} varNames series of strings\n    */ \nfunction callWhenDef(cb, opts, ...varNames){\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if(typeof(cb)==\"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts={}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if(typeof(opts) == \"string\")\n        varNames.push(opts);\n    let { timeout=3000, retryDelay=100, errorCb=null, ctx=\"global\" } = (typeof(opts)==\"string\" ? {} : (opts??{}) );\n    var tout, intv;\n    //switch context to the one specified in ctx\n    var store = ctx===\"global\" ? global : ctx===\"flow\" ? flow : ctx===\"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    \n    //try immediately, before doing any work\n    if(varNames.every(name => store.get(name) !== undefined))\n        return cb();\n    //set timeout unless false or not specified\n    if(timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined), vars:{ctx:ctx} })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if( !varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 1110,
        "wires": [
            []
        ]
    },
    {
        "id": "ef00dff31b92400a",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "set flow.generateGUIVars & flow.converters",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "callWhenDef(\"signalCells\", \"config\", \"html\", \"uiAbs\", () => {\n    callWhenDef(\"tabUtils\", { ctx: \"flow\", timeout: 15000 }, () => {\n        // const signalCells = global.get(\"signalCells\");\n        const config = global.get(\"config\");\n        const uiAbs = global.get(\"uiAbs\");\n        // const tabUtils = flow.get(\"tabUtils\");\n        // const HTMLSelectElement = getHtmlClass(\"HTMLSelectElement\");\n        // const HTMLElement = getHtmlClass(\"HTMLElement\");\n        // let signalKeys = signalCells.dictionary.signalKeys;\n        // let macKeys = signalCells.dictionary.macKeys;\n        const toFixedAsNum = (val, p) => { let pow = Math.pow(10, p); return Math.round(val * pow) / pow }\n\n        let configRef = config;\n        flow.set(\"converters\", {\n            // machineConfigGUI: (()=>{\n            //     let cfg=config.machines;\n            //     let ret = new DefaultedMap( (macKey, varName, value) => cfg[][varName]=value && node.warn({txt:\"using default conversion\",args:[varName,value,cfg]}) )\n            //     ret.toConfig = function (macKey, varName, value){\n\n            //     }\n            // })(varNames)\n            //convs:{\n            machineConfigGUI: {\n                updateConfigFor(macKey, varName, value, config = configRef) {\n                    const converter = flow.get(\"converters\").machineConfigGUI.toConfig;\n                    const GUIVars = flow.get(\"GUIVars\");\n                    if (converter[varName]) {\n                        let res;\n                        //node.warn([\"with \",arguments, \" cfgSetTo \",config.machines[macKey]]);\n                        return converter[varName](GUIVars.machines[macKey], config.machines[macKey]);\n                    } else {\n                        node.warn(\"[GUIVar converter]:implicit conversion for \" + varName + \" in machineConfigGUI\");\n                        return config.machines[macKey][varName] = value;\n                    }\n                },\n                toConfig: {\n                    cellHeaderText: (GUIVar, cfg) => cfg.cellHeaderText = GUIVar.cellHeaderText,\n\n                    toA3Timeout_value: (GUIVar, cfg) => cfg.toA3Timeout = toMs(GUIVar.toA3Timeout_value, GUIVar.toA3Timeout_unit),\n                    toA3Timeout_unit: function (GUIVar, cfg) { return this.toA3Timeout_value(GUIVar, cfg) },\n\n                    toA4Timeout_value: (GUIVar, cfg) => cfg.toA4Timeout = toMs(GUIVar.toA4Timeout_value, GUIVar.toA4Timeout_unit),\n                    toA4Timeout_unit: function (GUIVar, cfg) { return this.toA4Timeout_value(GUIVar, cfg) },\n\n                    initCellSignalKey_dropdown: (GUIVar, cfg) => cfg.initCellSignalKey = (sk => sk == \"custom\" ? \"noop\" : sk)(GUIVar.initCellSignalKey_dropdown),\n                    //initCellSignalKey_color: undefined,\n                    //initCellSignalKey_backgroundColor: undefined,\n\n                    initTowerBits_switchValue: (GUIVar, cfg) => {\n                        let swVal = GUIVar.initTowerBits_switchValue;\n                        cfg.initTowerBits.redLight = (swVal == \"red\" || swVal == \"both\") ? true : false;\n                        cfg.initTowerBits.greenLight = (swVal == \"green\" || swVal == \"both\") ? true : false;\n                        return cfg.initTowerBits;\n                    },\n\n                    blinkIntv_period: (GUIVar, cfg) => {\n                        let period = GUIVar.blinkIntv_period, ratio = GUIVar.blinkIntv_offtimeRatio;\n                        cfg.blinkIntvOn = Math.round((1 - ratio) * period);\n                        cfg.blinkIntvOff = Math.round(ratio * period);\n                        return { blinkIntvOn: cfg.blinkIntvOn, blinkIntvOff: cfg.blinkIntvOff }\n                    },\n                    blinkIntv_offtimeRatio: function (GUIVar, cfg) { return this.blinkIntv_period(GUIVar, cfg) },\n                },\n                toGUIVar: {\n                    cellHeaderText: (cfg) => cfg.cellHeaderText,\n                    toA3Timeout_value: (cfg) => msTo(cfg.toA3Timeout, \"min\"),\n                    toA3Timeout_unit: undefined,\n                    toA4Timeout_value: (cfg) => msTo(cfg.toA4Timeout, \"min\", 1),\n                    toA4Timeout_unit: undefined,\n                    initCellSignalKey_dropdown: (cfg) => (sk => sk == \"noop\" ? \"custom\" : sk)(cfg.initCellSignalKey),\n                    initCellSignalKey_color: undefined,\n                    initCellSignalKey_backgroundColor: undefined,\n                    initTowerBits_switchValue: (cfg) => (init => init.greenLight ? (init.redLight ? \"both\" : \"green\") : (init.redLight ? \"red\" : \"off\"))(cfg.initTowerBits),\n                    blinkIntv_period: (cfg) => cfg.blinkIntvOff + cfg.blinkIntvOn,\n                    blinkIntv_offtimeRatio: (cfg) => toFixedAsNum(cfg.blinkIntvOff / (cfg.blinkIntvOff + cfg.blinkIntvOn), 1)\n                }\n            },\n            cellsLayoutGUI: {\n                updateConfigFor(row, col, config = configRef) {\n                    let val = flow.get(\"GUIVars\").cellsLayout.varsMatrix[row][col];\n                    config.cellsLayout[row][col] = val == \"empty\" ? null : val;\n                },\n                toGUIVar(config) {\n                    return config.cellsLayout.map(row => row.map(val => val == null ? \"empty\" : val));\n                }\n            }\n            //},\n\n            // machineConfigGUI:{\n            //     toConfig:function (macKey, varName, value, config = configRef){\n            //         const converter = flow.get(\"converters\").convs.machineConfigGUI.toConfig;\n            //         const GUIVars = flow.get(\"GUIVars\");\n            //         if(converter[varName]){\n            //             node.warn([arguments, \" mach \",config.machines]);\n            //             converter[varName]( GUIVars.machines[macKey], config.machines[macKey] );\n            //         }else{\n            //             node.warn(\"[GUIVar converter]:implicit conversion for \"+varName+ \" in machineConfigGUI\");\n            //             config.machines[macKey][varName] = value;\n            //         }\n            //     }\n            // }\n        })\n\n    });//end nested callWhenDef {ctx:flow}\n});//end callWhenDef\n\n        //------------------------------------------------------------------------------------------------------------------------------\n        //        FALLBACK GUIVARS\n        //------------------------------------------------------------------------------------------------------------------------------\n\n\ncallWhenDef(\"signalCells\", \"config\", \"html\", () => {\n    callWhenDef(\"tabUtils\", { ctx: \"flow\", timeout: 15000 }, () => {\n        \n        // function GUIVarsForSingleMachine(cfg){\n        //     return {\n        //         toA3Timeout_value: toFixedAsNum( msTo(cfg.toA3timeout, \"min\"), 1) ,\n        //         toA3Timeout_unit: \"min\",\n        //         toA4Timeout_value: toFixedAsNum( msTo(cfg.toA3timeout, \"min\"), 1),\n        //         toA4Timeout_unit: \"min\",\n        //         initCellSignalKey_dropdown: (sk => sk == \"noop\" ? \"custom\" : sk)(cfg.initSignalKey),\n        //         initCellSignalKey_color: undefined,\n        //         initCellSignalKey_backgroundColor: undefined,\n        //         initTowerBits_switchValue: (init => { init.greenLight ? (init.redLight ? \"both\" : \"green\") : (init.redLight ? \"red\" : \"off\") })(cfg.initTowerBits),\n        //         blinkIntv_period: cfg.blinkIntvOff + cfg.blinkIntvOn,\n        //         blinkIntv_ratio: Math.round((cfg.blinkIntvOff / cfg.blinkIntvOff + cfg.blinkIntvOn)*10)/10,\n        //     }\n        // }\n        const generateGUIVars = function (config = global.get(\"config\"), oldGUIVars){\n            const signalCells = global.get(\"signalCells\") ?? node.error(\"[genGUIVars]: global.signalCells still undefined\");\n            const tabUtils = flow.get(\"tabUtils\") ?? node.error(\"[genGUIVars]: flow.tabutils undefined here\");\n            const HTMLSelectElement = getHtmlClass(\"HTMLSelectElement\"); \n            const HTMLElement = getHtmlClass(\"HTMLElement\");\n            let signalKeys = signalCells.dictionary.signalKeys \n            let macKeys = signalCells.dictionary.macKeys;\n            const converters = flow.get(\"converters\") ?? node.error(\"[genGUIVars]: flow.converters still undefined here\");\n            //const varNames = [\"toA3Timeout_value\", \"toA3Timeout_value\", \"toA4Timeout_value\", \"toA4Timeout_unit\", \"initCellSignalKey_dropdown\", \"initCellSignalKey_color\", \"initCellSignalKey_backgroundColor\", \"initTowerBits_switchValue\", \"blinkIntv_period\", \"blinkIntv_ratio\"]\n            const varNames = [\n                \"toA3Timeout_value\",\n                \"toA3Timeout_unit\",\n                \"toA4Timeout_value\",\n                \"toA4Timeout_unit\",\n                \"initCellSignalKey_dropdown\",\n                \"initCellSignalKey_color\",\n                \"initCellSignalKey_backgroundColor\",\n                \"initTowerBits_switchValue\",\n                \"blinkIntv_period\",\n                \"blinkIntv_ratio\"\n            ];\n            const toFixedAsNum = (val, p) => { let pow = Math.pow(10, p); return Math.round(val * pow) / pow }\n            config ?? node.error(\"[genGUIVars]: global.config still undefined\");\n            \n            let newGUIVars = {\n                inflate: function inflate(target) {\n                    return global.get(\"utils\").genericInflater.call(this, target);\n                },\n                \"machines\": (() => {\n                    let ret = {};\n                    //macKeys.forEach( mk => ret[mk] = GUIVarsForSingleMachine(config.machines[mk]) )\n                    for (let mk of macKeys) {\n                        let cfg = config.machines[mk];\n                        //mk == \"OMET\" && node.warn({ toA3: cfg.toA3Timeout,cfg:cfg })\n                        let tmp;\n                        ret[mk] = {\n                            cellHeaderText: cfg.cellHeaderText,\n                            toA3Timeout_unit: tmp=bestUnitFor(cfg.toA3Timeout, 5),\n                            toA3Timeout_value: msTo(cfg.toA3Timeout, tmp , 1),\n                            toA4Timeout_unit: tmp=bestUnitFor(cfg.toA4Timeout, 5),\n                            toA4Timeout_value: msTo(cfg.toA4Timeout, tmp, 1),\n                            initCellSignalKey_dropdown: (sk => sk == \"noop\" ? \"custom\" : sk)(cfg.initCellSignalKey),\n                            initCellSignalKey_color: undefined,\n                            initCellSignalKey_backgroundColor: undefined,\n                            initTowerBits_switchValue: (init => init.greenLight ? (init.redLight ? \"both\" : \"green\") : (init.redLight ? \"red\" : \"off\"))(cfg.initTowerBits),\n                            blinkIntv_period: cfg.blinkIntvOff + cfg.blinkIntvOn,\n                            blinkIntv_offtimeRatio: toFixedAsNum(cfg.blinkIntvOff / (cfg.blinkIntvOff + cfg.blinkIntvOn), 1),\n                        }\n                        // let blinktimes = ( function toBlinkTimes(period, offtimeRatio){    return [ period*1000*(1 - offtimeRatio), period*1000*offtimeRatio ]     })(ret[mk].blinkIntv_period, ret[mk].blinkIntv_offtimeRatio)\n                        // mk == \"OMET\" && node.warn({ txt: \"blinkTimes\", bOn: blinktimes[0], bOff:blinktimes[1] })\n                    }\n                    return ret;\n                })(),\n                //instead than using varNames like other widjets, it uses msg.row and msg.col and stores the GUIVars in a\n                //matrix reflecting the config prop that it's being affected\n                \"cellsLayout\": {\n                    nRows: config.cellsLayout.length,\n                    nCols: config.cellsLayout[0].length,\n\n                    varsMatrix: converters.cellsLayoutGUI.toGUIVar(config)//.cellsLayout.map(row => row.map( col => col))\n                },\n\n                \"views\": {\n                    // //restore GUIVar-like object from it's json reduction\n                    // inflate:function (target){\n                    //     if(typeof target == \"object\")\n                    //         for(let k in this){\n                    //             if(typeof(this[k]) == \"function\")\n                    //                 target[k] = this[k];\n                    //             else\n                    //                 target[k] = global.get(\"utils\").genericInflater.call(this[k], target[k])\n                    //         }\n                    //     //exactIpList_table -> restore HTMLSelectElements\n                    //     //self.exactIpList_table = self.exactIpList_table.map( row => row.viewKeySelect_element = new HTMLSelectElement(row.viewKeySelect_element))\n                    // },\n                    adminUI_table: (() => {\n                        let ret = [], tableLib = tabUtils.viewsEditor.adminUI;\n                        ret.push(tableLib.newCreatorRow(tabUtils.newRowId(ret)));\n                        for (let vk in config.views) {\n                            let row = tabUtils.viewsEditor.adminUI.newRow(tabUtils.newRowId(ret))\n                            tabUtils.viewsEditor.adminUI.setRowToView(row, vk, config.views)\n                            if (vk == \"default\")\n                                row.deleteButton = \"\";\n                            ret.push(row);\n                        }\n                        return ret;\n                    })(),\n                    //[ vk, vk, .. ]\n                    //copycats: Object.keys(config.views).filter( vk => typeof(config.views[vk]) == \"string\" ),\n                    // @ts-ignore\n                    //does not survive JSONification//exactIpList_viewKeySelect_idxMap: tabUtils.viewsEditor.exactIpList.viewKeySelect.idxMap,//new Map( Object.keys(global.get(\"config\").views).map((key,idx) => [[idx, key],[key, idx]]).flat(1) ),\n\n                    exactIpList_table: (function(){\n                        const uiAbs = global.get(\"uiAbs\");\n                        var ret = [];\n                        let tableLib = tabUtils.viewsEditor.exactIpList;\n                        let viewKeys = Object.keys(config.views);   // @ts-ignore\n                        const idxMap = new Map(viewKeys.map((key, idx) => [[idx, key], [key, idx]]).flat(1))\n                        //let fullIpList = viewKeys.map( vk => { try{var view = getView(config.views);}catch{}; return view ? view.exactIpList : [];}).flat();\n                        //fullIpList = withoutDuplicates(fullIpList);\n                        const fallbackIpInfos = [\n                            { ip: undefined, ipExp: /\\.111$/, apKey: \"MasterDisplay1\", note: \"collocato a fianco dell'Area SMED1\" },\n                            { ip: undefined, ipExp: /\\.112$/, apKey: \"SlaveDisplay2\", note: \"precede in senso orario MasterDisplay1\" },\n                            { ip: undefined, ipExp: /\\.113$/, apKey: \"SlaveDisplay3\", note: \"precede in senso orario SlaveDisplay2\" },\n                            { ip: undefined, ipExp: /\\.114$/, apKey: \"SlaveDisplay4\", note: \"precede in senso orario SlaveDisplay3\" },\n                            { ip: undefined, ipExp: /\\.115$/, apKey: \"SlaveDisplay5\", note: \"precede in senso orario SlaveDisplay4\" },\n                            { ip: undefined, ipExp: /\\.116$/, apKey: \"PC Area SMED1\", note: \"\" },\n                            { ip: undefined, ipExp: /\\.117$/, apKey: \"PC Area SMED2\", note: \"\" },\n                            { ip: undefined, ipExp: /\\.130$/, apKey: \"AP Supervisione di base\", note: \"IP abilitato per default alla visione della pagina di amministrazione.\" },\n                            { ip: undefined, ipExp: /\\.131$/, apKey: \"AP Supervisione di base #2\", note: \"IP abilitato per default alla visione della pagina di amministrazione.\" },\n                            { ip: undefined, ipExp: /\\.132$/, apKey: \"AP Supervisione di base #3\", note: \"IP abilitato per default alla visione della pagina di amministrazione.\" },\n                            { ip: undefined, ipExp: /\\.133$/, apKey: \"AP Supervisione di base #4\", note: \"IP abilitato per default alla visione della pagina di amministrazione.\" },\n                            { ip: undefined, ipExp: /\\.134$/, apKey: \"AP Supervisione di base #5\", note: \"IP abilitato per default alla visione della pagina di amministrazione.\" },\n                        ];\n                        ret.push(tableLib.newCreatorRow(tabUtils.newRowId(ret)));\n                        var countUnnamed = 0;\n                        for (let vk of viewKeys) {\n                            if (typeof (config.views[vk]) != \"string\") //avoid duplicating devices //problem: the reference will have the name of the referenced instead than the referee as one'd expect\n                                for (let ip of (config.views[vk].exactIpList ?? [])) {\n                                    let viewKey = vk;\n                                    //get \"empty\" row (instantiated with default values)\n                                    var row = tableLib.newRow(tabUtils.newRowId(ret));\n                                    //info not present in config -> get them from defaults above or from oldGUIVars\n                                    var ipInfo = fallbackIpInfos.find(info => info.ip ? info.ip == ip : ip.match(info.ipExp));\n                                    {\n                                        let oldRow;\n                                        if(ipInfo == undefined && (oldRow = oldGUIVars?.views?.exactIPList_table?.find?.(row => row.ip == ip)))\n                                            ipInfo = { ip: row.ip, ipExp: undefined, apKey: row.apKey, note: row.note };\n                                    }\n\n                                    //set row to vals\n                                    row.ip = ip;\n                                    // row.viewKeySelect = (()=>{\n                                    //     let selLib = tableLib.viewKeySelect;\n                                    //     return `<select class=\"minimal\" onchange=\"${selLib.onChange}\" >${(()=>{\n                                    //         let opts = viewKeys.map(k => `<option ghost-idx=\"${idxMap.get(k)}\" value=\"${k}\" ${k==vk ? \"selected\" : \"\"}>${k}</option>`).join(\"\\n\\t\");\n                                    //         return node.warn({optsString:opts}) || opts;\n                                    //     })()}</select>`\n                                    //     let options = viewKeys.map(vk => tableLib.viewKeySelect.toOptionString(vk, idxMap.get(vk), vk===viewKey));\n                                    //     return tableLib.viewKeySelect.toSelectString(options);\n                                    //     // row.viewKeySelect_element.options = viewKeys.map(vk => tableLib.viewKeySelect.newOption(vk, idxMap.get(vk)));\n                                    //     // tableLib.viewKeySelect.setSelected(row, vk); //row.viewKeySelect = row.viewKeySelect_element.setSelected(vk).updatedHtml();\n                                    //     // return row.viewKeySelect_element.updateHtml(true);\n                                    // })()\n                                    row.viewKeySelect = tableLib.viewKeySelect.newPopulatedSelect(vk)\n                                    row.viewKeySelect_selected = vk;\n                                    row.apKey = ipInfo !== undefined ? ipInfo.apKey : vk + \" #\" + (1 + countUnnamed++); //\"senza nome\"+(countUnnamed++ ? \" \"+countUnnamed : \"\");\n                                    row.hasCfgPage = uiAbs.views.user.ipList.includes(row.ip);\n                                    row.note = ipInfo !== undefined ? ipInfo.note : \"\";\n                                    ret.push(row);\n                                    //node.warn(row.viewKeySelect);\n                                }\n                        }\n\n                        // for(let viewKey in config.views){\n                        //     //set select html\n                        //     let viewKeys = Object.keys(config.views);\n                        //     row.viewKeySelect = tableLib.buildSelectHtml(viewKeys.map((vk, i) => tableLib.buildOptionHtml({ \"ghostIndex\":i, \"text\":vk, \"value\":vk, \"selected\":false })))\n                        //     //set selected option\n                        //     tableLib.setSelected(row, \"viewKeySelect\", viewKey)\n\n                        //     ret.push(row);\n                        // }\n                        return ret;\n                    })(),\n\n                    \"getView\": function getView(key, views = global.get(\"config\").views) {\n                        if (typeof (views[key]) == \"string\") {\n                            let subSet = Object.assign({}, views)\n                            delete subSet[key];\n                            return getView(views[key], subSet) ?? node.warn(\"[GUIVar getView()] circular loop or invalid reference. last:\" + key + \"|remaining:\" + Object.keys(views).join())\n                        }\n                        else\n                            return views[key];\n                    },\n\n                    \"renameApKey\": function (oldName, newName, config = global.get(\"config\")) {\n                        node.warn(\"called renameApKey with \" + [...arguments].join())\n                        //reject duplicates\n                        for (let ak in config.views)\n                            if (ak == newName)\n                                return \"duplicate\";\n                        //ensure that exactIpList table holds the new value\n                        {\n                            let row;\n                            if (row = this.exactIpList_table.find(row => row.apKey == oldName))\n                                row.apKey = newName;    //catch(e){ node.error(\"[GUIVars renameView()] cannot find row in adminUI. args:\"+arguments.join())}\n                        }\n\n                        return \"renamed\";\n                    },\n\n                    \"renameView\": function (oldName, newName, config = global.get(\"config\")) {\n                        node.warn(\"called renameApKey with \" + [...arguments].join())\n                        // if(oldName === newName)\n                        //     return \"renamed\";\n                        // if(!Object.keys(config.views).every( vk => vk != newName))\n                        //     return \"duplicate\"\n                        // //update views\n                        // config.views[newName] = config.views[oldName];\n                        // delete config.views[oldName];\n                        // //update\n\n                        //reject duplicates\n                        for (let vk in config.views)\n                            if (vk == newName)\n                                return \"duplicate\";\n                        //ensure that adminUI table holds the new value\n                        {\n                            let row;\n                            if (row = this.adminUI_table.find(row => row.viewKey == oldName))\n                                row.viewKey = newName;    //catch(e){ node.error(\"[GUIVars renameView()] cannot find row in adminUI. args:\"+arguments.join())}\n                        }\n\n                        //update exactIpList GUI Selects\n                        {\n                            let tableLib = tabUtils.viewsEditor.exactIpList;\n                            for (let row of this.exactIpList_table) {\n                                //explode html  //to { tag, attributes:[{name,value,isValueMissing},..], innerHtml, html }\n                                let select = HTMLElement.explodeHtml(row.viewKeySelect);\n                                let options = HTMLSelectElement.explodeOptions(select.innerHtml)\n                                //find and edit option with value oldName\n                                for (let opt of options)\n                                    for (let attr of opt.attributes)\n                                        if (attr.name == \"value\" && attr.value == oldName) {\n                                            attr.value = newName;\n                                            opt.innerHtml = newName;\n                                            break;\n                                        }\n                                //re-stringify select html\n                                select.innerHtml = \"\\n\\t\" + options.map(opt => HTMLElement.implodeHtml(opt)).join(\"\\n\\t\") + \"\\n\\t\";\n                                delete select.attributes; //avoid re-generating them as they didn't change\n                                //update viewKeySelect\n                                row.viewKeySelect = HTMLElement.implodeHtml(select)\n\n                                // try{    //find option with value oldName\n                                //     let opt=options.find( opt => opt.attributes.find( attr => attr.name=\"value\" )?.value == oldName)\n                                //         //edit attribute value\n                                //     opt.attributes.find( attr => attr.name=\"value\" ).value = newName\n                                //         //edit displayed name\n                                //     opt.innerHtml = newName\n                                // }catch(e){ node.error({txt:\"[GUIVars renameView()] cannot find option to rename in exactIpList\",args:arguments.join(),row:row)}\n                            }\n                        }\n                        node.warn(\"renamed\");\n                        return \"renamed\";\n                    },\n\n                    \"deleteView\": function (viewKey, config = global.get(\"config\")) {\n                        //ensure that adminUI table holds the new value\n                        {\n                            let row;\n                            if (row = this.adminUI_table.find(row => row.viewKey == viewKey))\n                                tabUtils.deleteRow(row, this.adminUI_table)    //catch(e){ node.error(\"[GUIVars renameView()] cannot find row in adminUI. args:\"+arguments.join())}\n                        }\n                        node.warn(\"deleted\");\n\n                        //update exactIpList GUI Selects\n                        {\n                            let tableLib = tabUtils.viewsEditor.exactIpList;\n                            for (let row of this.exactIpList_table) {\n\n                                //explode html  //to { tag, attributes:[{name,value,isValueMissing},..], innerHtml, html }\n                                let select = HTMLElement.explodeHtml(row.viewKeySelect);\n                                let options = HTMLSelectElement.explodeOptions(select.innerHtml)\n                                //find and remove option with value viewKey\n                                //if option was selected, select 'default' in its stead\n                                {\n                                    const getAttr = (name, opt) => opt?.attributes?.find?.(attr => attr.name == name)\n                                    const getOption = value => options.find(opt => getAttr(\"value\", opt)?.value == value);\n                                    let optToRem = getOption(viewKey) ?? node.warn(\"[GUIVars] deleteView(): no option to delete\");\n                                    if (getAttr(\"selected\", optToRem)) {\n                                        getOption(\"default\")?.attributes?.push?.(HTMLElement.newAttribute(\"selected\")) ?? node.warn(\"[GUIVars] deleteView(): no option with 'default' value found, to set as selected in place of \" + viewKey);\n                                        row.viewKeySelect_selected = \"default\"\n                                    }\n                                    options = options.filter(opt => opt !== optToRem)\n                                }\n\n                                //re-stringify select html\n                                select.innerHtml = \"\\n\\t\" + options.map(opt => HTMLElement.implodeHtml(opt)).join(\"\\n\\t\") + \"\\n\\t\";\n                                delete select.attributes; //avoid re-generating them as they didn't change\n                                //update viewKeySelect\n                                row.viewKeySelect = HTMLElement.implodeHtml(select)\n                            }\n                        }\n\n                        config.views[viewKey] || node.warn(\"deleteView(): no viewKey to delete in config\")\n                        delete config.views[viewKey]\n                    },\n\n                    onViewKeySelectChange() {\n\n                    }\n                },\n\n                // mmachines: (() => {\n                //     let ret = {};\n                //     const converter = flow.get(\"converters\").machineConfig;\n                //     //macKeys.forEach( mk => ret[mk] = GUIVarsForSingleMachine(config.machines[mk]) )\n                //     for (let mk of macKeys) {\n                //         let cfg = config.machines[mk];\n                //         for(let varName of varNames)\n                //             ret[mk] = converter.toGUIVar(varName, cfg)\n                //     }\n                //     return ret;\n                // })()\n            };\n            return newGUIVars;\n            \n        };\n        //node.warn(flow.get(\"fallbackGUIVars\"))\n        flow.set(\"generateGUIVars\",generateGUIVars)\n    });//end nested callWhenDef {ctx:flow}\n});//end callWhenDef\n\n\n\n          \n             \n //           -----------------------------------------------------------------------------------------------------\n        \n    \nclass DefaultedMap extends Map {\n    defaultValue\n    defaultKey\n\n    constructor(defaultValue, ...args) {\n        super(...args);\n        this.defaultValue = defaultValue;\n        this.defaultKey = \"default\";\n        super.set(this.defaultKey, this.defaultValue)\n    }\n\n    get(key) {\n        return super.get(key) ?? this.defaultValue;\n    }\n\n    setDefault(val) {\n        this.defaultValue = val;\n    }\n\n    setDefaultKey(key) {\n        this.defaultKey = key;\n    }\n\n}\n\n//smaller unit that:\n//makes the value be greater than moreThan //ex. moreThan=5 & ms=150000 -> as 'min' it would be 2.5, therefore use 's'\n//OR is 1 step bigger than the above but it's a whole num //ex. 180s<=>3min -> 3<5 but 3min is better than 180s nonetheless\nfunction bestUnitFor(ms, moreThan = 5) {\n    let units = [\"ms\", \"s\", \"min\", \"h\", \"gg\"];\n    let unitFactors = [1, 1000, 60, 60, 24]; //in terms of the preceding unit //ex. min are 1*1000*60\n    let factor = 1;\n    ms = Math.abs(ms);\n    for (let i = 1; i < units.length; i++)\n        //if ms is less than x times the current unit -> return the preceding unit\n        //ex. at 'min': if 3*60*1000 < X * 1*1000*60\n        if (i == units.length || ms < moreThan * (factor *= unitFactors[i]))\n            //if is less than x but a whole num -> use the bigger unit  //ex. 180s<=>3min -> 3<5 but 3min is better than 180s nonetheless\n            return ((ms % factor == 0) ? units[i] : units[i - 1]);\n}\n\nfunction msTo(val, unit, toFixedDecimals = undefined) {\n    let units = [\"ms\", \"s\", \"min\", \"h\", \"gg\"];\n    let unitFactors = [1, 1000, 60, 60, 24]; //in terms of the preceding unit //ex. min are 1*1000*60\n    let factor = 1;\n    for (let i = units.indexOf(unit); i >= 0; i--)\n        factor *= unitFactors[i];\n    const toFixedAsNum = (val, p) => { let pow = Math.pow(10, p); return Math.round(val * pow) / pow }\n    return (toFixedDecimals === undefined) ? val / factor : toFixedAsNum(val / factor, toFixedDecimals);\n}\n\n\nfunction toMs(val, unit) {\n    let units = [\"ms\", \"s\", \"min\", \"h\", \"gg\"];\n    let unitFactors = [1, 1000, 60, 60, 24]; //in terms of the preceding unit //ex. min are 1*1000*60\n    let factor = 1;\n    for (let i = units.indexOf(unit); i >= 0; i--)\n        factor *= unitFactors[i];\n    //node.warn({txt:\"[toMs]\",res:val*factor,from:arguments})\n    return Math.round(val * factor);\n}\n\n\n/**\n * recursively traverse views.\n * @returns the view at the end of the reference chain or undefined\n */\nfunction getView(viewKey, haystack) {\n    if (typeof haystack[viewKey] == \"string\") {\n        //recurse over a smaller set\n        let slicedSet = Object.assign({}, haystack);\n        delete slicedSet[viewKey];\n        return getView(haystack[viewKey], slicedSet)\n    }\n    else {\n        if (haystack[viewKey] === undefined)\n            node.warn(\"[fallbackGUIVars] getView(\" + viewKey + \") \" + (Object.keys(haystack).length ? \"is undefined\" : \" is part of a self-referencing loop\"));\n        return haystack[viewKey]; //self referencing props result in 'undefined'\n    }\n}\n\nfunction withoutDuplicates(array, isDup = (a, b) => a === b) {\n    var shift = 0;\n    array.sort().forEach((item, i) => {\n        if (i < array.length - 1 && isDup(item, array[i + 1]))\n            shift++; //continue\n        else if (shift)\n            array[i - shift] = item\n    })\n    array.length -= shift;\n    return array;\n}\n//yet to decide where to store it\nfunction getHtmlClass(className = \"HTML\") {\n    return (global.get(\"HTML\") ?? flow.get(\"HTML\") ?? {})[className] ?? flow.get(className)\n}\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n*  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n   * @param {function} cb called once ALL globalName are defined\n   * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n   * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n   * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n   * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n   * @param  {...any} varNames series of strings\n   */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return cb();\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined), vars: { ctx: ctx } })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "ca601c76ca5f9b88"
            ]
        ]
    },
    {
        "id": "282f6db66c44f19a",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "d9d7192a2acbd5cc",
        "name": "set flow.fallbackGUIVars",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n// flow.set(\"GUIVarsOfFallbackConfig\", flow.get(\"generateGUIVars\")(global.get(\"config\"));\n// return msg;",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 1395,
        "wires": [
            []
        ]
    },
    {
        "id": "bd208da1fabb3bcf",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "55a9133a1c5a95d1",
        "name": "set flow fallbackConfig",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n\nconst MACHINE_CFGS = {\n    \"FA419\": { toA4Timeout: 120 * 60 * 1000 },\n    \"FA420\": { toA4Timeout: 120 * 60 * 1000 },\n    \"FA421\": { toA4Timeout: 120 * 60 * 1000 },\n\n    \"FA422\": { toA4Timeout: 150 * 60 * 1000 },\n    \"FA423\": { toA4Timeout: 150 * 60 * 1000 },\n\n    \"OMET\": { toA4Timeout: 210 * 60 * 1000 },\n    \"MO41\": { toA4Timeout: 210 * 60 * 1000 },\n    \"MO42\": { toA4Timeout: 210 * 60 * 1000 }\n}\n\n/** {String[]} \"machine keys\". match the ones used in uibuilder's app. */\nconst macKeys = Object.keys(MACHINE_CFGS);\n/**  {String[]} devices that may be associated with each towersBitArray bit*/\nconst towersDevices = [\"redLight\", \"greenLight\", \"horn\"];\n{\n    let cfg;\n    for (let mKey in MACHINE_CFGS) {\n        cfg = MACHINE_CFGS[mKey];\n        cfg.displayName = mKey;\n        cfg.cellHeaderText = cfg.displayName;\n        cfg.toA3Timeout = 20 * 60 * 1000;\n        cfg.toA4Timeout = cfg.toA4Timeout;\n\n        cfg.blinkIntvOn = 480;//480;\n        cfg.blinkIntvOff = 320;//270;\n        \n        cfg.initCellSignalKey = \"noop\";\n        cfg.initTowerBits = {};\n            towersDevices.forEach(dev => cfg.initTowerBits[dev] = false);\n        cfg.customCss = {\n            capitalizedCssVarName:\"value\"\n        }\n        \n        \n        \n    }\n}\n\nconst customCss = [\n    {\"signalKey\":\"\"}\n]\n\nconst cellsLayout = [ //keys are: unique\n    [\"FA419\", \"FA420\", \"FA421\", \"FA422\"],\n    [\"FA423\", \"OMET\", \"MO41\", \"MO42\"],\n];\nflow.set(\"fallbackConfig\", {\n    machines: MACHINE_CFGS, \n    cellsLayout: cellsLayout,\n    /**  */\n    views:{\n        // \"display\":{ adminEnabled:this.cellsLayout.map( r => r.map(v => 0)) },\n        // \"SMED1\":{ adminEnabled:this.cellsLayout.map( r => r.map( v => r==0 )) }, //admin on row 0\n        // \"SMED2\":{ adminEnabled:this.cellsLayout.map( r => r.map( v => r==1 )) },\n        \"default\": { adminUI: [], exactIpList: []}, //adminUI: <macKey>[] : machines to allow to interact with\n        \"display\": { adminUI: [], exactIpList: [] },\n        \"SMED1\":{\n            exactIpList:[\"192.168.19.116\"],\n            //adminUI:cellsLayout[0].map(v => v),\n            adminUI: [\"FA419\", \"FA420\", \"FA421\", \"FA422\",\"FA423\",\"OMET\"]\n        },\n        \"SMED2\":{\n            exactIpList:[\"192.168.19.117\"],\n            //adminUI:cellsLayout[1].map(v => v),\n            adminUI:[\"MO41\",\"MO42\"]\n        },\n        \"supervisione\":{\n            exactIpList: [\n                \"192.168.19.130\",\n                \"192.168.19.131\",\n                \"192.168.19.132\",\n                \"192.168.19.133\",\n                \"192.168.19.134\"\n            ],\n            //adminUI:cellsLayout[1].map(v => v),\n            adminUI: macKeys\n        }\n    },\n    cfgPageIpList: [\n        \"192.168.19.130\",\n        \"192.168.19.131\",\n        \"192.168.19.132\",\n        \"192.168.19.133\",\n        \"192.168.19.134\"\n    ]\n});\n\nnode.send(flow.get(\"fallbackConfig\"))",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2010,
        "wires": [
            []
        ]
    },
    {
        "id": "64bc50015a2673c3",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "55a9133a1c5a95d1",
        "name": "set flow commonConfigSchema",
        "func": "//look in onStart",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// I didn't find a way to required:{$ref:$def/macKey/enum}\n    //so that editing the enum would edit the required as well\nconst macKeys=[\"FA419\",\"FA420\",\"FA421\",\"FA422\",\"FA423\",\"MO41\",\"MO42\",\"OMET\"];\nconst def = {\n    //\"$schema\":\"http://json-schema.org/draft-07/schema#\",\n    //\"title\":\"commonConfigSchema\",\n    //\"description\":\"global common config for this project\",\n    \"$defs\":{\n        \"javascriptFalsy\":{\n            \"enum\":[false, 0, null, \"\"]\n        },\n        \"macKey\":{\n            \"type\":\"string\",\n            \"enum\":macKeys\n        },\n        \"signalKey\":{\n            \"type\":\"string\",\n            \"enum\":[\"noop\",\"A1\",\"A2\",\"A3\",\"A4\",\"B\",\"C1\",\"C2\",\"D\",\"E\"],\n            \"default\":\"noop\"\n        },\n        \"towerDevice\":{\n            \"type\":\"string\",\n            \"enum\":[\"redLight\",\"greenLight\",\"horn\"]\n        },\n        \"machine\":{\n            \"type\":\"object\",\n            \"properties\":{\n                \"displayName\":{\"type\":\"string\", \"default\":\"this.parent.key\"},\n                \"cellHeaderText\":{\"type\":\"string\", \"default\":\"Linea + this.displayName\"},\n                \"toA3Timeout\":{\"type\":\"integer\", \"minimum\":0, \"default\":20000},\n                \"toA4Timeout\":{\"type\":\"integer\", \"minimum\":0, \"default\":\"120*60*1000\"},\n                \"initCellSignalKey\":{\"$ref\":\"#/$defs/signalKey\", \"default\":\"noop\"},\n                \"initTowerBits\":{\n                    \"type\":\"object\",\n                    \"propertyNames\":{\"$ref\":\"#/$defs/towerDevice\"},\n                    \"patternProperties\":{\".\":{\"enum\":[0, 1, true, false], \"default\":0}}\n                }\n            },\n            \"$comment\":\"exactly all the props are required\",\n            \"additionalProperties\":false,\n            \"required\":[\"displayName\", \"cellHeaderText\", \"toA3Timeout\", \"toA4Timeout\", \"initCellSignalKey\", \"initTowerBits\"]\n        }\n    },\n    \"type\":\"object\",\n    \"properties\":{\n        \"machines\":{\n            \"$description\": \"holding machine-specific configs. Made up of macKey:config pairs\",\n            \"type\":\"object\",\n            \"propertyNames\":{\"$ref\":\"#/$defs/macKey\"},\n            \"patternProperties\":{\".\":{\"$ref\":\"#/$defs/machine\"} },\n            \"additionalProperties\":false,\n            //\"required\":{\"$ref\":\"#/$defs/macKey/enum\"},\n            \"required\": macKeys\n        },\n        \"cellsLayout\":{\n            \"$description\": \"define the UI grid layout. grid will match this matrix\",\n            \"type\":\"array\",\n            \"items\":{\n                \"type\":\"array\",\n                \"items\":{\"anyOf\":[{\"$ref\":\"#/$defs/macKey\"},{\"$ref\":\"#/$defs/javascriptFalsy\"}]},\n                \"minItems\":1\n            },\n            \"minItems\":1,\n            \"default\":[[\"FA419\",\"FA420\",\"FA421\",\"FA422\"], [\"FA423\",\"OMET\",\"MO41\",\"MO42\"]]\n        }\n    },\n    \"required\":[\"cellsLayout\", \"machines\"],\n    \"additionalProperties\":false,\n};\n\n\n\nflow.set(\"commonConfigSchema\", def);\n//node.send(def);\nnode.status({fill: \"green\", text: Object.keys(def).join(' & ') });",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 2055,
        "wires": [
            []
        ]
    },
    {
        "id": "d610c787b889e968",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "55a9133a1c5a95d1",
        "name": "GLOBALI",
        "info": "",
        "x": 300,
        "y": 1965,
        "wires": []
    },
    {
        "id": "880bd0f57a96abd0",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "55a9133a1c5a95d1",
        "name": "commonConfig.json read",
        "links": [
            "d6097ab674846cb2"
        ],
        "x": 720,
        "y": 2025,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "b6da99b42391a973",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "55a9133a1c5a95d1",
        "name": "globalConfig isDefinedEvent",
        "mode": "link",
        "links": [
            "7fec593e8797271c",
            "0eba728f7025566f"
        ],
        "x": 860,
        "y": 2055,
        "wires": [],
        "l": true
    },
    {
        "id": "5209f75572f61192",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c3501ed6e9dcfd95",
        "name": "set devHost webapp view in global.config",
        "func": "\nlet idx = context.get(\"idx\") ?? 0;\nlet viewKeys = context.get(\"viewKeys\") ?? Object.keys(global.get(\"config\").views)\nlet hostIp = context.get(\"hostIp\"); //cuz it's needed in On start too\n\n//skip view if it's the same as the currently set one\nif(viewKeys[idx] == getViewForIp(hostIp))\n    idx++;\n\nsetViewForIp(viewKeys[idx], hostIp);\nnode.status({text:\"devHost's view set to \"+viewKeys[idx] })\n\n//increment and wrap\ncontext.set(\"idx\", (idx+1 >= viewKeys.length ? 0 : idx+1) )\n\n//########################################################################\n\nfunction getView(viewKey){\n    let config=global.get(\"config\");\n    var vk = viewKey;\n    var loopGuardIdx = 99;\n    do{\n        if(!config.views[vk])\n            throw new TypeError(\"unknown viewKey  \" + vk);\n        if(typeof(config.views[vk]) == \"string\"){\n            vk = config.views[vk];\n        }\n        else\n            return config.views[viewKey];\n    }while(loopGuardIdx--)\n\n    throw new Error(\"[getView()] retrieving view \"+viewKey+\" resulted in an infinite loop.\");\n}\n\nfunction setViewForIp(viewKey, ip){\n    let config = global.get(\"config\");   \n    \n    //remove ip from all views.exactIpList (there should only be one)\n    for(let vk in config.views){\n        let view=config.views[vk];\n        for(let i in view.exactIpList)\n            if(view.exactIpList[i] == ip){\n                view.exactIpList[i] = view.exactIpList[view.exactIpList.length-1];\n                view.exactIpList.length--;\n                node.warn({\"removedFrom\":view,\"ip\":ip})\n            }\n    }\n\n    //add ip to selected view\n    let view = getView(viewKey);\n    if(view.exactIpList)\n        view.exactIpList.push(ip);\n\n}\n\nfunction getViewForIp(ip) {\n    let config = global.get(\"config\");\n    for (let vk in config.views) {\n        let view = config.views[vk];\n        if (view.exactIpList && view.exactIpList.includes(ip))\n            return vk;\n    }\n    return \"default\";\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let hostIp = \"192.168.52.1\"\ncontext.set(\"hostIp\",hostIp);\n\n//display current view in node status\ncallWhenDef(()=>{\n    node.status({ text: \"devHost's view set to \" + getViewForIp(hostIp)})\n},\"config\")\n\n\nfunction getViewForIp(ip){\n    let config = global.get(\"config\");\n    for(let vk in config.views){\n        let view = config.views[vk];\n        if (view.exactIpList && view.exactIpList.includes(ip))\n            return vk;\n        // else\n        //     node.warn(ip + \" is not in \"+vk)\n    }\n    return \"default\";\n}\n\n\nfunction callWhenDef(cb, opts, ...globalNames) {\n    if (typeof (opts) == \"string\")\n        globalNames.push(opts);\n    let { timeout: timeout = 3000, retryDelay: retryDelay = 100, errorCb: errorCb = null } = (typeof (opts) == \"string\" ? opts : {});\n    var tout, intv;\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb() : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments })\n        }, timeout);\n    }\n    //set global-chacking interval\n    intv = setInterval(() => {\n        for (let name of globalNames)\n            if (global.get(name) === undefined || global.get(name) === null)\n                return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "140f5963e731eeca",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c3501ed6e9dcfd95",
        "name": "cycle",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1175,
        "y": 2040,
        "wires": [
            [
                "5209f75572f61192"
            ]
        ]
    },
    {
        "id": "e591ac746b349b71",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c3501ed6e9dcfd95",
        "name": "DBG: edit config file",
        "info": "",
        "x": 1210,
        "y": 1995,
        "wires": []
    },
    {
        "id": "159695dad087f948",
        "type": "file in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "filename": ".\\commonConfig.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 550,
        "y": 2400,
        "wires": [
            [
                "3c116b7c2cb7cb16",
                "cc89ce1d1a0c4b1d"
            ]
        ]
    },
    {
        "id": "e9ae13ce1d12693b",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "OnStartup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 305,
        "y": 2400,
        "wires": [
            [
                "159695dad087f948"
            ]
        ]
    },
    {
        "id": "c2697928034ac49b",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 2400,
        "wires": [
            [
                "9abae7b56bbf3c14",
                "d8a6ec6838de37b8"
            ]
        ]
    },
    {
        "id": "d6097ab674846cb2",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "commonConfig.json read",
        "mode": "link",
        "links": [
            "880bd0f57a96abd0"
        ],
        "x": 1515,
        "y": 2400,
        "wires": [],
        "l": true
    },
    {
        "id": "9abae7b56bbf3c14",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "READ SETTINGS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1495,
        "y": 2430,
        "wires": []
    },
    {
        "id": "c5a7c59c71f4ce52",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "scope": [
            "159695dad087f948"
        ],
        "uncaught": false,
        "x": 265,
        "y": 2280,
        "wires": [
            [
                "4b5d16595763d803"
            ]
        ]
    },
    {
        "id": "4b5d16595763d803",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "catch commonConfig fileNotFound",
        "func": "\nif(/ENOENT/.test(msg.error.message) && !context.get(\"triedOnce\")){\n    context.set(\"triedOnce\",true);\n    global.get(\"utils\").errorBlink(node, 60000);\n    return msg;\n}\nelse{\n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"triedOnce\",undefined)",
        "finalize": "",
        "libs": [],
        "x": 495,
        "y": 2280,
        "wires": [
            [
                "574b8aca29d477bf"
            ],
            [
                "e499962fb97d984c"
            ]
        ]
    },
    {
        "id": "e499962fb97d984c",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "catch commonConfig all",
        "func": "\n\nif(msg.error){\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    global.get(\"utils\").errorBlink(node, 60000);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2310,
        "wires": [
            []
        ]
    },
    {
        "id": "574b8aca29d477bf",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "create default",
        "func": "\n\ncallWhenDef(()=>{\n    node.send({payload:flow.get(\"fallbackConfig\")})\n},\"fallbackConfig\")\n\n/** repeatedly tries to fetch all flowNames with flow.get(). \n    * @param {function} cb called once ALL flowName are defined\n    * @param {Object} opts object holding optional function params. can be omitted passing the first flowName instead.\n    * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n    * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n    * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n    * @param  {...any} flowNames series of strings\n    */\nfunction callWhenDef(cb, opts, ...flowNames) {\n    if (typeof (opts) == \"string\")\n        flowNames.push(opts);\n    let { timeout: timeout = 3000, retryDelay: retryDelay = 100, errorCb: errorCb = null } = (typeof (opts) == \"string\" ? opts : {});\n    var tout, intv;\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb() : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments })\n        }, timeout);\n    }\n    //set flow-chacking interval\n    intv = setInterval(() => {\n        for (let name of flowNames)\n            if (flow.get(name) === undefined || flow.get(name) === null)\n                return\n        clearTimeout(tout);\n        clearInterval(intv);\n        cb();\n    }, retryDelay)\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 805,
        "y": 2280,
        "wires": [
            [
                "003ef9d46ea05d16",
                "89dbbf6b0d6980b0"
            ]
        ]
    },
    {
        "id": "3c116b7c2cb7cb16",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "schema",
                "pt": "msg",
                "to": "commonConfigSchema",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 735,
        "y": 2370,
        "wires": [
            [
                "cc89ce1d1a0c4b1d"
            ]
        ]
    },
    {
        "id": "003ef9d46ea05d16",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "schema",
                "pt": "msg",
                "to": "commonConfigSchema",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 945,
        "y": 2310,
        "wires": [
            [
                "89dbbf6b0d6980b0"
            ]
        ]
    },
    {
        "id": "fe9dc02efe4d771c",
        "type": "exec",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "command": "",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 450,
        "y": 2475,
        "wires": [
            [
                "084c89cc35050dec"
            ],
            [
                "084c89cc35050dec"
            ],
            [
                "084c89cc35050dec"
            ]
        ]
    },
    {
        "id": "084c89cc35050dec",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "exec out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 605,
        "y": 2475,
        "wires": []
    },
    {
        "id": "0658a3831dc5d007",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "x": 350,
        "y": 2475,
        "wires": [
            [
                "fe9dc02efe4d771c"
            ]
        ],
        "l": false
    },
    {
        "id": "4e7faa3f31e7391f",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "on missing file -> write default one",
        "info": "",
        "x": 345,
        "y": 2250,
        "wires": []
    },
    {
        "id": "d0677c4a55777811",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "COMMON CONFIG READ/WRITE",
        "info": "",
        "x": 335,
        "y": 2190,
        "wires": []
    },
    {
        "id": "360f32459e430863",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 680,
        "y": 2235,
        "wires": [
            [
                "574b8aca29d477bf"
            ]
        ],
        "l": false
    },
    {
        "id": "15c00fddf6febcfb",
        "type": "complete",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "",
        "scope": [],
        "uncaught": false,
        "x": 300,
        "y": 2790,
        "wires": [
            [
                "40a177edf60c7589"
            ]
        ]
    },
    {
        "id": "254ee6a725ad9a5f",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "poll 1s global.config",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 375,
        "y": 2820,
        "wires": [
            [
                "b960a6e10feb99a7"
            ]
        ]
    },
    {
        "id": "b960a6e10feb99a7",
        "type": "rbe",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 515,
        "y": 2820,
        "wires": [
            [
                "4bc01b77c9d3bacb",
                "ad42f06dcb4eb1eb"
            ]
        ],
        "l": false
    },
    {
        "id": "4bc01b77c9d3bacb",
        "type": "json",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 605,
        "y": 2805,
        "wires": [
            [
                "cec5e4982ce4afa1"
            ]
        ],
        "l": false
    },
    {
        "id": "cec5e4982ce4afa1",
        "type": "file",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "",
        "filename": ".\\commonConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 2805,
        "wires": [
            [
                "409cf881f68b9752"
            ]
        ]
    },
    {
        "id": "409cf881f68b9752",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "written settings",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 925,
        "y": 2805,
        "wires": []
    },
    {
        "id": "ad42f06dcb4eb1eb",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "OnConfigUpdate_out",
        "mode": "link",
        "links": [
            "019724bd0407040d",
            "7a56c04c308a37eb",
            "0be9e347c272ebc7",
            "382b9ee86b061715",
            "2829a11cc5455212",
            "c7f4104b21b3f0ed",
            "4f4965017bd78144",
            "79329d19f997f71e",
            "dcfdd404535dc654",
            "23fa7a8de9d4b748",
            "71cdad2935eab809",
            "a3c95a133003aada",
            "736f1d79123164d5"
        ],
        "x": 680,
        "y": 2850,
        "wires": [],
        "l": true
    },
    {
        "id": "40a177edf60c7589",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "get config",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 2790,
        "wires": [
            [
                "4bc01b77c9d3bacb",
                "ad42f06dcb4eb1eb"
            ]
        ]
    },
    {
        "id": "cac1485e416830bb",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "send",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 420,
        "y": 2850,
        "wires": [
            [
                "ad42f06dcb4eb1eb"
            ]
        ]
    },
    {
        "id": "7ffa0b30b6b91318",
        "type": "complete",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "OnConfigUpdate",
        "scope": [
            "4bc01b77c9d3bacb",
            "c2697928034ac49b"
        ],
        "uncaught": false,
        "x": 470,
        "y": 2895,
        "wires": [
            [
                "e097328f3afd162a"
            ]
        ]
    },
    {
        "id": "e097328f3afd162a",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "OnConfigUpdateEvent_out",
        "mode": "link",
        "links": [],
        "x": 700,
        "y": 2895,
        "wires": [],
        "l": true
    },
    {
        "id": "be6cdfc7a6f5fa2c",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b99d3df5ef07d131",
        "name": "KEEP UPDATED",
        "info": "",
        "x": 310,
        "y": 2745,
        "wires": []
    },
    {
        "id": "cc89ce1d1a0c4b1d",
        "type": "json",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 845,
        "y": 2400,
        "wires": [
            [
                "c2697928034ac49b"
            ]
        ],
        "l": false
    },
    {
        "id": "a74a33a3ec7c7366",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "",
        "scope": [
            "cc89ce1d1a0c4b1d"
        ],
        "uncaught": false,
        "x": 810,
        "y": 2430,
        "wires": [
            [
                "99496b3705baccc9",
                "bb6a645aae24c4e7"
            ]
        ]
    },
    {
        "id": "58a55157342e41e1",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 815,
        "y": 2460,
        "wires": [
            [
                "bb6a645aae24c4e7"
            ]
        ],
        "l": false
    },
    {
        "id": "99496b3705baccc9",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "log schema error",
        "func": "if(msg.schemaError){\n    node.error(\"SCHEMA ERROR PARSING CONFIG FILE\")\n}\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"src\":msg.error.source.id,\"n\":msg.error.source.name,\"full\":msg});\n}\nelse{\n    node.error(msg);\n}\nglobal.get(\"utils\").errorBlink(node, 60000);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 965,
        "y": 2430,
        "wires": [
            []
        ]
    },
    {
        "id": "bb6a645aae24c4e7",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "_uib showToast",
        "func": "return {\n    \"_uib\": {  // Required. VueJS Component data    \n        \"componentRef\": \"globalNotification\", // Required.\n        // options object is optional. Options are passed directly to the bootstra-vue `<toast>` component.\n        // These are examples only.\n        \"options\": { // all of the entries are optional.\n            // Creates a title section above the content that is highlighted\n            \"title\": \"Schema Parsing Error\",\n            // Main message content (appears after any payload). May contain HTML.\n            \"content\":\n                `An error occurred while retrieving data from ${msg.filename}.\n                <br>fix the errors or delete the file to restore factory defaults.\n                <br>\n                <br>Errors:<pre>${msg.schemaErrors}<pre>`,\n            // Default false. If true stops auto-Hide. \n            // Click on the close button (BV) to remove the toast.\n            // For non-BV, click on box to clear it or on background to clear all.\n            \"noAutoHide\": true,\n            // Optional colour variant. error, warning, info, primary, secondary, success\n            \"variant\": \"danger\",\n            // Default display is semi-transparent (BV only), set this to true to make the message solid colour.\n            \"solid\": true,\n\n            // BV Only. New message appears above old by default (false), change to true to add to the bottom instead.\n            \"append\": true,\n            // BV Only. Controls where on the page the toast appears. Several standard locations are available.\n            // default is top-right. Custom positions can be set by including a <toaster> element in your HTML.\n            \"toaster\": \"b-toaster-top-center\",\n            // For BV, more options are available. @see https://bootstrap-vue.org/docs/components/toast\n        }\n    }\n}\n\n\n\n\n\n/* //from http://127.0.0.1:1880/uibuilder/techdocs/#/pre-defined-msgs?id=vuejs-ui-notification-toast-control-message\n{\n    \"_uib\": {  // Required. VueJS Component data    \n        \"componentRef\": \"globalNotification\", // Required.\n        // options object is optional. Options are passed directly to the bootstra-vue `<toast>` component.\n        // These are examples only.\n        \"options\": { // all of the entries are optional.\n            // Creates a title section above the content that is highlighted\n            \"title\": \"This is the <i>title</i>\",\n            // Main message content (appears after any payload). May contain HTML.\n            \"content\": \"This is content <span style=\\\"color:red;\\\">in addition to</span> the payload\",\n            // Default false. If true stops auto-Hide. \n            // Click on the close button (BV) to remove the toast.\n            // For non-BV, click on box to clear it or on background to clear all.\n            \"noAutoHide\": true,\n            // 5000 by default, how long the message stays on-screen. Hover over message to pause countdown.\n            \"autoHideDelay\": 1500,\n            // Optional colour variant. error, warning, info, primary, secondary, success\n            \"variant\": \"info\",\n            // Default display is semi-transparent (BV only), set this to true to make the message solid colour.\n            \"solid\": true,\n\n            // BV Only. New message appears above old by default (false), change to true to add to the bottom instead.\n            \"append\": true,\n            // BV Only. If present, the whole message is turned into a link. Click takes the client to the URL.\n            \"href\": \"https://bbc.co.uk\",\n            // BV Only. Controls where on the page the toast appears. Several standard locations are available.\n            // default is top-right. Custom positions can be set by including a <toaster> element in your HTML.\n            \"toaster\": \"b-toaster-top-center\",\n            // For BV, more options are available. @see https://bootstrap-vue.org/docs/components/toast\n        },\n    },\n\n    // Optional. Will be added to the notification message (content). May be HTML.\n    \"payload\": \"<any>\",\n\n    // Optional. ID of client (from Socket.IO) - msg would only be sent to this client.\n    \"_socketId\": \"/extras#sct0MeMrdeS5lwc0AAAB\",\n}\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 955,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "27a6d7dd43730e07",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "on validation error -> log",
        "info": "",
        "x": 870,
        "y": 2490,
        "wires": []
    },
    {
        "id": "ea8a17ead36a0d69",
        "type": "json",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 995,
        "y": 2370,
        "wires": [
            [
                "c2697928034ac49b",
                "1e1402bb46babf61",
                "13b3c1e935ebdc18"
            ]
        ],
        "l": false
    },
    {
        "id": "ed66d4d907d05f90",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3562e00f4ed04fb9",
        "name": "",
        "scope": [
            "89dbbf6b0d6980b0"
        ],
        "uncaught": false,
        "x": 1020,
        "y": 2250,
        "wires": [
            [
                "804a3b4edd45745d"
            ]
        ]
    },
    {
        "id": "89dbbf6b0d6980b0",
        "type": "json",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3562e00f4ed04fb9",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1060,
        "y": 2280,
        "wires": [
            [
                "9521d980da995953"
            ]
        ],
        "l": false
    },
    {
        "id": "804a3b4edd45745d",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3562e00f4ed04fb9",
        "name": "fatal error",
        "func": "node.error(\"INVALID FALLBACK JSON\")\nnode.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\nglobal.get(\"utils\").errorBlink(node, 60000);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1145,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "9521d980da995953",
        "type": "file",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3562e00f4ed04fb9",
        "name": "",
        "filename": ".\\commonConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1175,
        "y": 2280,
        "wires": [
            [
                "7ca2acff2636e9cb",
                "ea8a17ead36a0d69"
            ]
        ]
    },
    {
        "id": "a62e3a70e91d913b",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3562e00f4ed04fb9",
        "name": "never: default fails validation",
        "info": "",
        "x": 1100,
        "y": 2220,
        "wires": []
    },
    {
        "id": "6cadbc88a52f084e",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "51320eb4ac48f6d8",
        "name": "",
        "scope": [
            "7ca2acff2636e9cb",
            "9521d980da995953"
        ],
        "uncaught": false,
        "x": 1390,
        "y": 2250,
        "wires": [
            [
                "3f3da9a9e6dfd77d"
            ]
        ]
    },
    {
        "id": "7ca2acff2636e9cb",
        "type": "file in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "51320eb4ac48f6d8",
        "name": "",
        "filename": ".\\commonConfig.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1440,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "3f3da9a9e6dfd77d",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "51320eb4ac48f6d8",
        "name": "fatal error",
        "func": "node.error(\"CANNOT READ or WRITE CONFIG FILE. All configs will be lost\")\nnode.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\nglobal.get(\"utils\").errorBlink(node, 60000);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "e0a688609374d846",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "51320eb4ac48f6d8",
        "name": "check if file was actually written to",
        "info": "",
        "x": 1480,
        "y": 2310,
        "wires": []
    },
    {
        "id": "1e1402bb46babf61",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "51320eb4ac48f6d8",
        "name": "OVERWRITTEN SETTINGS",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 2340,
        "wires": []
    },
    {
        "id": "d95a1a21640bfe9a",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "trigger config fileOverwrite",
        "links": [
            "03d0db5569f781b7",
            "40b79431b626dcd3"
        ],
        "x": 375,
        "y": 2655,
        "wires": [
            [
                "53965897f5958030"
            ]
        ],
        "l": true
    },
    {
        "id": "c9a057f0fe0f1dcc",
        "type": "json",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 820,
        "y": 2655,
        "wires": [
            [
                "688c8387f1d23514"
            ]
        ],
        "l": false
    },
    {
        "id": "688c8387f1d23514",
        "type": "file",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "",
        "filename": ".\\commonConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 935,
        "y": 2655,
        "wires": [
            [
                "9ee84ad3aca6e773"
            ]
        ]
    },
    {
        "id": "2006d95bd5b9c4fe",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "",
        "scope": [
            "c9a057f0fe0f1dcc"
        ],
        "uncaught": false,
        "x": 780,
        "y": 2625,
        "wires": [
            [
                "cf6a4d15ad2bfcc3"
            ]
        ]
    },
    {
        "id": "cf6a4d15ad2bfcc3",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "fatal error",
        "func": "node.error(\"INVALID FALLBACK JSON\")\nnode.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\nglobal.get(\"utils\").errorBlink(node, 60000);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 905,
        "y": 2625,
        "wires": [
            []
        ]
    },
    {
        "id": "cdde2147dcc706fb",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "GUI editor update",
        "info": "",
        "x": 480,
        "y": 2610,
        "wires": []
    },
    {
        "id": "da1b215d36cc79eb",
        "type": "change",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "get config",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 2655,
        "wires": [
            [
                "c9a057f0fe0f1dcc"
            ]
        ]
    },
    {
        "id": "9ee84ad3aca6e773",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "WRITTEN SETTINGS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1155,
        "y": 2655,
        "wires": []
    },
    {
        "id": "53965897f5958030",
        "type": "trigger",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2964739a3908b397",
        "name": "3s",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 555,
        "y": 2655,
        "wires": [
            [
                "da1b215d36cc79eb"
            ]
        ]
    },
    {
        "id": "ba830058eb4a546d",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "create default GUIVar",
        "mode": "link",
        "links": [
            "aad858bb92440b2a",
            "df49685f1446b641",
            "1c3e490f922e0aaa"
        ],
        "x": 1545,
        "y": 2190,
        "wires": [],
        "l": true
    },
    {
        "id": "13b3c1e935ebdc18",
        "type": "delay",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1370,
        "y": 2190,
        "wires": [
            [
                "ba830058eb4a546d"
            ]
        ]
    },
    {
        "id": "d8a6ec6838de37b8",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "3d124027146d0e22",
        "name": "upd uiAbs",
        "func": "//modifica postuma\n//aggiorna la vista 'user' in uiAbs con uno dei campi di config\n//preposto all'evento per evitare l'introduzione di bug\nconst uiAbs=global.get(\"uiAbs\");\nconst config=global.get(\"config\");\nif(uiAbs)\n    uiAbs.views.user.ipList = config.cfgPageIpList\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1325,
        "y": 2400,
        "wires": [
            [
                "d6097ab674846cb2"
            ]
        ]
    },
    {
        "id": "5442487d3efbd896",
        "type": "ui_text",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "group": "ff22d246a1b65b24",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "towBitArr",
        "label": "towBitArr",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1635,
        "y": 630,
        "wires": []
    },
    {
        "id": "1dd11d91909620da",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1230,
        "y": 615,
        "wires": [
            [
                "474d4da6f7366e31"
            ]
        ]
    },
    {
        "id": "6b77363af9b6dc90",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "name": "format",
        "func": "\n\nfunction bitArrToString(arr) {\n    var str = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 4 == 0 && i)\n            str += \"|\"\n        str += parseInt(0 + arr[i]) + \",\";\n    }\n    return str;\n}\n\nmsg.payload=bitArrToString(global.get(\"towersBitArray\"))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1485,
        "y": 630,
        "wires": [
            [
                "5442487d3efbd896"
            ]
        ]
    },
    {
        "id": "6704700843f92d65",
        "type": "ui_text",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "group": "ff22d246a1b65b24",
        "order": 6,
        "width": 11,
        "height": 4,
        "name": "tow json",
        "label": "towers",
        "format": "<pre>{{msg.payload}}<pre>",
        "layout": "col-center",
        "className": "",
        "x": 1640,
        "y": 705,
        "wires": []
    },
    {
        "id": "5810fab39fed4fd8",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "name": "format",
        "func": "\nconst tow = global.get(\"towersControl\");\n\nvar macs = {}\nfor(let mk of tow.dictionary.macKeys){\n    macs[mk] = tow[mk];\n}\n\n//msg.payload = JSON.stringify(macs).replaceAll('},','}\\n<br>,')\nmsg.payload = syntaxHighlight(macs) .replaceAll('},','}\\n,');\n//msg.payload = msg.payload.replaceAll('{\"', '{<br>\\n\"');\n\nreturn msg;\n\n\n// return formatted HTML version of JSON object\nfunction syntaxHighlight(json) {\n    json = global.get(\"utils\").safeStringify(json, 0)\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n    json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var cls = 'number'\n        if ((/^\"/).test(match)) {\n            if ((/:$/).test(match)) {\n                cls = 'key'\n            } else {\n                cls = 'string'\n            }\n        } else if ((/true|false/).test(match)) {\n            cls = 'boolean'\n        } else if ((/null/).test(match)) {\n            cls = 'null'\n        }\n        return '<span class=\"' + cls + '\">' + match + '</span>'\n    })\n    return json\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1499.765625,
        "y": 704.75,
        "wires": [
            [
                "6704700843f92d65"
            ]
        ]
    },
    {
        "id": "474d4da6f7366e31",
        "type": "switch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1380,
        "y": 690,
        "wires": [
            [
                "6b77363af9b6dc90",
                "5810fab39fed4fd8",
                "1aca12531673be7d"
            ]
        ],
        "l": false
    },
    {
        "id": "1aca12531673be7d",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "name": "format",
        "func": "\nconst tow = global.get(\"towersControl\");\n\n\nlet outJson = {}\nfor(let bit in tow.sharedBits){\n    let bitItem = tow.sharedBits[bit];\n    //format as \"(devK) {mK:val, mk:val, ..} -> output() \"\n    outJson[bit] = `(${bitItem.devKey})` + JSON.stringify(bitItem.values).replaceAll(new RegExp('[\\\\\"]', \"g\"), '') + \"-> \" + bitItem.output().toString();\n}\n\nmsg.payload = JSON.stringify(outJson).replaceAll('\",','\"\\n<br>,');\n//node.warn(msg.payload);\n//msg.payload = msg.payload.replaceAll('{\"', '{<br>\\n\"');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1495,
        "y": 750,
        "wires": [
            [
                "562716c144a89cd7"
            ]
        ]
    },
    {
        "id": "562716c144a89cd7",
        "type": "ui_text",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "group": "ff22d246a1b65b24",
        "order": 7,
        "width": 11,
        "height": 2,
        "name": "tow json",
        "label": "sharedBits",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1635.234375,
        "y": 750.25,
        "wires": []
    },
    {
        "id": "b4da2ffda24c082f",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "c7aff72d1a698bfc",
        "name": "DBG FOR TOWER CONTROL",
        "info": "",
        "x": 1220,
        "y": 570,
        "wires": []
    },
    {
        "id": "4018f9117b219836",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "74dd883b5669e797",
        "name": "#dbg toggle",
        "info": "",
        "x": 1175,
        "y": 675,
        "wires": []
    },
    {
        "id": "175cc861d4fdc430",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "74dd883b5669e797",
        "name": "toggle",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "toggle",
        "payloadType": "str",
        "x": 1195,
        "y": 705,
        "wires": [
            [
                "3b7aeec4f66ea82e"
            ]
        ]
    },
    {
        "id": "3b7aeec4f66ea82e",
        "type": "gate",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "74dd883b5669e797",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1285,
        "y": 735,
        "wires": [
            [
                "474d4da6f7366e31"
            ]
        ],
        "l": false
    },
    {
        "id": "e0acafe1e64fb69d",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "74dd883b5669e797",
        "name": "poll 1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 1185,
        "y": 735,
        "wires": [
            [
                "3b7aeec4f66ea82e"
            ]
        ]
    },
    {
        "id": "7f3f720f5ffa9ec8",
        "type": "link in",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "74dd883b5669e797",
        "name": "all dbgGates",
        "links": [
            "0156636ac6d0af9f",
            "f2c88c2fc92c55ef"
        ],
        "x": 1180,
        "y": 765,
        "wires": [
            [
                "3b7aeec4f66ea82e"
            ]
        ],
        "l": true
    },
    {
        "id": "1740c7857c8fad72",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2d1b2de20aa0c22b",
        "name": "catch GUIVars all",
        "func": "\n\nif(msg.error){\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    global.get(\"utils\").errorBlink(node, 60000);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1745,
        "y": 255,
        "wires": [
            []
        ]
    },
    {
        "id": "7933f8de41037804",
        "type": "catch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2d1b2de20aa0c22b",
        "name": "catchAll",
        "scope": null,
        "uncaught": true,
        "x": 1570,
        "y": 225,
        "wires": [
            [
                "9ead91c7d56efac8"
            ]
        ]
    },
    {
        "id": "9ead91c7d56efac8",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "2d1b2de20aa0c22b",
        "name": "catch specific err",
        "func": "\n\nif(msg.error){\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    global.get(\"utils\").errorBlink(node, 60000);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1745,
        "y": 225,
        "wires": [
            [
                "1740c7857c8fad72"
            ]
        ]
    },
    {
        "id": "1b4cb03a20cec83f",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "b42e082536c528eb",
        "name": "uib-sender-node",
        "info": "rimosso per non avere dipendenze",
        "x": 1145,
        "y": 2460,
        "wires": []
    },
    {
        "id": "8022309e33d1fc35",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "6c37c577dff9338f",
        "name": "DASHBOARD MANUAL COMMANDS",
        "info": "",
        "x": 2175,
        "y": 315,
        "wires": []
    },
    {
        "id": "d650be45c00310ff",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "superUser",
        "func": "let uiAbs = global.get(\"uiAbs\");\nuiAbs.prepareMsg_setUiToView(msg, uiAbs.views[\"superUser\"]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2285,
        "y": 480,
        "wires": [
            [
                "22e383f27f1bc621"
            ]
        ]
    },
    {
        "id": "c7aba2e30d55588e",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2110,
        "y": 480,
        "wires": [
            [
                "d650be45c00310ff"
            ]
        ]
    },
    {
        "id": "7ad872f26ea91270",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "SET DASHBOARD VIEW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "\"for \"&socketip&\" used \"&dashboardViewKey",
        "statusType": "jsonata",
        "x": 2630,
        "y": 465,
        "wires": []
    },
    {
        "id": "fd1ac7c0983a1ddf",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2095,
        "y": 450,
        "wires": [
            [
                "114253b55d9acd6d"
            ]
        ]
    },
    {
        "id": "114253b55d9acd6d",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "user",
        "func": "let uiAbs = global.get(\"uiAbs\");\nuiAbs.prepareMsg_setUiToView(msg, uiAbs.views[\"user\"]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 450,
        "wires": [
            [
                "22e383f27f1bc621"
            ]
        ]
    },
    {
        "id": "e1a3533d1dac46dd",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2050,
        "y": 420,
        "wires": [
            [
                "6a2d379b104394df"
            ]
        ],
        "l": false
    },
    {
        "id": "6a2d379b104394df",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "unauth",
        "func": "let uiAbs = global.get(\"uiAbs\");\nuiAbs.prepareMsg_setUiToView(msg, uiAbs.views[\"unauth\"]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 420,
        "wires": [
            [
                "22e383f27f1bc621"
            ]
        ]
    },
    {
        "id": "3fb2b1056fa192d8",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "uiControl input",
        "mode": "link",
        "links": [
            "5b77be932011ed23"
        ],
        "x": 2595,
        "y": 435,
        "wires": [],
        "l": true
    },
    {
        "id": "22e383f27f1bc621",
        "type": "switch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2455,
        "y": 450,
        "wires": [
            [
                "7ad872f26ea91270",
                "3fb2b1056fa192d8"
            ]
        ],
        "l": false
    },
    {
        "id": "8eefeac72777a334",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "0d7119851507d372",
        "name": "send view to uicontrol dashboard",
        "info": "",
        "x": 2165,
        "y": 375,
        "wires": []
    },
    {
        "id": "38f55c7bd3e4d7d1",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2100,
        "y": 630,
        "wires": [
            [
                "05890cc60d2c4f02"
            ]
        ]
    },
    {
        "id": "05890cc60d2c4f02",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "0",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 630,
        "wires": [
            [
                "49b3f07c47904b98"
            ]
        ]
    },
    {
        "id": "47685d9dadc18c07",
        "type": "link out",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "uiControl input",
        "mode": "link",
        "links": [
            "5b77be932011ed23"
        ],
        "x": 2515,
        "y": 630,
        "wires": [],
        "l": true
    },
    {
        "id": "b8d6a4deda79af2d",
        "type": "debug",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "SET DASHBOARD VIEW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "\"for \"&socketip&\" used \"&dashboardViewKey",
        "statusType": "jsonata",
        "x": 2590,
        "y": 675,
        "wires": []
    },
    {
        "id": "49b3f07c47904b98",
        "type": "switch",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2385,
        "y": 675,
        "wires": [
            [
                "47685d9dadc18c07",
                "b8d6a4deda79af2d"
            ]
        ],
        "l": false
    },
    {
        "id": "62beae31d5aba7c0",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "1",
        "func": "msg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 675,
        "wires": [
            [
                "49b3f07c47904b98"
            ]
        ]
    },
    {
        "id": "ce2e0b1dbe348909",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2100,
        "y": 675,
        "wires": [
            [
                "62beae31d5aba7c0"
            ]
        ]
    },
    {
        "id": "6e8e0a6f4f415f21",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "2",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 720,
        "wires": [
            [
                "49b3f07c47904b98"
            ]
        ]
    },
    {
        "id": "8e971b4f90300ea9",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2110,
        "y": 720,
        "wires": [
            [
                "6e8e0a6f4f415f21"
            ]
        ]
    },
    {
        "id": "f3b5110cbe550b62",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "switch to tab",
        "info": "",
        "x": 2110,
        "y": 585,
        "wires": []
    },
    {
        "id": "e7b7f92ede6d0942",
        "type": "inject",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2110,
        "y": 765,
        "wires": [
            [
                "8be2693bfd6a9a13"
            ]
        ]
    },
    {
        "id": "8be2693bfd6a9a13",
        "type": "function",
        "z": "403f66717aac4ca2",
        "d": true,
        "g": "9261c1f58513ca26",
        "name": "2",
        "func": "msg.payload = \"unauth\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2255,
        "y": 765,
        "wires": [
            [
                "49b3f07c47904b98"
            ]
        ]
    },
    {
        "id": "a70115f293570e26",
        "type": "comment",
        "z": "403f66717aac4ca2",
        "name": "IF YOU REMOVE STUFF TO CLEAN UP PROD, REMEMBER TO REMOVE DEV DEPENDENCIES FROM PACKAGE.JSON AS WELL",
        "info": "",
        "x": 630,
        "y": 75,
        "wires": []
    }
]