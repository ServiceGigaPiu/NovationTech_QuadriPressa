[
    {
        "id": "2831664434f14a33",
        "type": "tab",
        "label": "UI Presse",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36ca49c2bbce1ae5",
        "type": "tab",
        "label": "UI grafici",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2260f1f88d7c60bf",
        "type": "tab",
        "label": "UI gestionale",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "69a590bb3eaafea5",
        "type": "tab",
        "label": "Impostazioni",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9922a8114f46702b",
        "type": "tab",
        "label": "Query S7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "538b483fa008eb58",
        "type": "tab",
        "label": "utility: UI Abstraction",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f31d3b30c01f78f",
        "type": "tab",
        "label": "logo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7da3a158c918645d",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b056d055af2c2fc4",
            "f18f51d80170296a",
            "775ed5336618f048",
            "92d9744aa1e9f22d",
            "6173c68c398eeee3"
        ],
        "x": 279,
        "y": 364,
        "w": 707,
        "h": 127
    },
    {
        "id": "3df0d3098de49375",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "94a755f368e072f5",
            "8c17cb235692cd83",
            "6ee919044dca5266",
            "dfae6536e47d96c1",
            "f129b1cd09faa95a",
            "c9eb164e0cd29647",
            "0b9259e05173ffcb",
            "363bd50b957a8410",
            "269e8baa56faef78",
            "1f797f8d865e8ebd",
            "b34226be7162078f"
        ],
        "x": 714,
        "y": 2209,
        "w": 592,
        "h": 517
    },
    {
        "id": "83e9f4234bb5157e",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6adf7e418418b659",
            "0fe8d0737ad04e30",
            "e5f487ee4d811b22",
            "fc435c5a1f9f0c92",
            "0c2f824d1edcbe0b"
        ],
        "x": 1104,
        "y": 364,
        "w": 707,
        "h": 127
    },
    {
        "id": "43b5ce037e6e5304",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f055a55171647080",
            "d3d062196750b6e0",
            "ae1033ecbfde9a8d",
            "b7818a6107fc7c09",
            "cdfe98ebc6268de8"
        ],
        "x": 729,
        "y": 979,
        "w": 452,
        "h": 127
    },
    {
        "id": "f6a4cccae63b60ae",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15870b35cd8f1905",
            "e330946719521da8",
            "0f442f62dc9f61be",
            "51c7d7b3525d3ca6",
            "28c5c8c6a8cbdd41",
            "f0d5683c1d5e6fa4",
            "b16cccaa62171b60",
            "3714a803248cefeb",
            "34fe2b838d57bdf8",
            "a72b1c3580f09904"
        ],
        "x": 84,
        "y": 4219,
        "w": 1102,
        "h": 562
    },
    {
        "id": "e2961306402a77aa",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7f11448ec8122f29",
            "0933e76415d3b0d8",
            "a4e2b321a1dc18d5",
            "892a21e16fd8d586",
            "f15ed631a334ae18",
            "2bd07d0a756e3fd5",
            "ecf7ba24682eae0d",
            "70b9c5719558ad66",
            "73bd49c19cb4ea06",
            "78a704a3e466fce3"
        ],
        "x": 84,
        "y": 3574,
        "w": 1072,
        "h": 562
    },
    {
        "id": "3a3a52a5dbc9568a",
        "type": "group",
        "z": "69a590bb3eaafea5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "65449a11e08aa594",
            "5848c5489be4b695",
            "1f1ff5e26b2ddf38"
        ],
        "x": 799,
        "y": 724,
        "w": 292,
        "h": 82
    },
    {
        "id": "408c86b39f332966",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b3472d016caff6c0",
            "ee85a2f48f8b5e02",
            "1268ad479e7f6bab",
            "78c6b35445bf1217",
            "6e645e2849c474eb"
        ],
        "x": 654,
        "y": 1099
    },
    {
        "id": "b0737e4c04737b82",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d662599943fbc2bd",
            "df7219d880358536",
            "f0e4c9cb0e39cbf8",
            "b2c3d112c3d0c889",
            "588342109c719d84"
        ],
        "x": 173,
        "y": 409,
        "w": 1509,
        "h": 1398
    },
    {
        "id": "2f4be50b7d91c706",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90f4c3e098f997c4",
            "da664ace067df2dc",
            "99a287f71f858ba2",
            "d111c07926a908c5",
            "3bea7933e72005a0",
            "9e7d5e610f97bb9a",
            "8dfcb46d23e73d53",
            "9cb2558db9346cae",
            "823428c64dadbb25",
            "bd2c16c7828242aa",
            "0ca3c958633a0c8b"
        ],
        "x": 124,
        "y": 2584,
        "w": 1083,
        "h": 637
    },
    {
        "id": "81fdc4e21618ea8e",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b0cd0777fbffd034",
            "9dbec7cb448f90d2",
            "d74f25d28c5fec88",
            "09f63ed09817f46d",
            "79112dc81c4df1e1",
            "3d31803aef992266",
            "85ef1e45805265d5"
        ],
        "x": 154,
        "y": 14
    },
    {
        "id": "6aaddccc85e9cc4d",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2d42bfb3b1c1476f",
            "6b6aad74d9d607ed",
            "e83df1da93dc1fed",
            "715b65f58c966686",
            "81faf0db9baee789",
            "bb19e1a6f465c228",
            "1f0e6e97749e1662",
            "016705b24c943eb8",
            "49ec813eb9ef324d",
            "fe70ebeba81a880f",
            "20e1e02ce292a867",
            "6058f3345d37e4dc",
            "e8ab6a202bfe33f6",
            "420d2f3b4f8caa1b",
            "4122cbdcb42e0560",
            "efe20e68d0236d94",
            "12fde84fc27f5e55",
            "7d5d66e4e2b480f4",
            "40be6c6cb5f36f37",
            "d13313512ae49a4a",
            "d3cdc80e459cdf33"
        ],
        "x": 1224,
        "y": 704
    },
    {
        "id": "cccb0df7921dec2f",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0b39f4fe0d2dcc2d",
            "6c287487702754f2",
            "7e90142dbb2a2111",
            "1aaef86389397dcf",
            "57b9c2d6e11c5cb7",
            "15d6f446b735362b",
            "b7700a2027731da3"
        ],
        "x": 1334,
        "y": 709,
        "w": 342,
        "h": 247
    },
    {
        "id": "63f089643e332739",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2bd9331f9185534",
            "21bbb7d46384e287",
            "0c753ce1969e7a11",
            "a70fe69b7459b746",
            "2639fa3be4067762"
        ],
        "x": 123,
        "y": 1239
    },
    {
        "id": "1999eebe26eba53b",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "23b242037b1d989d",
            "173f861c8cd401be",
            "a3b8edad7fbf25b8",
            "90b855390ac72238",
            "fe3da39d45bc7cd4"
        ],
        "x": 1843,
        "y": 1239
    },
    {
        "id": "81b3f35a68120159",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "31d694d58ddd3c6c",
            "d4f58c108037d973",
            "6067e973b7dd40eb",
            "5bc8af56489bcd9d"
        ],
        "x": 208,
        "y": 1124,
        "w": 1419,
        "h": 993
    },
    {
        "id": "ef0c6ed3656f62f1",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0b20d7db2393da61",
            "9170b812dbe446e7",
            "2ca6f2c1b0c21cf1",
            "9e32d6a46ccf09ee"
        ],
        "x": 1928,
        "y": 1124,
        "w": 1424,
        "h": 978
    },
    {
        "id": "72376f020cbdd7b4",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "03ef9a71f127822f",
            "8bc986f7994d89a7",
            "b1f8c54951ecbf7f",
            "84182d5ef898d336",
            "c59fa5143bd96e16"
        ],
        "x": 123,
        "y": 2659
    },
    {
        "id": "560b01ff2e88daac",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2fa2db606a6d80c1",
            "92109e084c266e2e",
            "f396ce22bbf03344",
            "77f0a4e1ac50f8a4",
            "35b7fdc595f7d3c5"
        ],
        "x": 1843,
        "y": 2659
    },
    {
        "id": "c947217d7b4fccbd",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b5b2625d5b358ac6",
            "9f2647ae0bb0686b",
            "c25454224d93f0a4",
            "a93dbb5749094ec0"
        ],
        "x": 208,
        "y": 2764,
        "w": 1424,
        "h": 978
    },
    {
        "id": "a22652e0e5a00422",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2ed5f9d006db777d",
            "9c42f9c7d3cec4e7",
            "4319550e30808765",
            "b1df0fb233ae57b9"
        ],
        "x": 1928,
        "y": 2764,
        "w": 1424,
        "h": 978
    },
    {
        "id": "ad333cdc3a9edd51",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6412ab5d90cfce0c",
            "8cc8b8736d1102b3",
            "66b3788924f607a2",
            "a817f30ecf7302d4",
            "17c1ab0431cd8ccc",
            "1a030fa6a72f51d6",
            "1be724ee4d388de3",
            "8b321fcb911b77fd"
        ],
        "x": 134,
        "y": 699
    },
    {
        "id": "89618de1371e00e8",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2032554750613969",
            "e1a8c1010541c5e9",
            "48f4e0f84560c01c",
            "afa57d1c3ef490ec",
            "de2490372a9afcf4",
            "1adb6c93eb34ea15",
            "16e2194c68ce854b",
            "23908ba29a765ed4"
        ],
        "x": 199,
        "y": 674,
        "w": 837,
        "h": 252
    },
    {
        "id": "6b0818d4a0baca5e",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9f767a4b86454460",
            "7f9c0ab46277a85f",
            "935ab1c92ceb192a",
            "d2554bc4cfd2945f",
            "a0ea58ab11051947",
            "545e9a9385547c1a",
            "ba40bf7df49ff334",
            "1357b3ee16a3cc63",
            "2751f8a9a425be69",
            "85e4a01c096f28a3",
            "92d32ee8e1251cea",
            "23a5a7bba4747615",
            "36bdb368ddeac984",
            "5cd9e3ef9922f088",
            "1fbf3d438abed790",
            "b83d044ecee3faf8",
            "8437a7d22a9f64c3"
        ],
        "x": 184,
        "y": 1839,
        "w": 1252,
        "h": 282
    },
    {
        "id": "dd28804963c0bc60",
        "type": "group",
        "z": "9922a8114f46702b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ab40650461f823e3",
            "bd629777c9b54b8f",
            "528adee0da78807c",
            "3950d474263fe0c5",
            "d4f9793e37a6375a",
            "fc5cb067036c4315",
            "ee59f528d39b796f",
            "5ce383fc8f203d80",
            "a188fac48c65b3be",
            "2b1f55ad3aabcc65",
            "416ca37ceaf57e14",
            "856c6c8e9fbd9ec1",
            "a213156032b5e251",
            "164db36128db7462",
            "9dc8240d440f560b",
            "382a6197f96e3cd0",
            "cc59c1ac68580b95",
            "c839a1cea19f06fc",
            "58bc8c7447e48a14",
            "7a21669f3c26b95c",
            "7f7d732440d6aec6",
            "0f6ad999ba80fa0f",
            "bf98577d363cef6f",
            "8943b4549c5df00c"
        ],
        "x": 314,
        "y": 259
    },
    {
        "id": "b45e5b597df321ef",
        "type": "group",
        "z": "69a590bb3eaafea5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e3696b26fb98fd8f",
            "c738458e2f0166fd",
            "a79139d6fa8686e2",
            "47787bd5c3f095c5",
            "cd632756435b2754",
            "9aac6231207dd902",
            "27b14ed1b833f3fa",
            "711adcc293c4fe4e",
            "16a57738beed3d92",
            "0c1c5418ae454848",
            "afddbb067e0f39ac",
            "d552f3455898102d",
            "5f0e4cd2a231d950",
            "5d4297555cadcdff",
            "11ffda579a2d7473",
            "11d636077cbd1545",
            "ef9feb95d1f12a3a",
            "13c1fa98c29f8f81",
            "636abe298d8940a7",
            "649be06b4b880b67",
            "0c0ba63642b01a89",
            "e517363a9bb66217",
            "7f28962bbf2edd96",
            "323cfea2dd074604",
            "13d2e16bdac1b820",
            "34b28815286f8381"
        ],
        "x": 204,
        "y": 274,
        "w": 1192,
        "h": 392
    },
    {
        "id": "e2bd9331f9185534",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "49e6d3e2af0723a8",
            "d1dbf0ba787aaf87",
            "765edce0c2be3f26",
            "9742879be4c1261c",
            "f496db4601480ad7",
            "17ccce6813bb1513",
            "b6bc7095606ea745"
        ],
        "x": 169,
        "y": 1734
    },
    {
        "id": "21bbb7d46384e287",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f5de7d1e2efd275",
            "d09af2547970d46b",
            "8c354411f4678925",
            "89b827b78086e83f",
            "b45882cc15a076be",
            "8d4c1528250e9b80",
            "98a76a1f9321a573",
            "7b1590892f6f2cf5",
            "3112342511e963b8",
            "f83e49751218dc3f",
            "a992bf0170cdc157",
            "f361ef0e22514ae8",
            "8f0ca2e92ed379a5",
            "d0e343c96a859730",
            "3fcc6bd133bdfd43",
            "3f9469575ed20a91"
        ],
        "x": 149,
        "y": 2299
    },
    {
        "id": "0c753ce1969e7a11",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2a9c9c49c94432d9",
            "3b424968240bbd7c",
            "f5cdb10387af4f40",
            "ca74a0de42a788ba",
            "27be6fe227af16cc",
            "214d0a5f9c40f7c2",
            "8c63b0896103090c",
            "d475353a7f70bf2a",
            "479532ec132fba80",
            "9333514511ccbe3e",
            "3e4df8358764c8bf",
            "260b48d27cf6b812",
            "c23689e8b3ce4d15"
        ],
        "x": 159,
        "y": 1929
    },
    {
        "id": "3714a803248cefeb",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "21776dac0e1ffac5",
            "1ff2b9c7e81f175d",
            "88e3d23a3ec9d6b0",
            "d27598503a5b31c1"
        ],
        "x": 139,
        "y": 4294,
        "w": 562,
        "h": 232
    },
    {
        "id": "70b9c5719558ad66",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "104a98d5dd421a19",
            "180f9e3f0a29978d",
            "91ec12ac87115cdc",
            "d02b6fbde106437f"
        ],
        "x": 139,
        "y": 3649,
        "w": 542,
        "h": 232
    },
    {
        "id": "bd2c16c7828242aa",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "de78cb844f1f00d8",
            "1099581654481fc9",
            "c3130d1334678fc5",
            "a8a3e1a0ebead94e",
            "15c9bf7efe404627",
            "f8d09635394baaab",
            "416b85ed1defe292",
            "e504bebeacdd75dd",
            "e5503f35f4093a0f",
            "eed42b268cafd4c4",
            "8f9a1f49027a6915",
            "a0706941e62ef95e",
            "19565f2c5b691bf7",
            "cd2a3e7d433fb3e9",
            "e24cdeb55a9a6f68",
            "8b2c8f3ad083a6ad",
            "f34fa6789deaa4e6",
            "7452dc34b018aaac",
            "513dc6bfb2e965e7",
            "44ede18dded35aa0"
        ],
        "x": 154,
        "y": 2659,
        "w": 1027,
        "h": 397
    },
    {
        "id": "df7219d880358536",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f17c0cf3a34f7116",
            "c309c3ce8e145478",
            "0299f7d430301eb2",
            "88cd5d005aff3219",
            "511afb106e173130",
            "db96dc0c6dbe7244",
            "189a3eca588f92de",
            "08b368484118e203",
            "2dd33717ef5a3b58",
            "90168b3986aea043",
            "f3dcda45cbe40ac0",
            "aaf22c351dd47989"
        ],
        "x": 199,
        "y": 1579,
        "w": 1157,
        "h": 202
    },
    {
        "id": "f0e4c9cb0e39cbf8",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bdb744443037f6f5",
            "a1bf31c1f4982c36",
            "230325d8fabed91c",
            "a692f16371e4c1bb",
            "16e8c34d1250478f",
            "f5779068e059be4c",
            "a614abde4e2ab03e",
            "508fc7244c0c3621",
            "59c0617b8993f309",
            "ce8907e4ba09b5c8",
            "a87b7f1bb3d8030d",
            "e8a45a4aa7a22874"
        ],
        "x": 199,
        "y": 1369,
        "w": 1117,
        "h": 202
    },
    {
        "id": "b2c3d112c3d0c889",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ba3c1b4d0beb6c45",
            "c8587dfc70e3e4c5",
            "ed112941d5cdd4e7",
            "db7b2ef040edf421",
            "76eee9a189e80361",
            "80dd2ac395ededd3",
            "8d2ad3a3e8ccf1ed",
            "d54b27e714abae2f",
            "df7a8363391ef95f",
            "3cc72650169eec95",
            "5714ac0a75f5ed73",
            "df13ffa0e29a0380",
            "50a1ab1b5b2e763e",
            "a54e9d7aad7ac38c",
            "b3b14f1983dbbd12",
            "e1d5767241a4aac7",
            "ca8e8ce8b25e297e",
            "bd4440f663b8fa9f",
            "8135493bd3dc4370",
            "c4e6970ead724f13",
            "3b4e5ec5a43dcaa1",
            "9378b1ab33eb5d57",
            "232ea9b29c931a62",
            "be43df984cc12219"
        ],
        "x": 199,
        "y": 979,
        "w": 1227,
        "h": 382
    },
    {
        "id": "588342109c719d84",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fd4bd9bffc26442c",
            "8ae9fd411bc78cb9",
            "2883b97684d92288",
            "5bebd7ba13d78561",
            "5f2272efb6d89c79",
            "ad0438c3cae94f40",
            "25779228f81e2d81",
            "84013a96084c3eeb",
            "599095620e383bff",
            "8b1597117f2c51ff",
            "1e6921618ed22e2b",
            "8ca8bba88825bbbf",
            "0a853593a0797f46",
            "7a96fcc940243435",
            "f3493b385f266d87",
            "60cf7836015914f7",
            "74af4f94b7346e0d",
            "c2ffd0fb87377ef2",
            "92972af8c5f549ce",
            "3c58a737bee31258",
            "92ada735b313aded",
            "bd2747c35b481472",
            "95a4cfea0458c7b9",
            "6f329cf07ae77335",
            "90631bdf8d9f93ae",
            "9145dcd7afd55580",
            "972b3c581c06be97",
            "f28eb465e5ea874e",
            "9180b7c3e7a90c3b",
            "d7df7b218b99fd38",
            "dca5936e80add879",
            "bf06b4c02ad79ffa",
            "0abd1e62f1abfb13",
            "6fbb1b9edbfec062",
            "083e54e2bf6c88c0",
            "d9fdf272d0dc630c",
            "9ec25ad7f772805f",
            "94522e8fcaf7234f",
            "bf7a7388b5301e71",
            "ad642f1caae66ae0",
            "7df2d1f5915898bf",
            "bc155cd9a662d3f9",
            "c30ca4565e0d218f",
            "55d2fb1e2f4239c6"
        ],
        "x": 204,
        "y": 484,
        "w": 1452,
        "h": 472
    },
    {
        "id": "a70fe69b7459b746",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0ad0e75869583a93",
            "e1d9dc50e8c79a8f",
            "7fefc00461152886",
            "9ceed6fd254ce510",
            "9ca5c05780dc2c19",
            "fa36f3d9a2716a47",
            "6632929cbf8477f9",
            "0a547f33659dd077",
            "642b4cd1857e998b",
            "6a2f84e5a6053bfa",
            "c40dd074760f5ff9",
            "8c5c18cd60513a30",
            "554553d14c4528a1",
            "400413a022ab7c31",
            "419d8fe0bc51a50a",
            "cff57bec7157bef0",
            "5c16a509de896e67",
            "f22eaeab0459ee15",
            "b0f4b6634f190f48",
            "f96b3c5023454e2b",
            "58387c00123218e3",
            "bdec638b99156315"
        ],
        "x": 164,
        "y": 1314
    },
    {
        "id": "23b242037b1d989d",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "1999eebe26eba53b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2aa275dd861f9ccf",
            "becbecad76166e9d",
            "0deac0f9f705f59a",
            "956b5b4d094f0125",
            "19c5b907b8a99896",
            "aa39133655d9b787",
            "2c215d3ea4d110e9"
        ],
        "x": 1889,
        "y": 1734
    },
    {
        "id": "173f861c8cd401be",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "1999eebe26eba53b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d28033bff8f64efb",
            "b8cd8815df4b9cda",
            "c7d6011eb2792412",
            "f05392340a92472a",
            "b473a79df4ff304f",
            "8daa2ecbbec7641e",
            "c6e44fec67bad770",
            "4e103e969b9f7d0b",
            "efc9e3e717cf27ba",
            "79eab282041abd4d",
            "597b8d08f336dbe5",
            "507cb64d15d2e613",
            "0d08d91772b4a46f",
            "fca7034dd83115ce",
            "bf5be8304044fb8d",
            "eec38691272ed5d2"
        ],
        "x": 1869,
        "y": 2304
    },
    {
        "id": "a3b8edad7fbf25b8",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "1999eebe26eba53b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5650bd7882594c6c",
            "a4c307b888a951e2",
            "740937c2e6c2a904",
            "13e87411d7638fc5",
            "a00762f0d6cd69c4",
            "d6a43738c3c954f7",
            "8e9758acad3f2063",
            "74c9021b786ac79a",
            "ca8804a273a54375",
            "10ca373128c765fb",
            "25a73b9db7b8a60a",
            "6e46a705b20f7981",
            "797048def978921d"
        ],
        "x": 1879,
        "y": 1929
    },
    {
        "id": "90b855390ac72238",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "1999eebe26eba53b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8ea5cb4356c45bc7",
            "ab48b4c5f87099ad",
            "4caddee93c71a5a9",
            "316ffc734d1d2d62",
            "e2c6161b189af928",
            "4af794f99335ccfe",
            "cc9eec14428b2731",
            "9e4c376d1cc0c44d",
            "088216a78f90bc21",
            "afade25048219b87",
            "1855d43dc448ddb2",
            "9e09bcccc9fd7ac5",
            "2e719b14fb0ca611",
            "1cf5b9cf5dcfd951",
            "7bddb7a234eef127",
            "e9bb6030f6732304",
            "87cfce336c5607c4",
            "3f6cec0ad8030491",
            "7284f43907fc62d5",
            "3126cff55c2701d2",
            "c34dd01b4ac8ed2c",
            "3e2260e4d228e248"
        ],
        "x": 1884,
        "y": 1314
    },
    {
        "id": "d4f58c108037d973",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "81b3f35a68120159",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eedb33ae969dfe56",
            "cbaef8a2a29aec91",
            "dfe1c2a4c355b6c6",
            "f762db553be7631d",
            "6f3718697fcc12eb",
            "3dc95c5ff11c4c05",
            "8c105fb9ba332d83",
            "74ce7e7ffcdc83ee",
            "74d93a9f486336e2",
            "c7f4104b21b3f0ed",
            "5b32c5c292fcbf85",
            "4e5604e73bdb6a95",
            "83648648772ad6a5",
            "d0b5efc6d9553bf6",
            "9442f133234af130",
            "842f392e7b128179",
            "d9707a1ddd27e51f",
            "d10978b2469ceff3"
        ],
        "x": 359,
        "y": 1199,
        "w": 797,
        "h": 337
    },
    {
        "id": "6067e973b7dd40eb",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "81b3f35a68120159",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d2baf0268056e3cc",
            "9890c53475b90fa6",
            "b04dae3690891cd4",
            "0dd9833c9af4a1b1",
            "7e8e0c5575861e5a",
            "0c1159e674965540",
            "ceec0c55061a2fd4",
            "198980510e71b358",
            "849493312f6d785b",
            "70b67eb3bb9797ac",
            "cd5be50a30e65857",
            "7446c855e9d2de4f"
        ],
        "x": 234,
        "y": 1619,
        "w": 607,
        "h": 367
    },
    {
        "id": "9170b812dbe446e7",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "ef0c6ed3656f62f1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "04ad8981080a4bc2",
            "d621806b9d512da2",
            "de0739c47a7ee00c",
            "a8134e53f1635cf6",
            "2b56c9d224d141fc",
            "33e726969f43708d",
            "bb0e2980902fc869",
            "59d1d69b47306a55",
            "a85291cf3f906e79",
            "71cdad2935eab809",
            "ab8fc6de0b76ea47",
            "85e920d25faffc5e",
            "b56980577aeeef39",
            "da089c88f8c7df29",
            "50748153bedb7365",
            "ff10a77e0e1952bb",
            "781a5cd284d89138",
            "88e5380b5a7c839f"
        ],
        "x": 2079,
        "y": 1199,
        "w": 797,
        "h": 337
    },
    {
        "id": "2ca6f2c1b0c21cf1",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "ef0c6ed3656f62f1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c93aa2a22f83519e",
            "b94d03c6fa83589f",
            "5057b85e84045f6c",
            "b55bf496d3cc1513",
            "e1b9292fa6bac2e3",
            "29ec537f14d3d22a",
            "f754852205e30e67",
            "fa61973aeffbf656",
            "cec28be43f93e629",
            "c74e3acc86372d69",
            "423d6d293533b632",
            "a418abe4b0a07dce",
            "335860a957682321",
            "fe28da5c501e29bd",
            "619c850163c2ff76",
            "6de7c21a06de5b4a",
            "a68f69c9cd075166",
            "af9aace116c71617",
            "cbe29d3cc5fedd24",
            "d62d94327506c361",
            "baa146a03506aca9"
        ],
        "x": 2639,
        "y": 1544,
        "w": 687,
        "h": 532
    },
    {
        "id": "9e32d6a46ccf09ee",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "ef0c6ed3656f62f1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf898100deca5850",
            "56377c4577552212",
            "80f16227937027de",
            "b7ba6d9287419416",
            "ae5dbeb3428c4fa0",
            "39ee92fcc64d963c",
            "237711c4af6c00b8",
            "4207c18fb1c725a4",
            "3822344a17360084",
            "f5fe63e98db64a03",
            "1b4bcab9f691b5db",
            "577869e151539f03"
        ],
        "x": 1954,
        "y": 1619,
        "w": 607,
        "h": 367
    },
    {
        "id": "03ef9a71f127822f",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "72376f020cbdd7b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "35770bc641499596",
            "cfdc7a55d0c91ce4",
            "f88f04ba0493a4b5",
            "9b02ecbf75701343",
            "48f3a9fa6bc4b18e",
            "8c00bfe915de6596",
            "6e49827f9cf44a2c"
        ],
        "x": 169,
        "y": 3154
    },
    {
        "id": "8bc986f7994d89a7",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "72376f020cbdd7b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e4d83352939e4c4a",
            "393c1f27d9c6c20d",
            "89df21546261dd35",
            "cca7df6602b1217a",
            "2b2cf606c296e602",
            "860e5c547cecf5f9",
            "f695bbdc498a93c1",
            "da493fa473ae1988",
            "e8c173d03c5227ed",
            "c0f863a3eee61ef2",
            "6deb423e38b82d31",
            "8c21e5e10e5ae929",
            "0be63189ee3d400d",
            "978547859b92dc4b",
            "d6ab043204728962",
            "add3ea452ae91bde"
        ],
        "x": 149,
        "y": 3724
    },
    {
        "id": "b1f8c54951ecbf7f",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "72376f020cbdd7b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f6fb287fce3470c3",
            "bb1b97f50089b22d",
            "f69efb660e9c4cd9",
            "edc049428c9a0d15",
            "2a18a1347862e606",
            "cd1fadf1f3dfb869",
            "6369e148ad4ba347",
            "149895a36f22bfbd",
            "9c82842ac58cdc40",
            "431e5b57039e7b91",
            "14764e9036425238",
            "f5d2631c81929e16",
            "eeb4753ae7fa02d4"
        ],
        "x": 159,
        "y": 3349
    },
    {
        "id": "84182d5ef898d336",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "72376f020cbdd7b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "63453611971f3d19",
            "b900d87e44861236",
            "61fb9090578aaa56",
            "67721c302a07a675",
            "64588e3ee83192c2",
            "6f23177aad613c8f",
            "fe4c374017f08bd3",
            "4c09df805d508e41",
            "001e1f7a83660717",
            "41608bbe96eea04e",
            "13568d34822d6ad0",
            "696ae9fe8eec60dc",
            "327e0602d5a8462d",
            "1db74943b5bef2f6",
            "049ac79541ad4413",
            "308e107ff18efd35",
            "6ae61918d70a7846",
            "548a681fbbc5aad6",
            "501da9d6dfe1e80f",
            "6f6a7159fe26f467",
            "5d55d3de5fe5b070",
            "e2f828fbb4d401b7"
        ],
        "x": 164,
        "y": 2734
    },
    {
        "id": "2fa2db606a6d80c1",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "560b01ff2e88daac",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f2d66bf3b277d261",
            "f35268cf0b40df60",
            "e7419c65bb4928a5",
            "dffe6c043ef8160b",
            "1c8e2807d1b49302",
            "ee622422a25bee9c",
            "1e843a5590cd9b13"
        ],
        "x": 1889,
        "y": 3154
    },
    {
        "id": "92109e084c266e2e",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "560b01ff2e88daac",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a717df37705cef2c",
            "c44f9ab73cb08602",
            "06e7a8e921cb5e06",
            "a213694ed4b70a3a",
            "e1ae5eb40e0884e5",
            "da224406e361ebab",
            "69b86625ca749702",
            "54535349b75194e9",
            "013ae9f8e0dd4a36",
            "4ef25541b10aa843",
            "e645d7e9aa1008c1",
            "e82406673c719651",
            "9b49d29e19e194f6",
            "9fc8ccc030dc3641",
            "4f1ca0cf23a0a432",
            "3ec753ef55a31566"
        ],
        "x": 1869,
        "y": 3724
    },
    {
        "id": "f396ce22bbf03344",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "560b01ff2e88daac",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a20de16f23ee9499",
            "0a18813d0305d84e",
            "f9babd569c1f7564",
            "1d23d193bc6f89c2",
            "1740d5f49432b053",
            "36da649317cb2937",
            "d04018a4b190756c",
            "d97bbbd307bf77f1",
            "bf32410fd1d62452",
            "f3d216315cebd257",
            "f1363d23ca917a8f",
            "8644950d8041497c",
            "9271fcc188c35603"
        ],
        "x": 1879,
        "y": 3349
    },
    {
        "id": "77f0a4e1ac50f8a4",
        "type": "group",
        "z": "9922a8114f46702b",
        "g": "560b01ff2e88daac",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a396a9b49590bbce",
            "4f6e2d2f77c9c209",
            "33c1acc2433e1122",
            "bb3d0b3ebbe7398e",
            "459430cfd2021fdd",
            "e456fbdaebba25f0",
            "5ba21fe78d07c3c4",
            "27cdfa3dbde6e831",
            "86a8bf1372a40fa9",
            "13a65bed22718218",
            "b65ca0c53d201e7f",
            "a66dcbcb8229db28",
            "b7da3375b9b7a1fc",
            "469b0a017b0d25fb",
            "2b480f8b64ccde4f",
            "d445f9704062558e",
            "45a85fe063d44e76",
            "6f19710f17bed7d2",
            "a0b720e643dc308e",
            "f1ac4813e4312e33",
            "5d24eb67ed0be076",
            "f85d708655d2dde8"
        ],
        "x": 1884,
        "y": 2734
    },
    {
        "id": "9f2647ae0bb0686b",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "c947217d7b4fccbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a9888cb6c3d71618",
            "915995140b4de971",
            "19c7a19de678ce15",
            "08f2f36c4afebcb3",
            "75da577310765314",
            "1907f3bf8fb171ea",
            "7445df5ea6b3979f",
            "d9da898c0922e3a7",
            "1ea30b05f8dafd77",
            "a3c95a133003aada",
            "e5e02c455bbfe832",
            "c4f52ae898dee06a",
            "4b5b1c851646c881",
            "7cf07817432db46f",
            "8d3a9da3ebbd52ad",
            "296220f1eae982a2",
            "b4234dd3d234156d",
            "783edff7e22ab4b4"
        ],
        "x": 359,
        "y": 2839,
        "w": 797,
        "h": 337
    },
    {
        "id": "c25454224d93f0a4",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "c947217d7b4fccbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f4ab1dce07fe7f11",
            "555d91aa8bf28ae9",
            "e5f7e9c22a058ed1",
            "ceea7655c2f32850",
            "ce8d2903e7974843",
            "0fd972c0e636f906",
            "321f213ce949e34f",
            "87b78956ec5af576",
            "3d4881e0b3139213",
            "9ffbf76eead154a9",
            "6b74e72683c0d1f6",
            "c4d4ea455e2f73f4",
            "844c5bc2fea2c797",
            "49e591142a7bea9a",
            "5a518d75c64bc0ea",
            "6b8fb6f2bba64125",
            "929ff1413fe086d0",
            "d27d4300fc48fe25",
            "59b1cd6f5bc9dbd1",
            "e32d6d2b3ce23351",
            "1cd1ba43a58cd415"
        ],
        "x": 919,
        "y": 3184,
        "w": 687,
        "h": 532
    },
    {
        "id": "a93dbb5749094ec0",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "c947217d7b4fccbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "87748d9349a8604a",
            "f0e330b3f6e390be",
            "2b4e10741bb7b04a",
            "397081947df56407",
            "0270dc1e8f7e9aa7",
            "fe347163b7579388",
            "d0d6386c08ed89d2",
            "da0a7793e40b3340",
            "e5e72ce2788268aa",
            "7fad437a9546562d",
            "bd70310b8da24361",
            "db544c8a4e4b5a6f"
        ],
        "x": 234,
        "y": 3259,
        "w": 607,
        "h": 367
    },
    {
        "id": "9c42f9c7d3cec4e7",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "a22652e0e5a00422",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e1b5bc2e6c76d5ad",
            "1bc3b7674dca7bb1",
            "41d3be87db9fd0d6",
            "b6c50cf9f36205b4",
            "5d1ffc08cdd9417e",
            "ae16b30eeaf52d5c",
            "48c82e4a47da27a2",
            "251f8db3f4f7739c",
            "f14a7d390f641315",
            "736f1d79123164d5",
            "1aaabf5061d1cc83",
            "1ab4c38be7798a2d",
            "172ea6b14b2deead",
            "184a5768cc88bec6",
            "f5c8f81833a15897",
            "7f8826fefe9c0644",
            "f0c13cb1504a27fd",
            "2001a99f7a6d5461"
        ],
        "x": 2079,
        "y": 2839,
        "w": 797,
        "h": 337
    },
    {
        "id": "4319550e30808765",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "a22652e0e5a00422",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d010763e4edae281",
            "8bbfdd96182fe6ad",
            "71d2de9ac37ec537",
            "979923a0e6fc7490",
            "f8ac9b16d8e8c8c2",
            "1a746e4647e62e33",
            "e3d01f0efdbc192d",
            "a364218cd9c631be",
            "f897649ee3d4d637",
            "9db1eab124366579",
            "507185b6330677f8",
            "fb69eb13f1ed47f4",
            "7f3dc62e4cfaeb61",
            "db6e0934bd7af8da",
            "63a0a8175ccb6c22",
            "c679d003b0d550aa",
            "50c404e996c58b6e",
            "dd016cb3fc084a9f",
            "f1066a75fb521eb7",
            "b367f658d4008f89",
            "9ea62a5cbd872003"
        ],
        "x": 2639,
        "y": 3184,
        "w": 687,
        "h": 532
    },
    {
        "id": "b1df0fb233ae57b9",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "a22652e0e5a00422",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "53fe30989a4e2dd8",
            "f53db4bd109ccc20",
            "eb252be4f519ca75",
            "69f525ec93329760",
            "c1ce42b2a2628fb7",
            "26d3214787b2439d",
            "3ad89ea04c17a803",
            "3e85a6139504bb70",
            "5efd55ec9f94f889",
            "dc331402ecbe320f",
            "115dcc4e5b9044ae",
            "6fe7854ecacb208f"
        ],
        "x": 1954,
        "y": 3259,
        "w": 607,
        "h": 367
    },
    {
        "id": "5bc8af56489bcd9d",
        "type": "group",
        "z": "2831664434f14a33",
        "g": "81b3f35a68120159",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3a7d35a0bfec5b49",
            "779b3f472d68db10",
            "102a8a782e378ec9",
            "ab0465821b20c46b",
            "d9ec1d7d3fd6fe80",
            "d097048d7107f475",
            "0d5c11a801788b3f",
            "0aa764285d1cf533",
            "c1ec4a7757bf9a7c",
            "6ea5b0e752187a11",
            "c2fd121fa884180a",
            "eaf1e8f7876a0705",
            "226ddfe740d17c77",
            "a3a97f1cf85d0347",
            "335b885cb4328c74",
            "a318163988c8404a",
            "6ce016b7a2323a01",
            "d5d16f84ccc736a2",
            "24041115ac09d2d9",
            "9177fda6dbdb7382",
            "9e5f19ba303d1e7f"
        ],
        "x": 914,
        "y": 1559,
        "w": 687,
        "h": 532
    },
    {
        "id": "b7be1fbf76a073e2",
        "type": "group",
        "z": "2831664434f14a33",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5c169683e0be423b",
            "da6f9a7c33d7d7bb",
            "3b516af17cb05a18",
            "0b18ce3fa23e0ba6",
            "02531d3dbb4a7cfa",
            "dca0193f9acb2785",
            "984edf458e7e0e43",
            "003fe15518af93a5",
            "685e7e2495833654",
            "dd90145cd4293ec4"
        ],
        "x": 259,
        "y": 64,
        "w": 672,
        "h": 247
    },
    {
        "id": "ee1fd54ec57a959c",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "88534f4f764fdb99",
            "d8cfb4d7d6f20c04",
            "9da7d4d6e4e7a495",
            "891c7b3250aa152a",
            "e198712935d863ce",
            "0fce669fac8b246c",
            "ceb2f1af58e4621a"
        ],
        "x": 179,
        "y": 139,
        "w": 777,
        "h": 217
    },
    {
        "id": "cbc36db7c52f56bd",
        "type": "group",
        "z": "69a590bb3eaafea5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e0159898d44cfae9",
            "f6dfdebddb6b4ea5",
            "07709d64d5b739e2",
            "f93356f24f96a675"
        ],
        "x": 1129,
        "y": 694,
        "w": 422,
        "h": 127
    },
    {
        "id": "e64d1b9eb78e1d44",
        "type": "group",
        "z": "2260f1f88d7c60bf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "81a49ecdc6eebfee",
            "c6847b06e1ed6fcb",
            "7652703d56dd1baf",
            "8b2375c11c170ba7",
            "b0b63f27328cd857"
        ],
        "x": 1029,
        "y": 169,
        "w": 507,
        "h": 187
    },
    {
        "id": "9fa3722a335cb332",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#046797",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "red",
                "default": "#4B7930",
                "baseColor": "#10bafa",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#ce3b3b",
                    "value": "#10bafa",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#10bafa",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0000a0",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#10bafa",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "red",
                "accents": "purple",
                "warn": "deep-purple",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "mouse",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 50,
                "sy": 50,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "533e203349de7f15",
        "type": "ui_tab",
        "name": "StatoPresse",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "de425a720011e6e9",
        "type": "ui_group",
        "name": "Pressa 1",
        "tab": "533e203349de7f15",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a5b84c011240052c",
        "type": "ui_tab",
        "name": "Impostazioni",
        "icon": "fa-cogs",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a2dc8e5cbc92778b",
        "type": "ui_group",
        "name": "Indicatore di Temperatura Piano Superiore",
        "tab": "a5b84c011240052c",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "db63de8125d253b0",
        "type": "ui_group",
        "name": "Indicatore di temperatura piano inferiore",
        "tab": "a5b84c011240052c",
        "order": 2,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d6dcf6dea0234745",
        "type": "ui_group",
        "name": "indicatore pressione di pressata",
        "tab": "a5b84c011240052c",
        "order": 3,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc04b0c0c2689120",
        "type": "ui_group",
        "d": true,
        "name": "tmpTools",
        "tab": "533e203349de7f15",
        "order": 5,
        "disp": false,
        "width": "25",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2d4a37310a5ce249",
        "type": "ui_tab",
        "name": "Grafici di Stato",
        "icon": "fa-line-chart",
        "order": 2,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "57ea1d8425ab2254",
        "type": "ui_group",
        "name": "Pressa 1",
        "tab": "2d4a37310a5ce249",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "836adb2b4d67f4ce",
        "type": "ui_tab",
        "name": "Gestione Ordini",
        "icon": "fa-pencil-square",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "34ec8711cb2e9270",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.101",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "10000",
        "timeout": "3000",
        "name": "pressa1 plc prodExc",
        "vartable": [
            {
                "addr": "DB61,S0.210",
                "name": "exc_id"
            },
            {
                "addr": "DB61,I256",
                "name": "exc_status"
            },
            {
                "addr": "DB61,INT258",
                "name": "exc_quantToDo"
            },
            {
                "addr": "DB61,INT260",
                "name": "exc_quantProd"
            },
            {
                "addr": "DB62,X0.0",
                "name": "prod_cycleRun"
            },
            {
                "addr": "DB62,DINT2",
                "name": "prod_cycleNumber"
            },
            {
                "addr": "DB62,S6.210",
                "name": "prod_id"
            },
            {
                "addr": "DB62,INT262",
                "name": "prod_quantProd"
            },
            {
                "addr": "DB62,X264.0",
                "name": "prod_esito"
            }
        ]
    },
    {
        "id": "77dcdddb4f97461c",
        "type": "ui_group",
        "name": "queueTable",
        "tab": "836adb2b4d67f4ce",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "691443b275e9cbcc",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "048ed9ba2531e46d",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "92b82504f36d6251",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "52fccb670bdf8654",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "d3d82e3f0e819d14",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "3b486227d3daf789",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "de425a720011e6e9",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "d6e45299f5a85491",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "5a0967a81eaaca99",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "104bc379ceec868b",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "e88fe1adcd02c816",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "9dc2fae7dfd8f744",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "e0602e995e1555e6",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "28f0d111de7e2b84",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 14,
        "width": 3,
        "height": 1
    },
    {
        "id": "af9c3d1e2d8b3b27",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "ef795fb17b2b458a",
        "type": "ui_spacer",
        "z": "2831664434f14a33",
        "name": "spacer",
        "group": "dc04b0c0c2689120",
        "order": 19,
        "width": 6,
        "height": 1
    },
    {
        "id": "fa784b598becc58c",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.101",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "3000",
        "name": "pressa1 plc status",
        "vartable": [
            {
                "addr": "DB63,X0.0",
                "name": "status_alife"
            },
            {
                "addr": "DB63,X0.1",
                "name": "status_cycleActive"
            },
            {
                "addr": "DB63,X0.2",
                "name": "status_emergency"
            },
            {
                "addr": "DB63,X0.5",
                "name": "status_idraulicCmd"
            },
            {
                "addr": "DB63,INT2",
                "name": "status_idPressa"
            },
            {
                "addr": "DB63,REAL28",
                "name": "status_pressPressata"
            },
            {
                "addr": "DB63,REAL32",
                "name": "status_tempPianoSup"
            },
            {
                "addr": "DB63,REAL36",
                "name": "status_tempPianoInf"
            }
        ]
    },
    {
        "id": "b3c076eedf1fd2f8",
        "type": "ui_group",
        "name": "historyTable",
        "tab": "836adb2b4d67f4ce",
        "order": 3,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7f5c766a413446a",
        "type": "ui_group",
        "name": "completedTable",
        "tab": "836adb2b4d67f4ce",
        "order": 2,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "33b06a116480e90c",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.102",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "3000",
        "name": "pressa2 plc status",
        "vartable": [
            {
                "addr": "DB63,X0.0",
                "name": "status_alife"
            },
            {
                "addr": "DB63,X0.1",
                "name": "status_cycleActive"
            },
            {
                "addr": "DB63,X0.2",
                "name": "status_emergency"
            },
            {
                "addr": "DB63,X0.5",
                "name": "status_idraulicCmd"
            },
            {
                "addr": "DB63,INT2",
                "name": "status_idPressa"
            },
            {
                "addr": "DB63,REAL28",
                "name": "status_pressPressata"
            },
            {
                "addr": "DB63,REAL32",
                "name": "status_tempPianoSup"
            },
            {
                "addr": "DB63,REAL36",
                "name": "status_tempPianoInf"
            }
        ]
    },
    {
        "id": "1667e67dd14845f1",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.102",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "10000",
        "timeout": "3000",
        "name": "pressa2 plc prodExc",
        "vartable": [
            {
                "addr": "DB61,S0.210",
                "name": "exc_id"
            },
            {
                "addr": "DB61,I256",
                "name": "exc_status"
            },
            {
                "addr": "DB61,INT258",
                "name": "exc_quantToDo"
            },
            {
                "addr": "DB61,INT260",
                "name": "exc_quantProd"
            },
            {
                "addr": "DB62,X0.0",
                "name": "prod_cycleRun"
            },
            {
                "addr": "DB62,DINT2",
                "name": "prod_cycleNumber"
            },
            {
                "addr": "DB62,S6.210",
                "name": "prod_id"
            },
            {
                "addr": "DB62,INT262",
                "name": "prod_quantProd"
            },
            {
                "addr": "DB62,X264.0",
                "name": "prod_esito"
            }
        ]
    },
    {
        "id": "644e1a54256c1459",
        "type": "ui_group",
        "name": "Pressa 2",
        "tab": "533e203349de7f15",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f84482f335843f79",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.103",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "3000",
        "name": "pressa3 plc status",
        "vartable": [
            {
                "addr": "DB63,X0.0",
                "name": "status_alife"
            },
            {
                "addr": "DB63,X0.1",
                "name": "status_cycleActive"
            },
            {
                "addr": "DB63,X0.2",
                "name": "status_emergency"
            },
            {
                "addr": "DB63,X0.5",
                "name": "status_idraulicCmd"
            },
            {
                "addr": "DB63,INT2",
                "name": "status_idPressa"
            },
            {
                "addr": "DB63,REAL28",
                "name": "status_pressPressata"
            },
            {
                "addr": "DB63,REAL32",
                "name": "status_tempPianoSup"
            },
            {
                "addr": "DB63,REAL36",
                "name": "status_tempPianoInf"
            }
        ]
    },
    {
        "id": "2c8ae7c7ae56a942",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.103",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "3000",
        "name": "pressa3 plc prodExc",
        "vartable": [
            {
                "addr": "DB61,S0.210",
                "name": "exc_id"
            },
            {
                "addr": "DB61,I256",
                "name": "exc_status"
            },
            {
                "addr": "DB61,INT258",
                "name": "exc_quantToDo"
            },
            {
                "addr": "DB61,INT260",
                "name": "exc_quantProd"
            },
            {
                "addr": "DB62,X0.0",
                "name": "prod_cycleRun"
            },
            {
                "addr": "DB62,DINT2",
                "name": "prod_cycleNumber"
            },
            {
                "addr": "DB62,S6.210",
                "name": "prod_id"
            },
            {
                "addr": "DB62,INT262",
                "name": "prod_quantProd"
            },
            {
                "addr": "DB62,X264.0",
                "name": "prod_esito"
            }
        ]
    },
    {
        "id": "3d9a2ba59f9c57a8",
        "type": "ui_group",
        "name": "Pressa 3",
        "tab": "533e203349de7f15",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e370eb0b4862e638",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.104",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "3000",
        "name": "pressa4 plc status",
        "vartable": [
            {
                "addr": "DB63,X0.0",
                "name": "status_alife"
            },
            {
                "addr": "DB63,X0.1",
                "name": "status_cycleActive"
            },
            {
                "addr": "DB63,X0.2",
                "name": "status_emergency"
            },
            {
                "addr": "DB63,X0.5",
                "name": "status_idraulicCmd"
            },
            {
                "addr": "DB63,INT2",
                "name": "status_idPressa"
            },
            {
                "addr": "DB63,REAL28",
                "name": "status_pressPressata"
            },
            {
                "addr": "DB63,REAL32",
                "name": "status_tempPianoSup"
            },
            {
                "addr": "DB63,REAL36",
                "name": "status_tempPianoInf"
            }
        ]
    },
    {
        "id": "85571a3195fe3b68",
        "type": "s7 endpoint",
        "z": "9922a8114f46702b",
        "transport": "iso-on-tcp",
        "address": "192.168.19.104",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "10000",
        "timeout": "3000",
        "name": "pressa4 plc prodExc",
        "vartable": [
            {
                "addr": "DB61,S0.210",
                "name": "exc_id"
            },
            {
                "addr": "DB61,I256",
                "name": "exc_status"
            },
            {
                "addr": "DB61,INT258",
                "name": "exc_quantToDo"
            },
            {
                "addr": "DB61,INT260",
                "name": "exc_quantProd"
            },
            {
                "addr": "DB62,X0.0",
                "name": "prod_cycleRun"
            },
            {
                "addr": "DB62,DINT2",
                "name": "prod_cycleNumber"
            },
            {
                "addr": "DB62,S6.210",
                "name": "prod_id"
            },
            {
                "addr": "DB62,INT262",
                "name": "prod_quantProd"
            },
            {
                "addr": "DB62,X264.0",
                "name": "prod_esito"
            }
        ]
    },
    {
        "id": "6bd9f2128ebec730",
        "type": "ui_group",
        "name": "Pressa 4",
        "tab": "533e203349de7f15",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "99e058950596db62",
        "type": "ui_spacer",
        "z": "69a590bb3eaafea5",
        "name": "spacer",
        "group": "a2dc8e5cbc92778b",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "9b959f720d32944a",
        "type": "ui_spacer",
        "z": "69a590bb3eaafea5",
        "name": "spacer",
        "group": "db63de8125d253b0",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "5f205e53f1825402",
        "type": "ui_spacer",
        "z": "69a590bb3eaafea5",
        "name": "spacer",
        "group": "d6dcf6dea0234745",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "bcc9d4a1865e43c4",
        "type": "ui_group",
        "name": "popupGroup",
        "tab": "a5b84c011240052c",
        "order": 4,
        "disp": false,
        "width": "1",
        "collapse": false,
        "className": "hidden"
    },
    {
        "id": "8c268b6bfa27c24a",
        "type": "ui_group",
        "name": "PopupGroup",
        "tab": "836adb2b4d67f4ce",
        "order": 4,
        "disp": false,
        "width": "1",
        "collapse": false,
        "className": "hidden"
    },
    {
        "id": "e4455c60fa1954be",
        "type": "ui_template",
        "z": "2831664434f14a33",
        "group": "dc04b0c0c2689120",
        "name": "gaugesCommonStyle",
        "order": 11,
        "width": 9,
        "height": 1,
        "format": "<style>\n    margin:60px;\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1030,
        "y": 585,
        "wires": [
            []
        ]
    },
    {
        "id": "731ffc0d309290ae",
        "type": "ui_template",
        "z": "2831664434f14a33",
        "d": true,
        "group": "",
        "name": "dbgStylesheet",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style>\n    md-card {\n        border: 2px solid yellow;\n    }\n    div {\n        border: 1px solid purple;\n    }\n    .fitbox{\n        border: 3px solid red;\n    }\n    \n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1015,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f055a55171647080",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "apply gauges configs",
        "func": "\nif(msg.config){\n    const globalConfig=context.get(\"config\");\n    const config = msg.config;\n\n    //node.warn(\"applying config\");\n   \n    if(config.copyColors){ //copyColors: false | gaugeIdString=cfgIdString\n        let copy = global.get(\"config\")[config.copyColors]\n        config.c1 = copy.c1;\n        config.c2 = copy.c2;\n        config.c3 = copy.c3;\n        \n    }\n    msg.ui_control={\n        min:config.min,\n        max:config.max,\n        options: {  //vedi https://github.com/toorshia/justgage/blob/master/justgage.js\n            min: config.min,\n            max: config.max,\n            humanFriendly: true,\n            noGradient: false,\n            customSectors: { // # settori a scelta\n                percents: true,\n                ranges: [{\n                    color: config.c1, //hexString\n                    lo: 0,    //percentuali inizio-fine settore\n                    hi: 20,\n                }, {\n                    color: config.c2, \n                    lo: 15.1,\n                    hi: 80\n                }, {\n                    color: config.c3,  \n                    lo: 80.1,\n                    hi: 100\n                }]\n\n            }\n        }\n    };\n    delete msg.config;\n    msg.payload=context.get(\"lastPayload\") ?? config.min;\n    //node.warn({ \"config\":config,\"msg\":msg});\n\n    return msg;\n}\nelse{\n    context.set(\"lastPayload\",msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1065,
        "wires": [
            [
                "ae1033ecbfde9a8d"
            ]
        ]
    },
    {
        "id": "d3d062196750b6e0",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "applyGaugesConfigs_in",
        "links": [],
        "x": 770,
        "y": 1065,
        "wires": [
            [
                "f055a55171647080"
            ]
        ]
    },
    {
        "id": "ae1033ecbfde9a8d",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "applyGaugesConfigs_outCall",
        "mode": "return",
        "links": [],
        "x": 1140,
        "y": 1065,
        "wires": []
    },
    {
        "id": "b056d055af2c2fc4",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "come clonare",
        "info": "\n    seleziona nodi\n\n    export come json\n\n    avranno un aspetto simile a\n        {\n            \"id\": \"8688db4c9c99cada\",               \n            \"type\": \"ui_led\",       //nodo semplice\n            \"order\": 3,\n            \"group\": \"f139ce507b5170da\",\n            \"width\": 7,\n            \"height\": 1,\n            \"label\": \"emergenza attiva\",\n            ..stuff..\n            \"x\": 940,\n            \"y\": 420,\n            \"wires\": []\n        },\n        ..stuff..\n        {\n            \"id\": \"f139ce507b5170da\",\n            \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n            \"name\": \"Pressa 2\",\n            \"tab\": \"533e203349de7f15\",\n            \"order\": 2,\n            \"disp\": true,\n            \"width\": 9,\n            \"collapse\": false,\n            \"className\": \"\"\n        },\n        {\n            \"id\": \"533e203349de7f15\",\n            \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n            \"name\": \"Stato Presse\",\n            \"icon\": \"dashboard\",\n            \"order\": 1,\n            \"disabled\": false,\n            \"hidden\": false\n        },\n    CON UTILITY\n        incolla in payload l'export limitato\n        modifica clone utility a piacere (piu info all interno)\n        se ricevi errori: esporta l'intero progetto tramite il menu in alto a destra ed incollalo in \"full export\"    //nota: non tutti i config-nodes vengono inclusi negli export: l'utilty cercherà in fullExport quelli mancanti\n        \n    CON NOTEPAD\n        usa find/replace su notepad per:\n        - trovare l'id del nuovo gruppo\n        - rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n        -fare altre eventuali modifiche\n\n",
        "x": 490,
        "y": 405,
        "wires": []
    },
    {
        "id": "f18f51d80170296a",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "paste json export here",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "fullExport",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 425,
        "y": 450,
        "wires": [
            [
                "92d9744aa1e9f22d",
                "6173c68c398eeee3"
            ]
        ]
    },
    {
        "id": "775ed5336618f048",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "copyResultFromConsole",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 450,
        "wires": []
    },
    {
        "id": "92d9744aa1e9f22d",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "7da3a158c918645d",
        "name": "clone utility",
        "func": "\nconst json=msg.payload;\nconst asString=JSON.stringify(json);\n    //case insensitive\nfunction getId(name,source,type){\n    const reg = new RegExp('\"id\":\\\\s*\"(\\\\w+)\",\\\\s+\"type\":\\\\s*\"' + type + '\",\\\\s+\"name\":\\\\s*\"' + name + '\"', 'gmi')\n    let matches=source.match(reg)\n    if(matches)\n        return matches[1];\n    else{\n        node.warn({info:\"\",json:json,asString:asString,reg:reg})\n        node.error(\"id di \"+name+\" non trovato\");\n        return '';\n    }\n}\nfunction getGroupId(name, source=asString) {\n    return getId(name, source, \"ui_group\");\n}\nfunction getTabId(name, source=asString) {\n    return getId(name, source, \"ui_tab\");\n}\nnode.send(getGroupId(\"pressa 2\"));\n\n\nmsg.result=asString.replaceAll(new RegExp('\"group\":(\\\\s*)\"(\\\\w+)\"','ig'),getGroupId(\"pressa 2\"));\nreturn msg;\n\n\n\n/*\nconst reg = new RegExp(\"/ciao/\", \"ig\")\nreturn {res:\"ciao\".match(/ia/ig) };\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 405,
        "wires": [
            [
                "775ed5336618f048"
            ]
        ]
    },
    {
        "id": "6173c68c398eeee3",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "7da3a158c918645d",
        "name": "clone utility",
        "func": "\nconst json=msg.payload;\nconst fallback=msg.fullExport;\nconst asString=JSON.stringify(json);\n\n\n\n    //case insensitive\nfunction getId(name,type=null,source=json){\n    name=name.toLowerCase();\n    for(let item of source)\n        if(item.name && item.name.toLowerCase()==name && (!type || type==type))\n            return item.id;\n    for(let item of fallback)\n        if (item.name && item.name.toLowerCase()==name && (!type || type==type))\n            return item.id;\n    node.error(\"id di \"+name+( !type ? \"\" : \" di tipo \"+type)+\" non trovato\");\n    node.warn({name,type,source,fallback});\n    return \"\";\n}\nfunction getGroupId(name, source=json) {\n    return getId(name, \"ui_group\", source);\n}\nfunction getTabId(name, source=json) {\n    return getId(name, \"ui_tab\", source);\n}\n\n\n\nfunction posOf(id,source=json){\n    for(let i =0;i<source.length;i++)\n        if (source[i].id==id)\n            return i;\n    node.error(\"id \"+id+\" non trovato\");\n    return 0;\n}\n\n/* switch groups */\nvar n=0;\nfor(let item of json){\n    if(item.group){\n        item.group = getGroupId(\"completedTable\");\n        n++;\n    }\n}\n/**/\n\n/* * /\nvar n = 0;\nfor (let item of json) {\n    \n}\n/* */\nmsg.res=json;\nmsg.edited=n;\n//node.log([\"clone utility: modificati \"+n+\" attributi\"]);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 450,
        "wires": [
            [
                "775ed5336618f048"
            ]
        ]
    },
    {
        "id": "94a755f368e072f5",
        "type": "ui_ui_control",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "",
        "events": "all",
        "x": 1160,
        "y": 2685,
        "wires": [
            []
        ]
    },
    {
        "id": "8c17cb235692cd83",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoSup settingsButton",
        "group": "dc04b0c0c2689120",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-cog",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoSup",
        "topicType": "str",
        "x": 870,
        "y": 2295,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "6ee919044dca5266",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoSup graphButton",
        "group": "dc04b0c0c2689120",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-line-chart",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoSup",
        "topicType": "str",
        "x": 860,
        "y": 2250,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "dfae6536e47d96c1",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "toggle All But msg.press",
        "func": "let newMsg={}\n\nlet groupIdx= Number.parseInt(msg.press.match(/pressa([0-9]+)/i)[1]);\ngroupIdx--;\n\ngetGroupId(tab,id){ (\"statoPresse\",\"Pressa1\")\n\n}\n\nconst groups=global.get(\"ui\")[];\n\nlet groups=ui.tree[groupIdx]\n\nfor()\n\nnewMsg.payload={\n\n}\n\n/*\nif(msg.payload){\n    \n    msg={payload:{\n        \"group\": { \n            \"hide\": [\"StatoPresse_Pressa2\"], \n            \"show\": [\"StatoPresse_Pressa1\"]\n        }\n    }}\n}\nelse{\n    msg = {payload:{\n        \"group\": {\n            \"hide\": [\"StatoPresse_Pressa1\"],\n            \"show\": [\"StatoPresse_Pressa2\"]\n        }\n    }}\n\n}\n*/\nreturn msg;\n/*\n{\"group\":{\n    \"hide\":[\"Home_Group_1\",\"Home_Group_2\"],\n    \"show\":[\"Home_Group_3\"]\n    }\n}\n\n{ \n    \"group\": { \n        \"hide\": [\"tab_name_group_name_with_underscores\"], \n        \"show\": [\"reveal_another_group\"],\n        \"focus\": true,\n     }\n}\n*/",
        "outputs": 1,
        "noerr": 11,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2685,
        "wires": [
            [
                "94a755f368e072f5"
            ]
        ]
    },
    {
        "id": "f129b1cd09faa95a",
        "type": "change",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "add pressa1",
        "rules": [
            {
                "t": "set",
                "p": "pressa",
                "pt": "msg",
                "to": "pressa1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 2370,
        "wires": [
            [
                "b34226be7162078f"
            ]
        ]
    },
    {
        "id": "c9eb164e0cd29647",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoInf graphButton",
        "group": "dc04b0c0c2689120",
        "order": 5,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-line-chart",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoInf",
        "topicType": "str",
        "x": 860,
        "y": 2355,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "0b9259e05173ffcb",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "tempPianoInf settingsButton",
        "group": "dc04b0c0c2689120",
        "order": 15,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-cog",
        "payload": "settings",
        "payloadType": "str",
        "topic": "tempPianoInf",
        "topicType": "str",
        "x": 860,
        "y": 2400,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "363bd50b957a8410",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "pressPressata settingsButton",
        "group": "dc04b0c0c2689120",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-cog",
        "payload": "settings",
        "payloadType": "str",
        "topic": "pressPressata",
        "topicType": "str",
        "x": 870,
        "y": 2505,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "269e8baa56faef78",
        "type": "ui_button",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "pressPressata graphButton",
        "group": "dc04b0c0c2689120",
        "order": 13,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "impostazioni indicatori",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-line-chart",
        "payload": "settings",
        "payloadType": "str",
        "topic": "pressPressata",
        "topicType": "str",
        "x": 860,
        "y": 2460,
        "wires": [
            [
                "f129b1cd09faa95a"
            ]
        ]
    },
    {
        "id": "1f797f8d865e8ebd",
        "type": "link in",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "link in 7",
        "links": [
            "b34226be7162078f"
        ],
        "x": 800,
        "y": 2685,
        "wires": [
            [
                "dfae6536e47d96c1"
            ]
        ]
    },
    {
        "id": "b34226be7162078f",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "3df0d3098de49375",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "1f797f8d865e8ebd"
        ],
        "x": 1265,
        "y": 2370,
        "wires": []
    },
    {
        "id": "6adf7e418418b659",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "83e9f4234bb5157e",
        "name": "come clonare",
        "info": "\n    seleziona nodi\n\n    export come json\n\n    avranno un aspetto simile a\n        {\n            \"id\": \"8688db4c9c99cada\",               \n            \"type\": \"ui_led\",       //nodo semplice\n            \"order\": 3,\n            \"group\": \"f139ce507b5170da\",\n            \"width\": 7,\n            \"height\": 1,\n            \"label\": \"emergenza attiva\",\n            ..stuff..\n            \"x\": 940,\n            \"y\": 420,\n            \"wires\": []\n        },\n        ..stuff..\n        {\n            \"id\": \"f139ce507b5170da\",\n            \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n            \"name\": \"Pressa 2\",\n            \"tab\": \"533e203349de7f15\",\n            \"order\": 2,\n            \"disp\": true,\n            \"width\": 9,\n            \"collapse\": false,\n            \"className\": \"\"\n        },\n        {\n            \"id\": \"533e203349de7f15\",\n            \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n            \"name\": \"Stato Presse\",\n            \"icon\": \"dashboard\",\n            \"order\": 1,\n            \"disabled\": false,\n            \"hidden\": false\n        },\n    CON UTILITY\n        incolla in payload l'export limitato\n        modifica clone utility a piacere (piu info all interno)\n        se ricevi errori: esporta l'intero progetto tramite il menu in alto a destra ed incollalo in \"full export\"    //nota: non tutti i config-nodes vengono inclusi negli export: l'utilty cercherà in fullExport quelli mancanti\n        \n    CON NOTEPAD\n        usa find/replace su notepad per:\n        - trovare l'id del nuovo gruppo\n        - rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n        -fare altre eventuali modifiche\n\n",
        "x": 1315,
        "y": 405,
        "wires": []
    },
    {
        "id": "0fe8d0737ad04e30",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "83e9f4234bb5157e",
        "name": "paste json export here",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "fullExport",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 1250,
        "y": 450,
        "wires": [
            [
                "fc435c5a1f9f0c92",
                "0c2f824d1edcbe0b"
            ]
        ]
    },
    {
        "id": "e5f487ee4d811b22",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "83e9f4234bb5157e",
        "name": "copyResultFromConsole",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1655,
        "y": 450,
        "wires": []
    },
    {
        "id": "fc435c5a1f9f0c92",
        "type": "function",
        "z": "2831664434f14a33",
        "d": true,
        "g": "83e9f4234bb5157e",
        "name": "clone utility",
        "func": "\nconst json=msg.payload;\nconst asString=JSON.stringify(json);\n    //case insensitive\nfunction getId(name,source,type){\n    const reg = new RegExp('\"id\":\\\\s*\"(\\\\w+)\",\\\\s+\"type\":\\\\s*\"' + type + '\",\\\\s+\"name\":\\\\s*\"' + name + '\"', 'gmi')\n    let matches=source.match(reg)\n    if(matches)\n        return matches[1];\n    else{\n        node.warn({info:\"\",json:json,asString:asString,reg:reg})\n        node.error(\"id di \"+name+\" non trovato\");\n        return '';\n    }\n}\nfunction getGroupId(name, source=asString) {\n    return getId(name, source, \"ui_group\");\n}\nfunction getTabId(name, source=asString) {\n    return getId(name, source, \"ui_tab\");\n}\nnode.send(getGroupId(\"pressa 2\"));\n\n\nmsg.result=asString.replaceAll(new RegExp('\"group\":(\\\\s*)\"(\\\\w+)\"','ig'),getGroupId(\"pressa 2\"));\nreturn msg;\n\n\n\n/*\nconst reg = new RegExp(\"/ciao/\", \"ig\")\nreturn {res:\"ciao\".match(/ia/ig) };\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1495,
        "y": 405,
        "wires": [
            [
                "e5f487ee4d811b22"
            ]
        ]
    },
    {
        "id": "0c2f824d1edcbe0b",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "83e9f4234bb5157e",
        "name": "clone utility",
        "func": "\nconst json=msg.payload;\nconst fallback=msg.fullExport;\nconst asString=JSON.stringify(json);\n\n\n\n    //case insensitive\nfunction getId(name,type=null,source=json){\n    name=name.toLowerCase();\n    for(let item of source)\n        if(item.name && item.name.toLowerCase()==name && (!type || type==type))\n            return item.id;\n    for(let item of fallback)\n        if (item.name && item.name.toLowerCase()==name && (!type || type==type))\n            return item.id;\n    node.error(\"id di \"+name+( !type ? \"\" : \" di tipo \"+type)+\" non trovato\");\n    node.warn({name,type,source,fallback});\n    return \"\";\n}\nfunction getGroupId(name, source=json) {\n    return getId(name, \"ui_group\", source);\n}\nfunction getTabId(name, source=json) {\n    return getId(name, \"ui_tab\", source);\n}\n\n\nfunction posOf(id,source=json){\n    for(let i =0;i<source.length;i++)\n        if (source[i].id==id)\n            return i;\n    node.error(\"id \"+id+\" non trovato\");\n    return 0;\n}\n\n\n\n\nvar n=0;\nvar res={};\nfor(let i=0;i<3;i++){\n    for (let item of json) {\n        if (item.group) {\n            item.group = getGroupId(\"Pressa \"+(i+2));\n            n++;\n        }\n        res[\"pressa\"+i+2]=JSON.stringify(json).replaceAll(/pressa\\s*1/g,\"pressa\"+(i+2));\n    }\n}\n\n\n/* switch groups * /\nfor(let item of json){\n    if(item.group){\n        item.group = getGroupId(\"Pressa 4\");\n        n++;\n    }\n}\n/**/\n\n/* * /\nvar n = 0;\nfor (let item of json) {\n    \n}\n/* */\nmsg.res=json;\nmsg.edited=n;\n//node.log([\"clone utility: modificati \"+n+\" attributi\"]);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 450,
        "wires": [
            [
                "e5f487ee4d811b22"
            ]
        ]
    },
    {
        "id": "b7818a6107fc7c09",
        "type": "catch",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "",
        "scope": [
            "d9da898c0922e3a7",
            "1ea30b05f8dafd77",
            "a9888cb6c3d71618",
            "74ce7e7ffcdc83ee",
            "74d93a9f486336e2",
            "eedb33ae969dfe56",
            "59d1d69b47306a55",
            "a85291cf3f906e79",
            "04ad8981080a4bc2",
            "e1b5bc2e6c76d5ad",
            "f14a7d390f641315",
            "251f8db3f4f7739c"
        ],
        "uncaught": false,
        "x": 815,
        "y": 1020,
        "wires": [
            [
                "cdfe98ebc6268de8"
            ]
        ]
    },
    {
        "id": "cdfe98ebc6268de8",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "43b5ce037e6e5304",
        "name": "silence timeouts",
        "func": "\n\nif(msg.error){\n    if (msg.error.message !== \"timeout\")\n        node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 985,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "0b39f4fe0d2dcc2d",
        "type": "ui_text_input",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "label": "setGauges",
        "tooltip": "",
        "group": "dc04b0c0c2689120",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1520,
        "y": 795,
        "wires": [
            [
                "15d6f446b735362b"
            ]
        ]
    },
    {
        "id": "6c287487702754f2",
        "type": "inject",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1410,
        "y": 795,
        "wires": [
            [
                "0b39f4fe0d2dcc2d"
            ]
        ],
        "l": false
    },
    {
        "id": "7e90142dbb2a2111",
        "type": "comment",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "tmp stuff",
        "info": "",
        "x": 1420,
        "y": 750,
        "wires": []
    },
    {
        "id": "1aaef86389397dcf",
        "type": "ui_switch",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "label": "setLeds",
        "tooltip": "",
        "group": "dc04b0c0c2689120",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1520,
        "y": 855,
        "wires": [
            [
                "b7700a2027731da3"
            ]
        ]
    },
    {
        "id": "57b9c2d6e11c5cb7",
        "type": "ui_switch",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "",
        "label": "uiControl",
        "tooltip": "",
        "group": "dc04b0c0c2689120",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1525,
        "y": 915,
        "wires": [
            []
        ]
    },
    {
        "id": "15d6f446b735362b",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "d42b77739d8fd66f",
            "7423f19ef34f213c",
            "b7253dbf06695f76",
            "d5d16f84ccc736a2",
            "e4d090d0d4d5ad43",
            "a9b01087eed62675",
            "529157ba12f0adfe",
            "1daf29b0a1a85680",
            "cbe29d3cc5fedd24",
            "59b1cd6f5bc9dbd1",
            "f1066a75fb521eb7"
        ],
        "x": 1635,
        "y": 795,
        "wires": []
    },
    {
        "id": "b7700a2027731da3",
        "type": "link out",
        "z": "2831664434f14a33",
        "d": true,
        "g": "cccb0df7921dec2f",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "07df8e33e64f6d76",
            "52f2657e8a481171",
            "a318163988c8404a",
            "0f3d48176741f667",
            "edf55c28507377c1",
            "9521a88236715cdd",
            "9a8ed9f8ca633688",
            "a68f69c9cd075166",
            "929ff1413fe086d0",
            "50c404e996c58b6e"
        ],
        "x": 1635,
        "y": 855,
        "wires": []
    },
    {
        "id": "31d694d58ddd3c6c",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "81b3f35a68120159",
        "name": "Pressa1",
        "info": "",
        "x": 420,
        "y": 1165,
        "wires": []
    },
    {
        "id": "eedb33ae969dfe56",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 905,
        "y": 1300,
        "wires": [
            [
                "6f3718697fcc12eb",
                "3dc95c5ff11c4c05"
            ]
        ]
    },
    {
        "id": "cbaef8a2a29aec91",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 715,
        "y": 1315,
        "wires": [
            [
                "eedb33ae969dfe56"
            ]
        ],
        "l": false
    },
    {
        "id": "dfe1c2a4c355b6c6",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 625,
        "y": 1495,
        "wires": [
            [
                "eedb33ae969dfe56",
                "74ce7e7ffcdc83ee",
                "74d93a9f486336e2"
            ]
        ],
        "l": false
    },
    {
        "id": "f762db553be7631d",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoSup_in",
        "links": [
            "a8390a294962caf5",
            "a5b87c54f0bc9f52",
            "0c1159e674965540",
            "270fa03be490aaf8"
        ],
        "x": 715,
        "y": 1285,
        "wires": [
            [
                "eedb33ae969dfe56"
            ]
        ]
    },
    {
        "id": "6f3718697fcc12eb",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoSup_out",
        "mode": "link",
        "links": [
            "eaf1e8f7876a0705",
            "f66c5e139be26935",
            "a2f9a4d89f31b3fe",
            "0b3137de890b52f4",
            "0cd3823a07c45d08",
            "02b34e28a35b0193"
        ],
        "x": 1080,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3dc95c5ff11c4c05",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "cfg pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8c105fb9ba332d83",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 1375,
        "wires": [
            [
                "cbaef8a2a29aec91",
                "4e5604e73bdb6a95",
                "83648648772ad6a5"
            ]
        ],
        "l": false
    },
    {
        "id": "74ce7e7ffcdc83ee",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 905,
        "y": 1420,
        "wires": [
            [
                "9442f133234af130"
            ]
        ]
    },
    {
        "id": "74d93a9f486336e2",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 905,
        "y": 1360,
        "wires": [
            [
                "d9707a1ddd27e51f"
            ]
        ]
    },
    {
        "id": "c7f4104b21b3f0ed",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "onConfigUpdate_in",
        "links": [
            "d552f3455898102d",
            "ec61e58badd4618b"
        ],
        "x": 475,
        "y": 1375,
        "wires": [
            [
                "8c105fb9ba332d83"
            ]
        ],
        "l": true
    },
    {
        "id": "5b32c5c292fcbf85",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 535,
        "y": 1345,
        "wires": [
            [
                "8c105fb9ba332d83"
            ]
        ],
        "l": false
    },
    {
        "id": "4e5604e73bdb6a95",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 715,
        "y": 1375,
        "wires": [
            [
                "74d93a9f486336e2"
            ]
        ],
        "l": false
    },
    {
        "id": "83648648772ad6a5",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 715,
        "y": 1435,
        "wires": [
            [
                "74ce7e7ffcdc83ee"
            ]
        ],
        "l": false
    },
    {
        "id": "d0b5efc6d9553bf6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_pressPressata_in",
        "links": [
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "198980510e71b358"
        ],
        "x": 715,
        "y": 1405,
        "wires": [
            [
                "74ce7e7ffcdc83ee"
            ]
        ]
    },
    {
        "id": "9442f133234af130",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_pressPressata_out",
        "mode": "link",
        "links": [
            "6ea5b0e752187a11",
            "e4cb9dfb2e461e20"
        ],
        "x": 1080,
        "y": 1420,
        "wires": []
    },
    {
        "id": "842f392e7b128179",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoInf_in",
        "links": [
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "ceec0c55061a2fd4",
            "ce4da829986578cc"
        ],
        "x": 715,
        "y": 1345,
        "wires": [
            [
                "74d93a9f486336e2"
            ]
        ]
    },
    {
        "id": "d9707a1ddd27e51f",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "pressa1_tempPianoInf_out",
        "mode": "link",
        "links": [
            "c2fd121fa884180a",
            "5fd6da994b8f7cd0"
        ],
        "x": 1080,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d10978b2469ceff3",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "d4f58c108037d973",
        "name": "config update",
        "info": "\nseleziona nodi\n\nexport come json\n\navranno un aspetto simile a\n    {\n        \"id\": \"8688db4c9c99cada\",               \n        \"type\": \"ui_led\",       //nodo semplice\n        \"order\": 3,\n        \"group\": \"f139ce507b5170da\",\n        \"width\": 7,\n        \"height\": 1,\n        \"label\": \"emergenza attiva\",\n        ..stuff..\n        \"x\": 940,\n        \"y\": 420,\n        \"wires\": []\n    },\n    ..stuff..\n    {\n        \"id\": \"f139ce507b5170da\",\n        \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n        \"name\": \"Pressa 2\",\n        \"tab\": \"533e203349de7f15\",\n        \"order\": 2,\n        \"disp\": true,\n        \"width\": 9,\n        \"collapse\": false,\n        \"className\": \"\"\n    },\n    {\n        \"id\": \"533e203349de7f15\",\n        \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n        \"name\": \"Stato Presse\",\n        \"icon\": \"dashboard\",\n        \"order\": 1,\n        \"disabled\": false,\n        \"hidden\": false\n    },\n\nusa find/replace su notepad per:\n- trovare l'id del nuovo gruppo\n- rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n-fare altre eventuali modifiche",
        "x": 525,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d2baf0268056e3cc",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "sort data by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alife",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emergency",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idraulicCmd",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoSup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoInf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressPressata",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cycleActive",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idPressa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 565,
        "y": 1825,
        "wires": [
            [
                "b04dae3690891cd4"
            ],
            [
                "0dd9833c9af4a1b1"
            ],
            [
                "7e8e0c5575861e5a"
            ],
            [
                "0c1159e674965540"
            ],
            [
                "ceec0c55061a2fd4"
            ],
            [
                "198980510e71b358"
            ],
            [],
            [],
            [
                "849493312f6d785b"
            ]
        ]
    },
    {
        "id": "9890c53475b90fa6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_mixedDataIn",
        "links": [
            "f496db4601480ad7",
            "48f4e0f84560c01c",
            "258898fad92ce0cb",
            "e858a984e03cc590",
            "b4f724b9014050f9",
            "40055290bca1310c",
            "ba09a3480ecac734",
            "92a5a0ca4441d597"
        ],
        "x": 350,
        "y": 1825,
        "wires": [
            [
                "d2baf0268056e3cc"
            ]
        ],
        "l": true
    },
    {
        "id": "b04dae3690891cd4",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_alifeDataIn_dataIn_out",
        "mode": "link",
        "links": [
            "335b885cb4328c74"
        ],
        "x": 730,
        "y": 1705,
        "wires": []
    },
    {
        "id": "0dd9833c9af4a1b1",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_emergency_dataIn_out",
        "mode": "link",
        "links": [
            "a3a97f1cf85d0347"
        ],
        "x": 730,
        "y": 1735,
        "wires": []
    },
    {
        "id": "7e8e0c5575861e5a",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_idraulicCmd_dataIn_out",
        "mode": "link",
        "links": [
            "226ddfe740d17c77"
        ],
        "x": 730,
        "y": 1765,
        "wires": []
    },
    {
        "id": "0c1159e674965540",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_tempPianoSup_dataIn_out",
        "mode": "link",
        "links": [
            "eaf1e8f7876a0705",
            "f762db553be7631d"
        ],
        "x": 730,
        "y": 1795,
        "wires": []
    },
    {
        "id": "ceec0c55061a2fd4",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_tempPianoInf_dataIn_out",
        "mode": "link",
        "links": [
            "842f392e7b128179",
            "c2fd121fa884180a"
        ],
        "x": 730,
        "y": 1825,
        "wires": []
    },
    {
        "id": "198980510e71b358",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_pressPressata_dataIn_out",
        "mode": "link",
        "links": [
            "6ea5b0e752187a11",
            "d0b5efc6d9553bf6"
        ],
        "x": 730,
        "y": 1855,
        "wires": []
    },
    {
        "id": "849493312f6d785b",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "error",
        "func": "node.error({err:\"unknown topic in pressa1_sortData\",topic:msg.topic,msg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 765,
        "y": 1945,
        "wires": [
            []
        ]
    },
    {
        "id": "70b67eb3bb9797ac",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "data inputs",
        "info": "",
        "x": 320,
        "y": 1705,
        "wires": []
    },
    {
        "id": "cd5be50a30e65857",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "nota: all data inputs must use this group (read me)",
        "info": "\nall inputs should either use the mixed input \n OR the single link-outs INSIDE THIS GROUP to be properly handled and formatted\n\nfor example all inputs to gauges must also be sent to \"apply gauges config\"",
        "x": 440,
        "y": 1735,
        "wires": []
    },
    {
        "id": "7446c855e9d2de4f",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "6067e973b7dd40eb",
        "name": "pressa1_alifeDataIn_in",
        "links": [
            "24665e32e9b393a2",
            "f22eaeab0459ee15",
            "666043918c5da376",
            "6177200045e07c4e",
            "92df3ab13e5ca91a",
            "83681412164bda60"
        ],
        "x": 545,
        "y": 1660,
        "wires": [
            [
                "3a7d35a0bfec5b49"
            ]
        ],
        "l": true
    },
    {
        "id": "0b20d7db2393da61",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "ef0c6ed3656f62f1",
        "name": "Pressa2",
        "info": "",
        "x": 2140,
        "y": 1165,
        "wires": []
    },
    {
        "id": "04ad8981080a4bc2",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 2625,
        "y": 1300,
        "wires": [
            [
                "2b56c9d224d141fc",
                "33e726969f43708d"
            ]
        ]
    },
    {
        "id": "d621806b9d512da2",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1315,
        "wires": [
            [
                "04ad8981080a4bc2"
            ]
        ],
        "l": false
    },
    {
        "id": "de0739c47a7ee00c",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2345,
        "y": 1495,
        "wires": [
            [
                "04ad8981080a4bc2",
                "59d1d69b47306a55",
                "a85291cf3f906e79"
            ]
        ],
        "l": false
    },
    {
        "id": "a8134e53f1635cf6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "pressa2_tempPianoSup_in",
        "links": [
            "a8390a294962caf5",
            "a5b87c54f0bc9f52",
            "39ee92fcc64d963c",
            "270fa03be490aaf8"
        ],
        "x": 2435,
        "y": 1285,
        "wires": [
            [
                "04ad8981080a4bc2"
            ]
        ]
    },
    {
        "id": "2b56c9d224d141fc",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "pressa2_tempPianoSup_out",
        "mode": "link",
        "links": [
            "335860a957682321",
            "f66c5e139be26935",
            "a2f9a4d89f31b3fe",
            "0b3137de890b52f4",
            "0cd3823a07c45d08",
            "02b34e28a35b0193"
        ],
        "x": 2800,
        "y": 1300,
        "wires": []
    },
    {
        "id": "33e726969f43708d",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "cfg pressa2 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 1240,
        "wires": []
    },
    {
        "id": "bb0e2980902fc869",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2330,
        "y": 1375,
        "wires": [
            [
                "d621806b9d512da2",
                "85e920d25faffc5e",
                "b56980577aeeef39"
            ]
        ],
        "l": false
    },
    {
        "id": "59d1d69b47306a55",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 2625,
        "y": 1420,
        "wires": [
            [
                "50748153bedb7365"
            ]
        ]
    },
    {
        "id": "a85291cf3f906e79",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 2625,
        "y": 1360,
        "wires": [
            [
                "781a5cd284d89138"
            ]
        ]
    },
    {
        "id": "71cdad2935eab809",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "onConfigUpdate_in",
        "links": [
            "d552f3455898102d",
            "ec61e58badd4618b"
        ],
        "x": 2195,
        "y": 1375,
        "wires": [
            [
                "bb0e2980902fc869"
            ]
        ],
        "l": true
    },
    {
        "id": "ab8fc6de0b76ea47",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2255,
        "y": 1345,
        "wires": [
            [
                "bb0e2980902fc869"
            ]
        ],
        "l": false
    },
    {
        "id": "85e920d25faffc5e",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1375,
        "wires": [
            [
                "a85291cf3f906e79"
            ]
        ],
        "l": false
    },
    {
        "id": "b56980577aeeef39",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1435,
        "wires": [
            [
                "59d1d69b47306a55"
            ]
        ],
        "l": false
    },
    {
        "id": "da089c88f8c7df29",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "pressa2_pressPressata_in",
        "links": [
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "4207c18fb1c725a4"
        ],
        "x": 2435,
        "y": 1405,
        "wires": [
            [
                "59d1d69b47306a55"
            ]
        ]
    },
    {
        "id": "50748153bedb7365",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "pressa2_pressPressata_out",
        "mode": "link",
        "links": [
            "423d6d293533b632",
            "e4cb9dfb2e461e20"
        ],
        "x": 2800,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ff10a77e0e1952bb",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "pressa2_tempPianoInf_in",
        "links": [
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "237711c4af6c00b8",
            "ce4da829986578cc"
        ],
        "x": 2435,
        "y": 1345,
        "wires": [
            [
                "a85291cf3f906e79"
            ]
        ]
    },
    {
        "id": "781a5cd284d89138",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "pressa2_tempPianoInf_out",
        "mode": "link",
        "links": [
            "a418abe4b0a07dce",
            "5fd6da994b8f7cd0"
        ],
        "x": 2800,
        "y": 1360,
        "wires": []
    },
    {
        "id": "88e5380b5a7c839f",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "9170b812dbe446e7",
        "name": "config update",
        "info": "\nseleziona nodi\n\nexport come json\n\navranno un aspetto simile a\n    {\n        \"id\": \"8688db4c9c99cada\",               \n        \"type\": \"ui_led\",       //nodo semplice\n        \"order\": 3,\n        \"group\": \"f139ce507b5170da\",\n        \"width\": 7,\n        \"height\": 1,\n        \"label\": \"emergenza attiva\",\n        ..stuff..\n        \"x\": 940,\n        \"y\": 420,\n        \"wires\": []\n    },\n    ..stuff..\n    {\n        \"id\": \"f139ce507b5170da\",\n        \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n        \"name\": \"Pressa 2\",\n        \"tab\": \"533e203349de7f15\",\n        \"order\": 2,\n        \"disp\": true,\n        \"width\": 9,\n        \"collapse\": false,\n        \"className\": \"\"\n    },\n    {\n        \"id\": \"533e203349de7f15\",\n        \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n        \"name\": \"Stato Presse\",\n        \"icon\": \"dashboard\",\n        \"order\": 1,\n        \"disabled\": false,\n        \"hidden\": false\n    },\n\nusa find/replace su notepad per:\n- trovare l'id del nuovo gruppo\n- rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n-fare altre eventuali modifiche",
        "x": 2245,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c93aa2a22f83519e",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "order": 2,
        "group": "644e1a54256c1459",
        "width": 5,
        "height": 1,
        "label": "connessione",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#fdc61e",
                "value": "warn",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "alife",
        "x": 3235,
        "y": 1630,
        "wires": []
    },
    {
        "id": "b94d03c6fa83589f",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "order": 5,
        "group": "644e1a54256c1459",
        "width": 5,
        "height": 1,
        "label": "emergenza attiva",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#aca0a0",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "emergenza",
        "x": 3120,
        "y": 1690,
        "wires": []
    },
    {
        "id": "5057b85e84045f6c",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "order": 8,
        "group": "644e1a54256c1459",
        "width": 5,
        "height": 1,
        "label": "Comando Centralina Idraulica",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "centralina idraulica",
        "x": 3145,
        "y": 1735,
        "wires": []
    },
    {
        "id": "b55bf496d3cc1513",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "",
        "group": "644e1a54256c1459",
        "order": 10,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Superiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 3180,
        "y": 1825,
        "wires": []
    },
    {
        "id": "e1b9292fa6bac2e3",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "",
        "group": "644e1a54256c1459",
        "order": 11,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Inferiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 3175,
        "y": 1930,
        "wires": []
    },
    {
        "id": "29ec537f14d3d22a",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "",
        "group": "644e1a54256c1459",
        "order": 12,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Pressione di Pressata",
        "label": "units",
        "format": "{{value}} Bar",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 3155,
        "y": 2035,
        "wires": []
    },
    {
        "id": "f754852205e30e67",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "UI Pressa2",
        "info": "",
        "x": 2755,
        "y": 1585,
        "wires": []
    },
    {
        "id": "fa61973aeffbf656",
        "type": "trigger",
        "z": "2831664434f14a33",
        "d": true,
        "g": "2ca6f2c1b0c21cf1",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3080,
        "y": 1630,
        "wires": [
            []
        ]
    },
    {
        "id": "cec28be43f93e629",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 1930,
        "wires": [
            [
                "e1b9292fa6bac2e3"
            ]
        ]
    },
    {
        "id": "c74e3acc86372d69",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 2035,
        "wires": [
            [
                "29ec537f14d3d22a"
            ]
        ]
    },
    {
        "id": "423d6d293533b632",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "pressa2_pressPressata_in",
        "links": [
            "50748153bedb7365",
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "4207c18fb1c725a4"
        ],
        "x": 2815,
        "y": 2035,
        "wires": [
            [
                "c74e3acc86372d69"
            ]
        ]
    },
    {
        "id": "a418abe4b0a07dce",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "pressa2_tempPianoInf_in",
        "links": [
            "781a5cd284d89138",
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "237711c4af6c00b8",
            "ce4da829986578cc"
        ],
        "x": 2880,
        "y": 1915,
        "wires": [
            [
                "cec28be43f93e629"
            ]
        ]
    },
    {
        "id": "335860a957682321",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "pressa2_tempPianoSup_in",
        "links": [
            "2b56c9d224d141fc",
            "a8390a294962caf5",
            "b4b16a9caa54f7d3",
            "a5b87c54f0bc9f52",
            "39ee92fcc64d963c",
            "270fa03be490aaf8"
        ],
        "x": 2815,
        "y": 1825,
        "wires": [
            [
                "baa146a03506aca9"
            ]
        ]
    },
    {
        "id": "fe28da5c501e29bd",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "idraulicCmd",
        "links": [
            "fdbb5739cd76ae5a",
            "ae5dbeb3428c4fa0"
        ],
        "x": 2890,
        "y": 1735,
        "wires": [
            [
                "5057b85e84045f6c"
            ]
        ]
    },
    {
        "id": "619c850163c2ff76",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "pressa2_emergency_in",
        "links": [
            "061b06fe8569e1a9",
            "729dd9d4d28de4c8",
            "8930f22e16dd5e06",
            "b7ba6d9287419416"
        ],
        "x": 2935,
        "y": 1675,
        "wires": [
            [
                "b94d03c6fa83589f"
            ]
        ]
    },
    {
        "id": "6de7c21a06de5b4a",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "pressa2_alife_in",
        "links": [
            "baae71db9035ccf8",
            "95c354a36b435a17",
            "8dd06afceea8ebf8",
            "80f16227937027de",
            "55c8b97d147f8570"
        ],
        "x": 2890,
        "y": 1630,
        "wires": [
            [
                "fa61973aeffbf656"
            ]
        ]
    },
    {
        "id": "a68f69c9cd075166",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "link in 16",
        "links": [
            "b7700a2027731da3"
        ],
        "x": 2800,
        "y": 1690,
        "wires": [
            [
                "af9aace116c71617"
            ]
        ]
    },
    {
        "id": "af9aace116c71617",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2850,
        "y": 1690,
        "wires": [
            [
                "b94d03c6fa83589f",
                "5057b85e84045f6c",
                "fa61973aeffbf656"
            ]
        ],
        "l": false
    },
    {
        "id": "cbe29d3cc5fedd24",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "link in 17",
        "links": [
            "15d6f446b735362b"
        ],
        "x": 2680,
        "y": 1930,
        "wires": [
            [
                "d62d94327506c361"
            ]
        ]
    },
    {
        "id": "d62d94327506c361",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2775,
        "y": 1930,
        "wires": [
            [
                "cec28be43f93e629",
                "c74e3acc86372d69",
                "baa146a03506aca9"
            ]
        ],
        "l": false
    },
    {
        "id": "baa146a03506aca9",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "2ca6f2c1b0c21cf1",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2980,
        "y": 1825,
        "wires": [
            [
                "b55bf496d3cc1513"
            ]
        ]
    },
    {
        "id": "cf898100deca5850",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "sort data by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alife",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emergency",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idraulicCmd",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoSup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoInf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressPressata",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cycleActive",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idPressa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 2285,
        "y": 1825,
        "wires": [
            [
                "80f16227937027de"
            ],
            [
                "b7ba6d9287419416"
            ],
            [
                "ae5dbeb3428c4fa0"
            ],
            [
                "39ee92fcc64d963c"
            ],
            [
                "237711c4af6c00b8"
            ],
            [
                "4207c18fb1c725a4"
            ],
            [],
            [],
            [
                "3822344a17360084"
            ]
        ]
    },
    {
        "id": "56377c4577552212",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_mixedDataIn",
        "links": [
            "19c5b907b8a99896",
            "de2490372a9afcf4",
            "258898fad92ce0cb",
            "e858a984e03cc590",
            "b4f724b9014050f9",
            "40055290bca1310c",
            "ba09a3480ecac734",
            "92a5a0ca4441d597"
        ],
        "x": 2070,
        "y": 1825,
        "wires": [
            [
                "cf898100deca5850"
            ]
        ],
        "l": true
    },
    {
        "id": "80f16227937027de",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_alifeDataIn_dataIn_out",
        "mode": "link",
        "links": [
            "6de7c21a06de5b4a"
        ],
        "x": 2450,
        "y": 1705,
        "wires": []
    },
    {
        "id": "b7ba6d9287419416",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_emergency_dataIn_out",
        "mode": "link",
        "links": [
            "619c850163c2ff76"
        ],
        "x": 2450,
        "y": 1735,
        "wires": []
    },
    {
        "id": "ae5dbeb3428c4fa0",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_idraulicCmd_dataIn_out",
        "mode": "link",
        "links": [
            "fe28da5c501e29bd"
        ],
        "x": 2450,
        "y": 1765,
        "wires": []
    },
    {
        "id": "39ee92fcc64d963c",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_tempPianoSup_dataIn_out",
        "mode": "link",
        "links": [
            "335860a957682321",
            "a8134e53f1635cf6"
        ],
        "x": 2450,
        "y": 1795,
        "wires": []
    },
    {
        "id": "237711c4af6c00b8",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_tempPianoInf_dataIn_out",
        "mode": "link",
        "links": [
            "ff10a77e0e1952bb",
            "a418abe4b0a07dce"
        ],
        "x": 2450,
        "y": 1825,
        "wires": []
    },
    {
        "id": "4207c18fb1c725a4",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_pressPressata_dataIn_out",
        "mode": "link",
        "links": [
            "423d6d293533b632",
            "da089c88f8c7df29"
        ],
        "x": 2450,
        "y": 1855,
        "wires": []
    },
    {
        "id": "3822344a17360084",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "error",
        "func": "node.error({err:\"unknown topic in pressa2_sortData\",topic:msg.topic,msg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 2485,
        "y": 1945,
        "wires": [
            []
        ]
    },
    {
        "id": "f5fe63e98db64a03",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "data inputs",
        "info": "",
        "x": 2040,
        "y": 1705,
        "wires": []
    },
    {
        "id": "1b4bcab9f691b5db",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "nota: all data inputs must use this group (read me)",
        "info": "\nall inputs should either use the mixed input \n OR the single link-outs INSIDE THIS GROUP to be properly handled and formatted\n\nfor example all inputs to gauges must also be sent to \"apply gauges config\"",
        "x": 2160,
        "y": 1735,
        "wires": []
    },
    {
        "id": "577869e151539f03",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9e32d6a46ccf09ee",
        "name": "pressa2_alifeDataIn_in",
        "links": [
            "24665e32e9b393a2",
            "3f6cec0ad8030491",
            "666043918c5da376",
            "6177200045e07c4e",
            "92df3ab13e5ca91a",
            "83681412164bda60"
        ],
        "x": 2265,
        "y": 1660,
        "wires": [
            [
                "80f16227937027de",
                "c93aa2a22f83519e"
            ]
        ],
        "l": true
    },
    {
        "id": "b5b2625d5b358ac6",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "c947217d7b4fccbd",
        "name": "Pressa3",
        "info": "",
        "x": 420,
        "y": 2805,
        "wires": []
    },
    {
        "id": "a9888cb6c3d71618",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 905,
        "y": 2940,
        "wires": [
            [
                "75da577310765314",
                "1907f3bf8fb171ea"
            ]
        ]
    },
    {
        "id": "915995140b4de971",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 715,
        "y": 2955,
        "wires": [
            [
                "a9888cb6c3d71618"
            ]
        ],
        "l": false
    },
    {
        "id": "19c7a19de678ce15",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 625,
        "y": 3135,
        "wires": [
            [
                "a9888cb6c3d71618",
                "d9da898c0922e3a7",
                "1ea30b05f8dafd77"
            ]
        ],
        "l": false
    },
    {
        "id": "08f2f36c4afebcb3",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "pressa3_tempPianoSup_in",
        "links": [
            "a8390a294962caf5",
            "a5b87c54f0bc9f52",
            "fe347163b7579388",
            "270fa03be490aaf8"
        ],
        "x": 715,
        "y": 2925,
        "wires": [
            [
                "a9888cb6c3d71618"
            ]
        ]
    },
    {
        "id": "75da577310765314",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "pressa3_tempPianoSup_out",
        "mode": "link",
        "links": [
            "844c5bc2fea2c797",
            "f66c5e139be26935",
            "a2f9a4d89f31b3fe",
            "0b3137de890b52f4",
            "0cd3823a07c45d08",
            "02b34e28a35b0193"
        ],
        "x": 1080,
        "y": 2940,
        "wires": []
    },
    {
        "id": "1907f3bf8fb171ea",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "cfg pressa3 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 2880,
        "wires": []
    },
    {
        "id": "7445df5ea6b3979f",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 3015,
        "wires": [
            [
                "915995140b4de971",
                "c4f52ae898dee06a",
                "4b5b1c851646c881"
            ]
        ],
        "l": false
    },
    {
        "id": "d9da898c0922e3a7",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 905,
        "y": 3060,
        "wires": [
            [
                "8d3a9da3ebbd52ad"
            ]
        ]
    },
    {
        "id": "1ea30b05f8dafd77",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 905,
        "y": 3000,
        "wires": [
            [
                "b4234dd3d234156d"
            ]
        ]
    },
    {
        "id": "a3c95a133003aada",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "onConfigUpdate_in",
        "links": [
            "d552f3455898102d",
            "ec61e58badd4618b"
        ],
        "x": 475,
        "y": 3015,
        "wires": [
            [
                "7445df5ea6b3979f"
            ]
        ],
        "l": true
    },
    {
        "id": "e5e02c455bbfe832",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 535,
        "y": 2985,
        "wires": [
            [
                "7445df5ea6b3979f"
            ]
        ],
        "l": false
    },
    {
        "id": "c4f52ae898dee06a",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 715,
        "y": 3015,
        "wires": [
            [
                "1ea30b05f8dafd77"
            ]
        ],
        "l": false
    },
    {
        "id": "4b5b1c851646c881",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 715,
        "y": 3075,
        "wires": [
            [
                "d9da898c0922e3a7"
            ]
        ],
        "l": false
    },
    {
        "id": "7cf07817432db46f",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "pressa3_pressPressata_in",
        "links": [
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "da0a7793e40b3340"
        ],
        "x": 715,
        "y": 3045,
        "wires": [
            [
                "d9da898c0922e3a7"
            ]
        ]
    },
    {
        "id": "8d3a9da3ebbd52ad",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "pressa3_pressPressata_out",
        "mode": "link",
        "links": [
            "6b74e72683c0d1f6",
            "e4cb9dfb2e461e20"
        ],
        "x": 1080,
        "y": 3060,
        "wires": []
    },
    {
        "id": "296220f1eae982a2",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "pressa3_tempPianoInf_in",
        "links": [
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "d0d6386c08ed89d2",
            "ce4da829986578cc"
        ],
        "x": 715,
        "y": 2985,
        "wires": [
            [
                "1ea30b05f8dafd77"
            ]
        ]
    },
    {
        "id": "b4234dd3d234156d",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "pressa3_tempPianoInf_out",
        "mode": "link",
        "links": [
            "c4d4ea455e2f73f4",
            "5fd6da994b8f7cd0"
        ],
        "x": 1080,
        "y": 3000,
        "wires": []
    },
    {
        "id": "783edff7e22ab4b4",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "9f2647ae0bb0686b",
        "name": "config update",
        "info": "\nseleziona nodi\n\nexport come json\n\navranno un aspetto simile a\n    {\n        \"id\": \"8688db4c9c99cada\",               \n        \"type\": \"ui_led\",       //nodo semplice\n        \"order\": 3,\n        \"group\": \"f139ce507b5170da\",\n        \"width\": 7,\n        \"height\": 1,\n        \"label\": \"emergenza attiva\",\n        ..stuff..\n        \"x\": 940,\n        \"y\": 420,\n        \"wires\": []\n    },\n    ..stuff..\n    {\n        \"id\": \"f139ce507b5170da\",\n        \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n        \"name\": \"Pressa 2\",\n        \"tab\": \"533e203349de7f15\",\n        \"order\": 2,\n        \"disp\": true,\n        \"width\": 9,\n        \"collapse\": false,\n        \"className\": \"\"\n    },\n    {\n        \"id\": \"533e203349de7f15\",\n        \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n        \"name\": \"Stato Presse\",\n        \"icon\": \"dashboard\",\n        \"order\": 1,\n        \"disabled\": false,\n        \"hidden\": false\n    },\n\nusa find/replace su notepad per:\n- trovare l'id del nuovo gruppo\n- rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n-fare altre eventuali modifiche",
        "x": 525,
        "y": 2880,
        "wires": []
    },
    {
        "id": "f4ab1dce07fe7f11",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "order": 2,
        "group": "3d9a2ba59f9c57a8",
        "width": 5,
        "height": 1,
        "label": "connessione",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#fdc61e",
                "value": "warn",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "alife",
        "x": 1515,
        "y": 3270,
        "wires": []
    },
    {
        "id": "555d91aa8bf28ae9",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "order": 5,
        "group": "3d9a2ba59f9c57a8",
        "width": 5,
        "height": 1,
        "label": "emergenza attiva",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#aca0a0",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "emergenza",
        "x": 1400,
        "y": 3330,
        "wires": []
    },
    {
        "id": "e5f7e9c22a058ed1",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "order": 8,
        "group": "3d9a2ba59f9c57a8",
        "width": 5,
        "height": 1,
        "label": "Comando Centralina Idraulica",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "centralina idraulica",
        "x": 1425,
        "y": 3375,
        "wires": []
    },
    {
        "id": "ceea7655c2f32850",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "",
        "group": "3d9a2ba59f9c57a8",
        "order": 10,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Superiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1460,
        "y": 3465,
        "wires": []
    },
    {
        "id": "ce8d2903e7974843",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "",
        "group": "3d9a2ba59f9c57a8",
        "order": 11,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Inferiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1455,
        "y": 3570,
        "wires": []
    },
    {
        "id": "0fd972c0e636f906",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "",
        "group": "3d9a2ba59f9c57a8",
        "order": 12,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Pressione di Pressata",
        "label": "units",
        "format": "{{value}} Bar",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1435,
        "y": 3675,
        "wires": []
    },
    {
        "id": "321f213ce949e34f",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "UI Pressa3",
        "info": "",
        "x": 1035,
        "y": 3225,
        "wires": []
    },
    {
        "id": "87b78956ec5af576",
        "type": "trigger",
        "z": "2831664434f14a33",
        "d": true,
        "g": "c25454224d93f0a4",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1360,
        "y": 3270,
        "wires": [
            [
                "f4ab1dce07fe7f11"
            ]
        ]
    },
    {
        "id": "3d4881e0b3139213",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 3570,
        "wires": [
            [
                "ce8d2903e7974843"
            ]
        ]
    },
    {
        "id": "9ffbf76eead154a9",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 3675,
        "wires": [
            [
                "0fd972c0e636f906"
            ]
        ]
    },
    {
        "id": "6b74e72683c0d1f6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "pressa3_pressPressata_in",
        "links": [
            "8d3a9da3ebbd52ad",
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "da0a7793e40b3340"
        ],
        "x": 1095,
        "y": 3675,
        "wires": [
            [
                "9ffbf76eead154a9"
            ]
        ]
    },
    {
        "id": "c4d4ea455e2f73f4",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "pressa3_tempPianoInf_in",
        "links": [
            "b4234dd3d234156d",
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "d0d6386c08ed89d2",
            "ce4da829986578cc"
        ],
        "x": 1160,
        "y": 3555,
        "wires": [
            [
                "3d4881e0b3139213"
            ]
        ]
    },
    {
        "id": "844c5bc2fea2c797",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "pressa3_tempPianoSup_in",
        "links": [
            "75da577310765314",
            "a8390a294962caf5",
            "b4b16a9caa54f7d3",
            "a5b87c54f0bc9f52",
            "fe347163b7579388",
            "270fa03be490aaf8"
        ],
        "x": 1095,
        "y": 3465,
        "wires": [
            [
                "1cd1ba43a58cd415"
            ]
        ]
    },
    {
        "id": "49e591142a7bea9a",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "idraulicCmd",
        "links": [
            "fdbb5739cd76ae5a",
            "0270dc1e8f7e9aa7"
        ],
        "x": 1170,
        "y": 3375,
        "wires": [
            [
                "e5f7e9c22a058ed1"
            ]
        ]
    },
    {
        "id": "5a518d75c64bc0ea",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "pressa3_emergency_in",
        "links": [
            "061b06fe8569e1a9",
            "729dd9d4d28de4c8",
            "8930f22e16dd5e06",
            "397081947df56407"
        ],
        "x": 1215,
        "y": 3315,
        "wires": [
            [
                "555d91aa8bf28ae9"
            ]
        ]
    },
    {
        "id": "6b8fb6f2bba64125",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "pressa3_alife_in",
        "links": [
            "baae71db9035ccf8",
            "95c354a36b435a17",
            "8dd06afceea8ebf8",
            "2b4e10741bb7b04a",
            "55c8b97d147f8570"
        ],
        "x": 1170,
        "y": 3270,
        "wires": [
            [
                "87b78956ec5af576"
            ]
        ]
    },
    {
        "id": "929ff1413fe086d0",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "link in 16",
        "links": [
            "b7700a2027731da3"
        ],
        "x": 1080,
        "y": 3330,
        "wires": [
            [
                "d27d4300fc48fe25"
            ]
        ]
    },
    {
        "id": "d27d4300fc48fe25",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 3330,
        "wires": [
            [
                "555d91aa8bf28ae9",
                "e5f7e9c22a058ed1",
                "87b78956ec5af576"
            ]
        ],
        "l": false
    },
    {
        "id": "59b1cd6f5bc9dbd1",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "link in 17",
        "links": [
            "15d6f446b735362b"
        ],
        "x": 960,
        "y": 3570,
        "wires": [
            [
                "e32d6d2b3ce23351"
            ]
        ]
    },
    {
        "id": "e32d6d2b3ce23351",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1055,
        "y": 3570,
        "wires": [
            [
                "3d4881e0b3139213",
                "9ffbf76eead154a9",
                "1cd1ba43a58cd415"
            ]
        ],
        "l": false
    },
    {
        "id": "1cd1ba43a58cd415",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "c25454224d93f0a4",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 3465,
        "wires": [
            [
                "ceea7655c2f32850"
            ]
        ]
    },
    {
        "id": "87748d9349a8604a",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "sort data by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alife",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emergency",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idraulicCmd",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoSup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoInf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressPressata",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cycleActive",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idPressa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 565,
        "y": 3465,
        "wires": [
            [
                "2b4e10741bb7b04a"
            ],
            [
                "397081947df56407"
            ],
            [
                "0270dc1e8f7e9aa7"
            ],
            [
                "fe347163b7579388"
            ],
            [
                "d0d6386c08ed89d2"
            ],
            [
                "da0a7793e40b3340"
            ],
            [],
            [],
            [
                "e5e72ce2788268aa"
            ]
        ]
    },
    {
        "id": "f0e330b3f6e390be",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_mixedDataIn",
        "links": [
            "48f3a9fa6bc4b18e",
            "1adb6c93eb34ea15",
            "258898fad92ce0cb",
            "e858a984e03cc590",
            "b4f724b9014050f9",
            "40055290bca1310c",
            "ba09a3480ecac734",
            "92a5a0ca4441d597"
        ],
        "x": 350,
        "y": 3465,
        "wires": [
            [
                "87748d9349a8604a"
            ]
        ],
        "l": true
    },
    {
        "id": "2b4e10741bb7b04a",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_alifeDataIn_dataIn_out",
        "mode": "link",
        "links": [
            "6b8fb6f2bba64125"
        ],
        "x": 730,
        "y": 3345,
        "wires": []
    },
    {
        "id": "397081947df56407",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_emergency_dataIn_out",
        "mode": "link",
        "links": [
            "5a518d75c64bc0ea"
        ],
        "x": 730,
        "y": 3375,
        "wires": []
    },
    {
        "id": "0270dc1e8f7e9aa7",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_idraulicCmd_dataIn_out",
        "mode": "link",
        "links": [
            "49e591142a7bea9a"
        ],
        "x": 730,
        "y": 3405,
        "wires": []
    },
    {
        "id": "fe347163b7579388",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_tempPianoSup_dataIn_out",
        "mode": "link",
        "links": [
            "844c5bc2fea2c797",
            "08f2f36c4afebcb3"
        ],
        "x": 730,
        "y": 3435,
        "wires": []
    },
    {
        "id": "d0d6386c08ed89d2",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_tempPianoInf_dataIn_out",
        "mode": "link",
        "links": [
            "296220f1eae982a2",
            "c4d4ea455e2f73f4"
        ],
        "x": 730,
        "y": 3465,
        "wires": []
    },
    {
        "id": "da0a7793e40b3340",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_pressPressata_dataIn_out",
        "mode": "link",
        "links": [
            "6b74e72683c0d1f6",
            "7cf07817432db46f"
        ],
        "x": 730,
        "y": 3495,
        "wires": []
    },
    {
        "id": "e5e72ce2788268aa",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "error",
        "func": "node.error({err:\"unknown topic in pressa3_sortData\",topic:msg.topic,msg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 765,
        "y": 3585,
        "wires": [
            []
        ]
    },
    {
        "id": "7fad437a9546562d",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "data inputs",
        "info": "",
        "x": 320,
        "y": 3345,
        "wires": []
    },
    {
        "id": "bd70310b8da24361",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "nota: all data inputs must use this group (read me)",
        "info": "\nall inputs should either use the mixed input \n OR the single link-outs INSIDE THIS GROUP to be properly handled and formatted\n\nfor example all inputs to gauges must also be sent to \"apply gauges config\"",
        "x": 440,
        "y": 3375,
        "wires": []
    },
    {
        "id": "db544c8a4e4b5a6f",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "a93dbb5749094ec0",
        "name": "pressa3_alifeDataIn_in",
        "links": [
            "24665e32e9b393a2",
            "548a681fbbc5aad6",
            "666043918c5da376",
            "6177200045e07c4e",
            "92df3ab13e5ca91a",
            "83681412164bda60"
        ],
        "x": 545,
        "y": 3300,
        "wires": [
            [
                "2b4e10741bb7b04a",
                "f4ab1dce07fe7f11"
            ]
        ],
        "l": true
    },
    {
        "id": "2ed5f9d006db777d",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "a22652e0e5a00422",
        "name": "Pressa4",
        "info": "",
        "x": 2140,
        "y": 2805,
        "wires": []
    },
    {
        "id": "e1b5bc2e6c76d5ad",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 2625,
        "y": 2940,
        "wires": [
            [
                "5d1ffc08cdd9417e",
                "ae16b30eeaf52d5c"
            ]
        ]
    },
    {
        "id": "1bc3b7674dca7bb1",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 2955,
        "wires": [
            [
                "e1b5bc2e6c76d5ad"
            ]
        ],
        "l": false
    },
    {
        "id": "41d3be87db9fd0d6",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2345,
        "y": 3135,
        "wires": [
            [
                "e1b5bc2e6c76d5ad",
                "251f8db3f4f7739c",
                "f14a7d390f641315"
            ]
        ],
        "l": false
    },
    {
        "id": "b6c50cf9f36205b4",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "pressa4_tempPianoSup_in",
        "links": [
            "a8390a294962caf5",
            "a5b87c54f0bc9f52",
            "26d3214787b2439d",
            "270fa03be490aaf8"
        ],
        "x": 2435,
        "y": 2925,
        "wires": [
            [
                "e1b5bc2e6c76d5ad"
            ]
        ]
    },
    {
        "id": "5d1ffc08cdd9417e",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "pressa4_tempPianoSup_out",
        "mode": "link",
        "links": [
            "7f3dc62e4cfaeb61",
            "f66c5e139be26935",
            "a2f9a4d89f31b3fe",
            "0b3137de890b52f4",
            "0cd3823a07c45d08",
            "02b34e28a35b0193"
        ],
        "x": 2800,
        "y": 2940,
        "wires": []
    },
    {
        "id": "ae16b30eeaf52d5c",
        "type": "debug",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "cfg pressa4 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 2880,
        "wires": []
    },
    {
        "id": "48c82e4a47da27a2",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2330,
        "y": 3015,
        "wires": [
            [
                "1bc3b7674dca7bb1",
                "1ab4c38be7798a2d",
                "172ea6b14b2deead"
            ]
        ],
        "l": false
    },
    {
        "id": "251f8db3f4f7739c",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 2625,
        "y": 3060,
        "wires": [
            [
                "f5c8f81833a15897"
            ]
        ]
    },
    {
        "id": "f14a7d390f641315",
        "type": "link call",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "links": [
            "d3d062196750b6e0"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 2625,
        "y": 3000,
        "wires": [
            [
                "f0c13cb1504a27fd"
            ]
        ]
    },
    {
        "id": "736f1d79123164d5",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "onConfigUpdate_in",
        "links": [
            "d552f3455898102d",
            "ec61e58badd4618b"
        ],
        "x": 2195,
        "y": 3015,
        "wires": [
            [
                "48c82e4a47da27a2"
            ]
        ],
        "l": true
    },
    {
        "id": "1aaabf5061d1cc83",
        "type": "inject",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2255,
        "y": 2985,
        "wires": [
            [
                "48c82e4a47da27a2"
            ]
        ],
        "l": false
    },
    {
        "id": "1ab4c38be7798a2d",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 3015,
        "wires": [
            [
                "f14a7d390f641315"
            ]
        ],
        "l": false
    },
    {
        "id": "172ea6b14b2deead",
        "type": "change",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 3075,
        "wires": [
            [
                "251f8db3f4f7739c"
            ]
        ],
        "l": false
    },
    {
        "id": "184a5768cc88bec6",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "pressa4_pressPressata_in",
        "links": [
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "3e85a6139504bb70"
        ],
        "x": 2435,
        "y": 3045,
        "wires": [
            [
                "251f8db3f4f7739c"
            ]
        ]
    },
    {
        "id": "f5c8f81833a15897",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "pressa4_pressPressata_out",
        "mode": "link",
        "links": [
            "507185b6330677f8",
            "e4cb9dfb2e461e20"
        ],
        "x": 2800,
        "y": 3060,
        "wires": []
    },
    {
        "id": "7f8826fefe9c0644",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "pressa4_tempPianoInf_in",
        "links": [
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "3ad89ea04c17a803",
            "ce4da829986578cc"
        ],
        "x": 2435,
        "y": 2985,
        "wires": [
            [
                "f14a7d390f641315"
            ]
        ]
    },
    {
        "id": "f0c13cb1504a27fd",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "pressa4_tempPianoInf_out",
        "mode": "link",
        "links": [
            "fb69eb13f1ed47f4",
            "5fd6da994b8f7cd0"
        ],
        "x": 2800,
        "y": 3000,
        "wires": []
    },
    {
        "id": "2001a99f7a6d5461",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "9c42f9c7d3cec4e7",
        "name": "config update",
        "info": "\nseleziona nodi\n\nexport come json\n\navranno un aspetto simile a\n    {\n        \"id\": \"8688db4c9c99cada\",               \n        \"type\": \"ui_led\",       //nodo semplice\n        \"order\": 3,\n        \"group\": \"f139ce507b5170da\",\n        \"width\": 7,\n        \"height\": 1,\n        \"label\": \"emergenza attiva\",\n        ..stuff..\n        \"x\": 940,\n        \"y\": 420,\n        \"wires\": []\n    },\n    ..stuff..\n    {\n        \"id\": \"f139ce507b5170da\",\n        \"type\": \"ui_group\",          //nodo layout dashboard (widjet group)\n        \"name\": \"Pressa 2\",\n        \"tab\": \"533e203349de7f15\",\n        \"order\": 2,\n        \"disp\": true,\n        \"width\": 9,\n        \"collapse\": false,\n        \"className\": \"\"\n    },\n    {\n        \"id\": \"533e203349de7f15\",\n        \"type\": \"ui_tab\",           //nodo layout dashboard (tab)\n        \"name\": \"Stato Presse\",\n        \"icon\": \"dashboard\",\n        \"order\": 1,\n        \"disabled\": false,\n        \"hidden\": false\n    },\n\nusa find/replace su notepad per:\n- trovare l'id del nuovo gruppo\n- rimpiazzare \"group\": in tutti i nodi \"semplici\" con il nuovo id.\n-fare altre eventuali modifiche",
        "x": 2245,
        "y": 2880,
        "wires": []
    },
    {
        "id": "d010763e4edae281",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "order": 2,
        "group": "6bd9f2128ebec730",
        "width": 5,
        "height": 1,
        "label": "connessione",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#fdc61e",
                "value": "warn",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "alife",
        "x": 3235,
        "y": 3270,
        "wires": []
    },
    {
        "id": "8bbfdd96182fe6ad",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "order": 5,
        "group": "6bd9f2128ebec730",
        "width": 5,
        "height": 1,
        "label": "emergenza attiva",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#aca0a0",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "emergenza",
        "x": 3120,
        "y": 3330,
        "wires": []
    },
    {
        "id": "71d2de9ac37ec537",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "order": 8,
        "group": "6bd9f2128ebec730",
        "width": 5,
        "height": 1,
        "label": "Comando Centralina Idraulica",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "centralina idraulica",
        "x": 3145,
        "y": 3375,
        "wires": []
    },
    {
        "id": "979923a0e6fc7490",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "",
        "group": "6bd9f2128ebec730",
        "order": 10,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Superiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 3180,
        "y": 3465,
        "wires": []
    },
    {
        "id": "f8ac9b16d8e8c8c2",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "",
        "group": "6bd9f2128ebec730",
        "order": 11,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Inferiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 3175,
        "y": 3570,
        "wires": []
    },
    {
        "id": "1a746e4647e62e33",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "",
        "group": "6bd9f2128ebec730",
        "order": 12,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Pressione di Pressata",
        "label": "units",
        "format": "{{value}} Bar",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 3155,
        "y": 3675,
        "wires": []
    },
    {
        "id": "e3d01f0efdbc192d",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "UI Pressa4",
        "info": "",
        "x": 2755,
        "y": 3225,
        "wires": []
    },
    {
        "id": "a364218cd9c631be",
        "type": "trigger",
        "z": "2831664434f14a33",
        "d": true,
        "g": "4319550e30808765",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3080,
        "y": 3270,
        "wires": [
            [
                "d010763e4edae281"
            ]
        ]
    },
    {
        "id": "f897649ee3d4d637",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3570,
        "wires": [
            [
                "f8ac9b16d8e8c8c2"
            ]
        ]
    },
    {
        "id": "9db1eab124366579",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3675,
        "wires": [
            [
                "1a746e4647e62e33"
            ]
        ]
    },
    {
        "id": "507185b6330677f8",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "pressa4_pressPressata_in",
        "links": [
            "f5c8f81833a15897",
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "3e85a6139504bb70"
        ],
        "x": 2815,
        "y": 3675,
        "wires": [
            [
                "9db1eab124366579"
            ]
        ]
    },
    {
        "id": "fb69eb13f1ed47f4",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "pressa4_tempPianoInf_in",
        "links": [
            "f0c13cb1504a27fd",
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "3ad89ea04c17a803",
            "ce4da829986578cc"
        ],
        "x": 2880,
        "y": 3555,
        "wires": [
            [
                "f897649ee3d4d637"
            ]
        ]
    },
    {
        "id": "7f3dc62e4cfaeb61",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "pressa4_tempPianoSup_in",
        "links": [
            "5d1ffc08cdd9417e",
            "a8390a294962caf5",
            "b4b16a9caa54f7d3",
            "a5b87c54f0bc9f52",
            "26d3214787b2439d",
            "270fa03be490aaf8"
        ],
        "x": 2815,
        "y": 3465,
        "wires": [
            [
                "9ea62a5cbd872003"
            ]
        ]
    },
    {
        "id": "db6e0934bd7af8da",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "idraulicCmd",
        "links": [
            "fdbb5739cd76ae5a",
            "c1ce42b2a2628fb7"
        ],
        "x": 2890,
        "y": 3375,
        "wires": [
            [
                "71d2de9ac37ec537"
            ]
        ]
    },
    {
        "id": "63a0a8175ccb6c22",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "pressa4_emergency_in",
        "links": [
            "061b06fe8569e1a9",
            "729dd9d4d28de4c8",
            "8930f22e16dd5e06",
            "69f525ec93329760"
        ],
        "x": 2935,
        "y": 3315,
        "wires": [
            [
                "8bbfdd96182fe6ad"
            ]
        ]
    },
    {
        "id": "c679d003b0d550aa",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "pressa4_alife_in",
        "links": [
            "baae71db9035ccf8",
            "95c354a36b435a17",
            "8dd06afceea8ebf8",
            "eb252be4f519ca75",
            "55c8b97d147f8570"
        ],
        "x": 2890,
        "y": 3270,
        "wires": [
            [
                "a364218cd9c631be"
            ]
        ]
    },
    {
        "id": "50c404e996c58b6e",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "link in 16",
        "links": [
            "b7700a2027731da3"
        ],
        "x": 2800,
        "y": 3330,
        "wires": [
            [
                "dd016cb3fc084a9f"
            ]
        ]
    },
    {
        "id": "dd016cb3fc084a9f",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2850,
        "y": 3330,
        "wires": [
            [
                "8bbfdd96182fe6ad",
                "71d2de9ac37ec537",
                "a364218cd9c631be"
            ]
        ],
        "l": false
    },
    {
        "id": "f1066a75fb521eb7",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "link in 17",
        "links": [
            "15d6f446b735362b"
        ],
        "x": 2680,
        "y": 3570,
        "wires": [
            [
                "b367f658d4008f89"
            ]
        ]
    },
    {
        "id": "b367f658d4008f89",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2775,
        "y": 3570,
        "wires": [
            [
                "f897649ee3d4d637",
                "9db1eab124366579",
                "9ea62a5cbd872003"
            ]
        ],
        "l": false
    },
    {
        "id": "9ea62a5cbd872003",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "4319550e30808765",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2980,
        "y": 3465,
        "wires": [
            [
                "979923a0e6fc7490"
            ]
        ]
    },
    {
        "id": "53fe30989a4e2dd8",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "sort data by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alife",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emergency",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idraulicCmd",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoSup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempPianoInf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressPressata",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cycleActive",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idPressa",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 2285,
        "y": 3465,
        "wires": [
            [
                "eb252be4f519ca75"
            ],
            [
                "69f525ec93329760"
            ],
            [
                "c1ce42b2a2628fb7"
            ],
            [
                "26d3214787b2439d"
            ],
            [
                "3ad89ea04c17a803"
            ],
            [
                "3e85a6139504bb70"
            ],
            [],
            [],
            [
                "5efd55ec9f94f889"
            ]
        ]
    },
    {
        "id": "f53db4bd109ccc20",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_mixedDataIn",
        "links": [
            "1c8e2807d1b49302",
            "16e2194c68ce854b",
            "258898fad92ce0cb",
            "e858a984e03cc590",
            "b4f724b9014050f9",
            "40055290bca1310c",
            "ba09a3480ecac734",
            "92a5a0ca4441d597"
        ],
        "x": 2070,
        "y": 3465,
        "wires": [
            [
                "53fe30989a4e2dd8"
            ]
        ],
        "l": true
    },
    {
        "id": "eb252be4f519ca75",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_alifeDataIn_dataIn_out",
        "mode": "link",
        "links": [
            "c679d003b0d550aa"
        ],
        "x": 2450,
        "y": 3345,
        "wires": []
    },
    {
        "id": "69f525ec93329760",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_emergency_dataIn_out",
        "mode": "link",
        "links": [
            "63a0a8175ccb6c22"
        ],
        "x": 2450,
        "y": 3375,
        "wires": []
    },
    {
        "id": "c1ce42b2a2628fb7",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_idraulicCmd_dataIn_out",
        "mode": "link",
        "links": [
            "db6e0934bd7af8da"
        ],
        "x": 2450,
        "y": 3405,
        "wires": []
    },
    {
        "id": "26d3214787b2439d",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_tempPianoSup_dataIn_out",
        "mode": "link",
        "links": [
            "7f3dc62e4cfaeb61",
            "b6c50cf9f36205b4"
        ],
        "x": 2450,
        "y": 3435,
        "wires": []
    },
    {
        "id": "3ad89ea04c17a803",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_tempPianoInf_dataIn_out",
        "mode": "link",
        "links": [
            "7f8826fefe9c0644",
            "fb69eb13f1ed47f4"
        ],
        "x": 2450,
        "y": 3465,
        "wires": []
    },
    {
        "id": "3e85a6139504bb70",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_pressPressata_dataIn_out",
        "mode": "link",
        "links": [
            "507185b6330677f8",
            "184a5768cc88bec6"
        ],
        "x": 2450,
        "y": 3495,
        "wires": []
    },
    {
        "id": "5efd55ec9f94f889",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "error",
        "func": "node.error({err:\"unknown topic in pressa4_sortData\",topic:msg.topic,msg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 2485,
        "y": 3585,
        "wires": [
            []
        ]
    },
    {
        "id": "dc331402ecbe320f",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "data inputs",
        "info": "",
        "x": 2040,
        "y": 3345,
        "wires": []
    },
    {
        "id": "115dcc4e5b9044ae",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "nota: all data inputs must use this group (read me)",
        "info": "\nall inputs should either use the mixed input \n OR the single link-outs INSIDE THIS GROUP to be properly handled and formatted\n\nfor example all inputs to gauges must also be sent to \"apply gauges config\"",
        "x": 2160,
        "y": 3375,
        "wires": []
    },
    {
        "id": "6fe7854ecacb208f",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "b1df0fb233ae57b9",
        "name": "pressa4_alifeDataIn_in",
        "links": [
            "24665e32e9b393a2",
            "6f19710f17bed7d2",
            "666043918c5da376",
            "6177200045e07c4e",
            "92df3ab13e5ca91a",
            "83681412164bda60"
        ],
        "x": 2265,
        "y": 3300,
        "wires": [
            [
                "eb252be4f519ca75",
                "d010763e4edae281"
            ]
        ],
        "l": true
    },
    {
        "id": "2032554750613969",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "sort data by press",
        "property": "press",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pressa1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 630,
        "y": 805,
        "wires": [
            [
                "48f4e0f84560c01c"
            ],
            [
                "de2490372a9afcf4"
            ],
            [
                "1adb6c93eb34ea15"
            ],
            [
                "16e2194c68ce854b"
            ],
            [
                "afa57d1c3ef490ec"
            ]
        ]
    },
    {
        "id": "e1a8c1010541c5e9",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "mixed uiPresse mixedDataIn in",
        "links": [],
        "x": 355,
        "y": 805,
        "wires": [
            [
                "2032554750613969"
            ]
        ],
        "l": true
    },
    {
        "id": "48f4e0f84560c01c",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "pressa1_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "9890c53475b90fa6"
        ],
        "x": 900,
        "y": 725,
        "wires": [],
        "l": true
    },
    {
        "id": "afa57d1c3ef490ec",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "error",
        "func": "node.error({ err: \"unknown press in mixed sort\", press: msg.press, msg: msg });\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 885,
        "wires": [
            []
        ]
    },
    {
        "id": "de2490372a9afcf4",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "pressa2_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "56377c4577552212"
        ],
        "x": 900,
        "y": 765,
        "wires": [],
        "l": true
    },
    {
        "id": "1adb6c93eb34ea15",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "pressa3_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "f0e330b3f6e390be"
        ],
        "x": 900,
        "y": 805,
        "wires": [],
        "l": true
    },
    {
        "id": "16e2194c68ce854b",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "pressa4_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "f53db4bd109ccc20"
        ],
        "x": 900,
        "y": 845,
        "wires": [],
        "l": true
    },
    {
        "id": "23908ba29a765ed4",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "89618de1371e00e8",
        "name": "sort press for data inputs",
        "info": "",
        "x": 335,
        "y": 715,
        "wires": []
    },
    {
        "id": "3a7d35a0bfec5b49",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "order": 2,
        "group": "de425a720011e6e9",
        "width": 5,
        "height": 1,
        "label": "connessione",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#fdc61e",
                "value": "warn",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "alife",
        "x": 1510,
        "y": 1645,
        "wires": []
    },
    {
        "id": "779b3f472d68db10",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "order": 5,
        "group": "de425a720011e6e9",
        "width": 5,
        "height": 1,
        "label": "emergenza attiva",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#aca0a0",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "emergenza",
        "x": 1395,
        "y": 1705,
        "wires": []
    },
    {
        "id": "102a8a782e378ec9",
        "type": "ui_led",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "order": 8,
        "group": "de425a720011e6e9",
        "width": 5,
        "height": 1,
        "label": "Comando Centralina Idraulica",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "centralina idraulica",
        "x": 1420,
        "y": 1750,
        "wires": []
    },
    {
        "id": "ab0465821b20c46b",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "",
        "group": "de425a720011e6e9",
        "order": 10,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Superiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1455,
        "y": 1840,
        "wires": []
    },
    {
        "id": "d9ec1d7d3fd6fe80",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "",
        "group": "de425a720011e6e9",
        "order": 11,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Piano Inferiore",
        "label": "units",
        "format": "{{value}} °C",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1450,
        "y": 1945,
        "wires": []
    },
    {
        "id": "d097048d7107f475",
        "type": "ui_gauge",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "",
        "group": "de425a720011e6e9",
        "order": 12,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "Pressione di Pressata",
        "label": "units",
        "format": "{{value}} Bar",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "gaugesCommonStyle",
        "x": 1430,
        "y": 2050,
        "wires": []
    },
    {
        "id": "0d5c11a801788b3f",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "UI Pressa1",
        "info": "",
        "x": 1030,
        "y": 1600,
        "wires": []
    },
    {
        "id": "0aa764285d1cf533",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1265,
        "y": 1945,
        "wires": [
            [
                "d9ec1d7d3fd6fe80"
            ]
        ]
    },
    {
        "id": "c1ec4a7757bf9a7c",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1265,
        "y": 2050,
        "wires": [
            [
                "d097048d7107f475"
            ]
        ]
    },
    {
        "id": "6ea5b0e752187a11",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "pressa1_pressPressata_in",
        "links": [
            "9442f133234af130",
            "befaf23b1030e6fb",
            "66718c199b5afcf6",
            "9666105965a489b2",
            "198980510e71b358"
        ],
        "x": 1090,
        "y": 2050,
        "wires": [
            [
                "c1ec4a7757bf9a7c"
            ]
        ]
    },
    {
        "id": "c2fd121fa884180a",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "pressa1_tempPianoInf_in",
        "links": [
            "d9707a1ddd27e51f",
            "799a85aff84a128e",
            "f1cca6c166a06563",
            "a1989466336feb77",
            "ceec0c55061a2fd4",
            "ce4da829986578cc"
        ],
        "x": 1155,
        "y": 1930,
        "wires": [
            [
                "0aa764285d1cf533"
            ]
        ]
    },
    {
        "id": "eaf1e8f7876a0705",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "pressa1_tempPianoSup_in",
        "links": [
            "6f3718697fcc12eb",
            "a8390a294962caf5",
            "b4b16a9caa54f7d3",
            "a5b87c54f0bc9f52",
            "0c1159e674965540",
            "270fa03be490aaf8"
        ],
        "x": 1090,
        "y": 1840,
        "wires": [
            [
                "9177fda6dbdb7382"
            ]
        ]
    },
    {
        "id": "226ddfe740d17c77",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "idraulicCmd",
        "links": [
            "fdbb5739cd76ae5a",
            "7e8e0c5575861e5a"
        ],
        "x": 1165,
        "y": 1750,
        "wires": [
            [
                "102a8a782e378ec9"
            ]
        ]
    },
    {
        "id": "a3a97f1cf85d0347",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "pressa1_emergency_in",
        "links": [
            "061b06fe8569e1a9",
            "729dd9d4d28de4c8",
            "8930f22e16dd5e06",
            "0dd9833c9af4a1b1"
        ],
        "x": 1210,
        "y": 1690,
        "wires": [
            [
                "779b3f472d68db10"
            ]
        ]
    },
    {
        "id": "335b885cb4328c74",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "pressa1_alife_in",
        "links": [
            "b04dae3690891cd4"
        ],
        "x": 1165,
        "y": 1625,
        "wires": [
            [
                "9e5f19ba303d1e7f"
            ]
        ]
    },
    {
        "id": "a318163988c8404a",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "link in 16",
        "links": [
            "b7700a2027731da3"
        ],
        "x": 1075,
        "y": 1705,
        "wires": [
            [
                "6ce016b7a2323a01"
            ]
        ]
    },
    {
        "id": "6ce016b7a2323a01",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1125,
        "y": 1705,
        "wires": [
            [
                "779b3f472d68db10",
                "102a8a782e378ec9"
            ]
        ],
        "l": false
    },
    {
        "id": "d5d16f84ccc736a2",
        "type": "link in",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "link in 17",
        "links": [
            "15d6f446b735362b"
        ],
        "x": 955,
        "y": 1945,
        "wires": [
            [
                "24041115ac09d2d9"
            ]
        ]
    },
    {
        "id": "24041115ac09d2d9",
        "type": "switch",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 1945,
        "wires": [
            [
                "0aa764285d1cf533",
                "c1ec4a7757bf9a7c",
                "9177fda6dbdb7382"
            ]
        ],
        "l": false
    },
    {
        "id": "9177fda6dbdb7382",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "format",
        "func": "msg.payload = msg.payload.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1255,
        "y": 1840,
        "wires": [
            [
                "ab0465821b20c46b"
            ]
        ]
    },
    {
        "id": "9e5f19ba303d1e7f",
        "type": "trigger",
        "z": "2831664434f14a33",
        "g": "5bc8af56489bcd9d",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1300,
        "y": 1625,
        "wires": [
            []
        ]
    },
    {
        "id": "5c169683e0be423b",
        "type": "catch",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "catchAll",
        "scope": null,
        "uncaught": true,
        "x": 490,
        "y": 105,
        "wires": [
            [
                "3b516af17cb05a18"
            ]
        ]
    },
    {
        "id": "da6f9a7c33d7d7bb",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "set global utils",
        "func": "//look into start tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let thisClassName = \"utils\";\nlet def = {\n    \"errorBlink\": function (node, last = 1500, text = \"\") {\n        node.status({ fill: \"red\", text: text });\n        setTimeout(() => {\n            node.status({ fill: \"\", text: text });\n        }, 250);\n        setTimeout(() => {\n            node.status({ fill: \"yellow\", text: text });\n        }, 350);\n        setTimeout(() => {\n            node.status({ fill: \"\", text: text });\n        }, last)\n    },\n\n    \"##litEndian2int\": function (a, b) {\n        return a << 16 | b;\n    }, //msg.payload[0] << 16) | msg.payload[1]\n\n    \"isObject\"(v) {\n        return (typeof (v) == \"object\" && !Array.isArray(v) && v !== null)\n    },\n    /**\n     * converts a binary array to a single number\n     */\n    \"bitArrayToInt\"(arr) {\n        var res = 0;\n        for (let i = 0, minLen = Math.min(arr.length, 8 * 8); i < minLen; i++) {\n            if (arr[i])\n                res += Math.pow(2, i);\n        }\n        return res;\n    },\n\n    /** @summary capitalize the first character of a given string\n        * @param {string} word \n        * @return {string} new processed string\n        */\n    \"firstCharUp\"(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    },\n\n    /**\n    * @summary recursively merge two Objects\n        * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n        * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n        * - -res.a===main.a\n        * - -res.c===sec.c\n        * - -res.b!==sec.b2\n        * @param {Object} main \n        * @param {Object} sec \n        */\n    \"mergeRec\": function thisFun(main, sec) {\n        for (let p in sec) {\n            //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n            //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n            //main[p] = sec[p];\n            if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                thisFun(main[p], sec[p]);\n            else\n                main[p] = sec[p];\n        }\n        return main;\n    }.bind(this),\n\n    /** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\n    \"callWhenDef\": function callWhenDef(cb, opts, ...varNames) {\n        //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n        if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n            var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n        //check for opts presence\n        if (typeof (opts) == \"string\")\n            varNames.push(opts);\n        let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n        var tout, intv, tmp;\n        //switch context to the one specified in ctx\n        var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n        //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n        //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n        let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n        //try immediately, before doing any work\n        if (varNames.every(name => store.get(name) !== undefined))\n            return wrappedCb()\n        //set timeout unless false or not specified\n        if (timeout) {\n            tout = setTimeout(() => {\n                clearInterval(intv);\n                errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n            }, timeout);\n        }\n        //set store-checking interval\n        intv = setInterval(() => {\n            if (!varNames.every(name => store.get(name) !== undefined))\n                return\n            clearTimeout(tout);\n            clearInterval(intv);\n            wrappedCb();\n        }, retryDelay)\n    },\n    /** pseudo random string generator\n     */\n    \"randomHexString4\": function () {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); //1.X * 2^16 toString(radix) clipFirst //== 4 characters hex\n    },\n    /** returns an iterator-maker that uses the keys in orderedKeys to access its parent's properties\n         * @param {string[]} orderedKeys\n         * @returns {function} f() -> iterator object.\n         */\n    \"makeKeyIterator\": function (orderedKeys) {\n        return function () {\n            //console.log(\"2# this\",this); this === parent object\n            let keys = orderedKeys, idx = 0;\n            return {\n                next: () => {\n                    //console.log(this, idx, orderedKeys);\n                    return (idx < keys.length ? { value: this[keys[idx++]], done: false } : { done: true });\n                }\n            }\n        }\n    },\n    /** attach a general iterator going through all the enumerable obj's key.\n        * -Not very memory-performant as a redundant key[] array is stored\n        * @param {object} the object to which attach the iterator\n        * @returns {function} the attached iterator\n        */\n    \"generateIteratorFor\": function (obj) {\n        obj[Symbol.iterator] = this.makeKeyIterator(Object.keys(obj));\n        return obj[Symbol.iterator];\n    },\n    \"errorLog\"(...param) { return this.logError(...param); },\n    \"logError\": function thisFun(nodeRef, err) {\n        if (arguments.length != thisFun.length) throw new SyntaxError(`expected ${thisFun.length} arguments, got ${arguments.length}`);\n        var error = (typeof (err) == \"string\" ? { err: err } : err);\n        nodeRef.error(error);\n    },\n\n    /** the first time the property is accessed the value is calculated calling valueGetter() in obj, and the result is stored in propName_cache.\n        * - Subsequent calls will return propName_cache's value.\n        */\n    \"defineCachedProp\": function defineCachedProp(obj, propName, valueGetter) {\n        if (arguments.length != 3) throw new SyntaxError(\"defineCachedGetter() arguments mismatch\");\n        const propName_cache = propName + \"_cache\";\n\n        Object.defineProperty(obj, propName_cache, { value: undefined, writable: true, configurable: true }); //not enumerable\n        Object.defineProperty(obj, propName, {\n            get() {\n                return this[propName_cache] ?? (this[propName_cache] = valueGetter.call(this, this))\n            },\n            set(v) { this[propName_cache] = v },\n            enumerable: true,\n            configurable: true\n        })\n    },\n    \"removeIdx\": (arr, i) => (i == arr.length - 1) ? arr.pop() : arr[i] = arr.pop(),\n    \"removeAllOccurrences\": function (arr, val) {\n        for (let i = 0; i < arr.length; i++)\n            if (arr[i] == val)\n                (i == arr.length - 1) ? arr.pop() : arr[i] = arr.pop();\n    },\n\n    \"clone\": function (obj) {\n        return JSON.parse(global.get(thisClassName).safeStringify(obj));\n    },\n\n    \"safeStringify\": function safeStringify(obj, indent) {\n        var cache = [];\n        var cacheKeys = [];\n        return JSON.stringify(obj, (key, value) => {\n            if (typeof value === 'object' && value !== null) { //arrays and null are also \"objects\" //functions are too, but typeof returns \"function\" instead\n                //Duplicate reference found -> discard key / store\n                const idx = cache.indexOf(value)\n                //if duplicate found\n                //return twin's key instead\n                if (idx != -1) //-1 means not present\n                    return \"dupOf_\" + (cacheKeys[idx].toString() ?? \"root\");\n                //else store it\n                else {\n                    cache.push(value);\n                    cacheKeys.push(key);\n                }\n            }\n            return value;\n        }, indent);\n    },\n    /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n         * @param {any} value accepts anything\n         * @returns {boolean}\n         *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n         */\n    \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n        return !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n            // it has a prototype that's also truthy\n            !!(value = Object.getPrototypeOf(value)) &&\n            // which has `null` as parent prototype\n            !Object.getPrototypeOf(value);\n    },\n    /** recursively looks up a target object enumerable childrens for properties that would need to be restored after a JSON conversion.\n         * @returns a mask of the original Object containing only the (restored) properties to restore.\n         */\n    \"toRestoreOf\": function toRestoreOf(origin) {\n        //let isPlainObj = global.get(thisClassName).isPlainObj;\n        let needsRecursion = (prop, target) => this.isPlainObj(target?.[prop]) //target is an object and target.prop is an object too\n        let needsRestoration = (prop, target) => {\n            return typeof (target[prop]) === \"function\"// && !node.warn(\"restored \"+prop+\":\"+typeof(target[prop]))\n        }\n        let empty = true; //optimize performance, avoiding recursive Object.keys calls\n        var toRes = {};\n        if (this.isPlainObj(origin))\n            Object.keys(origin).forEach(key => { //#TODO extend to non-enumerables\n                if (origin.toRestore)\n                    toRes[key] = origin.toRestore(origin[key])\n                else if (needsRecursion(key, origin)) {\n                    let tmp = toRestoreOf.call(this, origin[key]);\n                    if (tmp !== null)\n                        toRes[key] = tmp;\n                    // if(Object.keys(toRes[key]).length==0)\n                    //     delete toRes[key];\n                }\n                else if (needsRestoration(key, origin)) { //if is function\n                    toRes[key] = origin[key]\n                } else {\n                    //skip\n                }\n                if (toRes[key])\n                    empty = false;\n                //toRes[key] && node.warn(key+\" set\")\n            })\n        //return Object.keys(target).filter( key => needsRestoration(key, target))\n\n        return empty ? null : toRes;\n    },\n    /** pseudo alias of Object.assign\n        * only ADDS props and keeps the original refs for plain objects.\n        * ex.               {a:4, b:{a1:5, b1:6}},              //target\n        *                        {b:{      b1:\"v\", c1:7}, c:8}  //source\n        *   assign     ->   {a:4, b:{      b1:\"v\", c1:7}, c:8}  //b is a reference to source.b //a1 was lost\n        *   recAssign  ->   {a:4, b:{a1:5, b1:\"v\", c1:7}, c:8}  \n        */\n    \"recAssign\": function recAssign(target, source) {\n        for (let k in source)\n            target[k] = (this.isPlainObj(source[k]) ? recAssign.call(this, target[k] ?? {}, source[k]) : source[k])\n        return target;\n    },\n    /** \n        * \n        */\n    \"inflate\": function (target, source) {\n        let mask = this.toRestoreOf(source) ?? {};\n        return this.recAssign(target, mask);\n    },\n\n    // \"genericInflater\":function inflated(target, origin=this){ //assume target is a mask of origin, meaning origin has AT LEAST all props of target.\n    //     let utils=global.get(thisClassName);\n    //     let hasOwnInflater = targ => targ?.inflated\n    //     let restore = (prop, target, origin) => {\n    //         var tmp;\n    //         if(!(tmp=Object.getOwnPropertyDescriptor(origin, prop).enumerable))\n    //             Object.defineProperty(target,prop,tmp)\n    //         else if(typeof origin[prop]==\"function\")\n    //             target[prop] = origin[prop]\n    //         return target[prop];\n    //     }\n    //     //CHOOSE AN APPROACH: init all missing target vals\n    //     //target can be anything, origin is an object\n    //     //parse origin for all keys that need to be restored on a version of themselves that went throug a JSON.stringify(JSON.parse())\n    //         //set those keys using either an inflater defined by the key or a generic one. Feed the original value to the inflater, or undefined.\n    //     //returns an inflated version of target\n\n    //     let allKeysOf = obj => Object.keys(obj);\n    //     if(utils.isPlainObj(origin))\n    //         for(let k of allKeysOf(origin))\n    //             inflatedTarget[k] = inflated(target?.[k], origin[k])\n\n\n    //     //if is inflatable\n    //     var inflatedTarget={};\n    //     if(utils.isPlainObj(origin)){\n    //         //inflate all keys //#TODO include non-enumerables\n    //         for(let k of origin)\n    //             //use own inflation method //responsible for that key and all its children\n    //             if(hasOwnInflater(origin[k]))\n    //                 inflatedTarget[k] = origin[k].inflated(target?.[k]);\n    //             //recurse\n    //             else if(utils.isPlainObj(origin[k]))\n    //                 inflatedTarget[k] = inflated(target?.[k], origin[k])\n    //             //generic restoration //mutates target[k] if necessary, then returns it\n    //             else\n    //                 inflatedTarget[k] = target?.[k]!==undefined ? restore(k, target, origin)\n    //     }\n    //     else\n    //         return inflatedTarget;\n    // },\n    // /** recursively traverse object children calling the inflate/inflater method on all of them\n    //      * the method is supposed to restore all the properties that would not survive a JSON.parse(JSON.stringify()).\n    //      * restoring a class from its json, or restoring non enumerable properties and functions, for example.\n    //      * NOTE: a parent that implements \"inflate\" or \"inflater\" is responsible for all its children restoration, and \n    //      *       should therefore call the genericInflater() on all properties it chooses to not explicitly handle\n    //      */\n    // \"inflate\"(target){ return global.get(thisClassName).genericInflater.call(this, target) },\n    // \"ggenericInflater\":function inflate(target){\n    //     //looks for and calls inflate() methods for all keys\n    //         //recursing over objects\n    //     for(let k in target){\n    //         //if has inflate method\n    //         if(this && typeof(this[k])==\"object\" && this[k].inflate)\n    //             target[k] = this[k].inflate(target[k]);\n    //         else    //else recurse over object props\n    //             if(typeof(target[k])==\"object\" && this && typeof(this[k])==\"object\")\n    //                 inflate.call(this[k], target[k])\n    //     }\n    //     return target;\n    // },\n\n\n    /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n     *      skip non-function, assign wrapped to their original key\n     *  @param root {Object} the object to parse for functions\n     *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n    \"wrapFunctions\": function wrapFunctions(root, prefix) {\n        prefix ?? node.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n        const isPlainObj = this.isPlainObj;\n        //recursively parse root\n        //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n        let desc;\n        for (let k in root) {\n            if (isPlainObj(root[k]))\n                root[k] = wrapFunctions.call(this, root[k], prefix + `.${k}`);\n            else if (//is a simple function, or an arrow function\n                //value of root[k] has type function\n                typeof (root[k]) == \"function\"\n                //root[k] itself is a function, not the result of it's getter call\n                && (desc = Object.getOwnPropertyDescriptor(root, k)).value !== undefined    // @ts-ignore\n                && !desc.get\n            ) {\n                //wrap in an exception catching function\n                //trace errors back to their source, independently of the caller\n                let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                root[k] = function (...args) {\n                    try {\n                        return cb.call(this, ...args)\n                    } catch (e) {\n                        e.nrStack = (e.nrStack ?? []);\n                        e.nrStack.push({ summ: `at ${k}(${args.join(\", \")}) of ${prefix}`, fName: k, args: args, root: prefix, err: e.message, e: e });\n                        e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                        //node.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                        throw e;\n                    }\n                }\n            }\n        }\n        return root;\n    },\n    \"sortByType\": function sortByType(source, ...types) {\n\n        if (!Array.isArray(source))\n            if (typeof (source) == \"object\") { //assume it's an argument object\n                try {\n                    let tmp = [];\n                    for (var arg of source)\n                        tmp.push(arg);\n                    source = tmp;\n                } catch {\n                    return node.error({ txt: \"global.\" + thisClassName + \".sortByType(): source is not an array\", source: source, args: arguments });\n                }\n            }\n            else\n                return node.error({ txt: \"global.\" + thisClassName + \".sortByType(): source is not an array\", source: source, args: arguments });\n        if (source.length !== types?.length)\n            return node.error({ txt: \"global.\" + thisClassName + \".sortByType(): source lenght doesn't match types[]'s\", source: source, types: types, args: arguments });\n\n        const typedPairs = source.map(item => new Object({ val: item, type: typeof (item) }));\n        let findType = (type) => typedPairs.find(pair => pair.type == type) ?? node.warn({ txt: \"missing param typed \" + type });\n\n        var errors;\n        var ret = [];\n        for (var type of types) {\n            let idx = typedPairs.findIndex(pair => pair.type == type);\n            if (idx < 0) {\n                errors ?? (errors = []);\n                errors.push(type);\n                ret.push(null);\n            }\n            else {\n                ret.push(typedPairs[idx]);\n            }\n        }\n        if (errors)\n            node.error({ txt: `global.${thisClassName}.${sortByType.name}(): missing param typed ${errors.length > 1 ? `[${errors}]` : errors[0]}`, args: arguments });\n        return ret;\n    },\n    /**\n     * non implementato * /\n    \"logToFile\": () => { },\n    /**\n     * insieme a dbgLevelsMap rappresenta un enum di livelli di debug */\n    \"dbgLevels\": [\"error\",\"warning\", \"debug\", \"verbose\"],\n    //\"dbgLevelsMap\": generated below\n    /*v da testare v* /\n    /**\n     * Stampa un messaggio, con strategie diverse a seconda del tipo e del debugLevel globale.  \n     * Tutti i log dovrebbero passare di qui.  \n     * Gli argomenti vengono riordinati automaticamente. dbgPrint({extra:5},\"messaggio\"), dbgPrint(\"verbose\", \"something happened\") sono tutte chiamate legali\n     * \n     * @param _txt testo messaggio\n     * @param _infoObj campi extra da allegare, oltre a quelli automatici. In caso di clash vince infoObj.\n     * @param _level tipologia messaggio. accetta sia interi che stringhe. gli interi mappano utils.dbgLevels * /\n    \"dbgPrint\": function dbgPrint(_txt, _infoObj, _level) {\n        const utils = global.get(thisClassName);\n        const dbgLevelsMap = utils.dbgLevelsMap;\n\n        //compile-like check: all expected level ids exist\n        utils.assert([\"warning\", \"error\", \"debug\", \"verbose\"].every(key => (utils?.dbgLevelsMap?.[key] ?? null) !== null), \"dpgPrint(): missing one or more expected dbg level\", { exp: [\"warning\", \"error\", \"debug\", \"verbose\"], got: dbgLevelsMap });\n        \n        node.warn({txt:\"args pre sort\",args:{txt:_txt,level:_level,infoObj:_infoObj}})\n\n        //sort arguments, filling them with def vals when necessary\n        let argArray = [_level, _txt, _infoObj];\n        var typedPairs = argArray.map(item => new Object({ val: item, type: typeof (item) }));\n        \n        //pops a value from typedPairs, or returns defVal if nothing matches\n        let popValOfType = (type, defVal) => {\n            var idx = typedPairs.findIndex(pair => pair.type == type);\n            if (idx >= 0) {\n                var val = typedPairs[idx].val;\n                utils.removeIdx(typedPairs, idx);\n                return val;\n            }\n            else\n                return defVal;\n        }\n        var txt = popValOfType(\"string\",\"noTxt\");\n        var level = popValOfType(\"number\", null) ?? popValOfType(\"string\", null) ?? dbgLevelsMap[\"debug\"];\n        var infoObj = popValOfType(\"object\", {});\n\n        if(typeof level == \"string\"){\n            //sort txt and type, as they are both strings\n            let validLiterals = [\"warning\", \"warn\", \"error\", \"err\", \"debug\", \"dbg\", \"console\", \"stdout\"];\n            if (txt.length <= 7 && level.length > 7\n                || validLiterals.includes(txt))\n                [level, txt] = [txt, level];\n            //convert to numeric id\n            switch (level) {\n                case \"warning\":\n                case \"warn\":\n                    level = dbgLevelsMap[\"warning\"];\n                    break;\n                case \"error\":\n                case \"err\":\n                    level = dbgLevelsMap[\"error\"];\n                    break;\n                case \"debug\":\n                case \"dbg\":\n                    level = dbgLevelsMap[\"debug\"];\n                    break;\n                case \"verbose\":\n                case \"verb\":\n                    level = dbgLevelsMap[\"verbose\"];\n                    break;\n                default:\n                    node.error(\"error\", \"unknown log level: \" + level);//, { valid: validLiterals, got: level, args: arguments });\n                    break;\n            }\n        }\n\n        node.warn({ txt: \"args post sort\", args: { txt: txt, level: level, infoObj: infoObj } });\n\n        //define log vars\n        if (true || level <= global.get(\"dbgLevel\")){\n            //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n            var fName;\n            try { fName = dbgPrint.caller; } catch { fName = \"unreadable\" }\n            var nodeJsStack;\n            try { nodeJsStack = new Error().stack } catch { nodeJsStack = \"unreadable\" }\n            //default logging strategy\n            let defEditorLog = (logger) => logger.call(this,\n                utils.mergeRec({\n                    txt: txt,\n                    n: this.node.name,\n                    auto: {\n                        f: fName,\n                        id: this.node.id,\n                        _this: this,\n                        nodeJsStack: nodeJsStack\n                    }\n                }, infoObj));\n            node.warn({ txt: \"context\", ctx: [Object.getOwnPropertyNames(dbgPrint.caller).map(name => name + \":\" + dbgPrint.caller[name]), Object.getOwnPropertyNames(arguments.callee).map(name => name + \":\" + arguments.callee[name])]});\n            //pick logging strategy\n            switch (level) {\n                case dbgLevelsMap[\"warning\"]:\n                    defEditorLog(this.warn);\n                    break;\n                case dbgLevelsMap[\"error\"]:\n                    defEditorLog(this.warn);\n                    break;\n                case dbgLevelsMap[\"debug\"]:\n                    defEditorLog(this.warn);\n                    break;\n                case dbgLevelsMap[\"verbose\"]:\n                    defEditorLog(this.warn);\n                    break;\n                default:\n                    node.error(\"unknown log level \" + level);\n                    break;\n            }\n        }\n\n    },\n\n    \"assert\": function assert(isOk, cb = \"assertion failed\", infoObj = {}) {\n        if (!global.get(\"isDbgMode\"))\n            return true;\n        if (typeof (isOk) == \"function\")\n            isOk = isOk();\n        if (!isOk)\n            if (typeof (cb) == \"function\")\n                // @ts-ignore\n                cb();\n            else\n                node.error(global.get(thisClassName).mergeRec({txt:cb},infoObj));\n                //global.get(thisClassName).dbgPrint(\"error\", cb, infoObj);\n        return isOk\n    },\n\n\n    \"pushGlobalClassInfo\": function pushGlobalClass(_class, name = null) {\n        if (global.get(\"isDbgMode\")) {\n            const utils = global.get(thisClassName);\n\n            name ?? _class.name;\n            utils.assert(typeof (_class) == \"function\", \"arg for class \" + name + \" is not a class\", { _class: _class });\n            utils.assert(typeof (name) == \"string\", \"type mismatch for arg 'name'. expected string, got \" + typeof (name));\n\n            if (!global.get(\"classesCheatSheet\"))\n                global.set(\"classesCheatSheet\", {});\n\n            let cs = global.get(\"classesCheatSheet\");\n            var methods = {};\n            var props = {};\n            for (var propName of Object.getOwnPropertyNames(_class)) {\n                if (typeof (_class[propName] == \"function\"))\n                    methods[propName] = Object.getOwnPropertyDescriptor(_class, propName);\n                else\n                    props[propName] = Object.getOwnPropertyDescriptor(_class, propName);\n            }\n            cs[name] = {\n                \"name\": _class.name,\n                \"methods\": methods,\n                \"props\": props\n            }\n        }\n    }\n    /*^ da testare ^*/\n};\n\ndef.dbgLevelsMap = (() => { var tmp = {}; def.dbgLevels.forEach((name, i) => tmp[name] = i); return tmp; })()\n\n\n\n\ndef.wrapFunctions(def, \"[\" + thisClassName + \"]\");\nglobal.set(thisClassName, def);\nnode.send(def);\nnode.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "02531d3dbb4a7cfa",
                "dca0193f9acb2785"
            ]
        ]
    },
    {
        "id": "3b516af17cb05a18",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "catchAll",
        "func": "if(msg.error){\n    node.error({\"err\":msg.error.message,\"src\":msg.error.source.id,\"n\":msg.error.source.name,\"nrStack\":msg._error?.nrStack,\"full\":msg});\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 635,
        "y": 105,
        "wires": [
            []
        ]
    },
    {
        "id": "0b18ce3fa23e0ba6",
        "type": "comment",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "GLOBALI",
        "info": "",
        "x": 345,
        "y": 105,
        "wires": []
    },
    {
        "id": "02531d3dbb4a7cfa",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "def List class as global & utils.list",
        "func": "let utils = msg;\nvar isObject = utils.isObject;\n\n\n/* javascript class cheatsheet\n    //everything is public.\n        #varname == private\n        *method() == private\n        get varname()/get varname:f() = getter for varname\n    //; at each line's end */\nclass List {\n    head;\n    //#lastPrev;\n    //get last(){ return (this.#lastPrev ? this.#lastPrev.next : this.head) }\n    last;\n\n    constructor() {\n        this.head = null;\n        this.last = this.head;\n    }\n\n    static isListNode(val){\n        return (isObject(val) && Object.hasOwnProperty(\"next\"))\n    }\n    static isTwoWayListNode(val){\n        return (List.isListNode(val) && Object.hasOwnProperty(\"prev\"));\n    }\n\n    peekFirst() {\n        return (this.head ? this.head.value : null);\n    }\n\n    popFirst() {\n        let res = this.peekFirst();\n        //remove\n        if (this.head && this.head.next)\n            this.head = this.head.next;\n        return res;\n    }\n\n    peekLast() {\n        return (this.last ? this.last.value : null);\n    }\n\n    popLast() {\n        if (!this.head)\n            return null;\n\n        let res = this.peekLast();\n\n        let n = this.head,\n            n2last = null; //'next-to-last' <=> 'penultimate'\n        while (n.next) {\n            n2last = n;\n            n = n.next;\n        }\n        n2last.next = null;\n        this.last = n2last;\n\n        return res;\n    }\n\n    /** creates a one-way list node with value=val */\n    static newNode(val) {\n        return { value: val, next: null }\n    }\n    /** creates a two-way list node with value=val and empty prev */\n    static newTwoWayNode(val) {\n        return { value: val, prev: null, next: null }\n    }\n    /** creates a two-way list node with value=val and empty prev */\n    static _append(el, listHead){\n        if (listHead) {\n            let node = listHead;\n            while (node.next) {\n                node = node.next;\n            }\n            node.next = (List.isListNode(el) ? el : List.newNode(el))\n            return node.next;\n        }\n        else {\n            return (List.isListNode(el) ? el : List.newNode(el));\n        }\n    }\n    append(el) { List._append(el, this.head) }\n\n    static _appendTwoWay(el, listHead) {\n        if (List.isTwoWayListNode(el))\n            List._append(el, listHead)\n        else\n            List._append(List.newTwoWayNode(el), listHead);\n    }\n\n\n    static _prepend(el, listHead){\n        let newHead  = (List.isListNode(el) ? el : List.newNode(el))\n        newHead.next = listHead;\n        return newHead;\n    }\n    prepend(el) {\n        this.head = List._prepend(el, this.head)\n    }\n\n    static _prependTwoWay(el,listHead){\n        let newHead = List._prepend(el, listHead);\n        if(listHead)\n            listHead.prev = newHead;\n        return newHead;\n    }\n\n    static iterator(listHead) {\n        return {\n            last: listHead,\n            next() {\n                if (this.last === null)\n                    return { done: true }\n                else {\n                    let ret = { value: this.last.value, done: false }\n                    this.last = this.last.next;\n                }\n            },\n            return(){} //optional, do cleanup routine (close db connection and such)\n        }\n    }\n\n    *[Symbol.iterator](){\n        return List.iterator(this.head);\n    }\n\n    toArray(){\n        var ret = [];\n        for(let val of this.head)\n            ret.push(val)\n        return ret;\n    }\n\n    toString(){\n        return this.toArray.toString();\n    }\n\n    values(){\n        return this.toArray();\n    }\n\n}\n\nconst twoWayListClass = class TwoWayList extends List {\n    //head\n    //last\n    constructor(){\n        super();\n    }\n\n    popLast(){\n        if(!this.head)\n            return null;\n        //pop\n        let ret = this.last ? this.last.value : null;\n        this.last = this.last.prev;\n        //pop() on \"lenght == 1\" => last===head===null -> skip\n        if(this.last)\n            this.last.next=null;\n        return ret;\n    }\n\n    static _prepend(...args){List._prependTwoWay.apply(null,args)};\n    prepend(el){\n       this.head = List._prependTwoWay(el);\n    }\n\n    static iterator(listHead){\n        let oneWay = List.iterator(listHead);\n        oneWay.prev = (function () {\n            if (this.last === null)\n                return { done: true }\n            else {\n                // @ts-ignore\n                let ret = { value: this.last.prev.value, done: false }\n                // @ts-ignore\n                this.last = this.last.prev;\n            }\n        }).bind(oneWay)\n        return oneWay;\n    }\n\n    inverseIterator(){\n        let it = TwoWayList.iterator(this.last);\n        [it.next, it.prev] = [it.prev, it.next];\n        return it;\n    }\n\n\n    \n}\n\nglobal.set(\"List\", List.prototype);\nglobal.set(\"TwoWayList\", twoWayListClass);\nglobal.set(\"List_list\", Object.getOwnPropertyNames(List));\n\nutils.List = List; global.set(\"utils\", utils);\n\nutils[\"pushGlobalClass\"] = function pushGlobalClass(_class, name){\n    \n}\n\n\n/* TypeError    \nnode.status({\n    fill: \"green\",\n    text: Object.keys(\n        utils.mergeRec(\n            new List(),\n            new twoWayListClass()\n        )\n    ).join(' & ')\n});\n/**/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 635,
        "y": 225,
        "wires": [
            []
        ]
    },
    {
        "id": "dca0193f9acb2785",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "utils isDefinedEvent",
        "mode": "link",
        "links": [
            "3502536b287b497d",
            "e60ddb3d97dea1f3"
        ],
        "x": 630,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "984edf458e7e0e43",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "allMain isDefinedEvent",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/** alternative to using link-nodes on libraries (which requires a ton of overhead and structures)\n * \n*/\nfunction callWhenDef(cb, ...globalNames) {\n    for (let name of globalNames)\n        if (global.get(name) === undefined || global.get(name) === null) {\n            setTimeout(callWhenDef, 300, cb, ...globalNames)\n            return\n        }\n    cb();\n}\n\nconst tout = setTimeout(()=>{\n    node.error(node.name+\" timeout. check node \"+node.id+\" for typos\")\n}, 10000)\ncallWhenDef(function () {\n   node.send({topic:\"isDefinedEvent\", payload:\"allMain\"})\n   clearTimeout(tout);\n}, \"utils\"/*,\"towersControl\",\"towersBitArray\",\"signalCells\"*/)",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 135,
        "wires": [
            [
                "003fe15518af93a5"
            ]
        ]
    },
    {
        "id": "003fe15518af93a5",
        "type": "link out",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "allMain isDefinedEvent out",
        "mode": "link",
        "links": [
            "685e7e2495833654",
            "cc9d5b0b240172ae",
            "8a7b266f172db654",
            "41052036e4260285",
            "5fe604351ee66213",
            "eb51da252c184f8b",
            "ee47774db553980b",
            "2585275db935f830",
            "a92151a1a1d8a360",
            "fb72aaf30f378de5",
            "53f5b685a1ec4809",
            "807fcc0a56e37f7a"
        ],
        "x": 785,
        "y": 135,
        "wires": [],
        "l": true
    },
    {
        "id": "685e7e2495833654",
        "type": "link in",
        "z": "2831664434f14a33",
        "d": true,
        "g": "b7be1fbf76a073e2",
        "name": "allMain isDefinedEvent out",
        "links": [
            "003fe15518af93a5"
        ],
        "x": 890,
        "y": 105,
        "wires": [
            []
        ]
    },
    {
        "id": "dd90145cd4293ec4",
        "type": "function",
        "z": "2831664434f14a33",
        "g": "b7be1fbf76a073e2",
        "name": "set global dbgStuff",
        "func": "//look in onStart",
        "outputs": 1,
        "noerr": 0,
        "initialize": "callWhenDef(\"utils\", () => {\n    const utils = global.get(\"utils\");\n    let lvlName = \"verbose\"\n    let lvl = utils.dbgLevelsMap[lvlName] ?? node.error(\"undefined dbgLevel: \" + lvlName) ?? 0\n    let isDbgMode = true;\n    global.set(\"dbgLevel\", lvl);\n    global.set(\"isDbgMode\", isDbgMode);\n\n    node.status({ fill: isDbgMode ? \"green\" : \"gray\", text: `isDbgMode: ${isDbgMode.toString().toUpperCase()} | level: ${utils.dbgLevels[lvl].toUpperCase()}` });\n})\n\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "8ccf2a30f6795b42",
        "type": "ui_chart",
        "z": "36ca49c2bbce1ae5",
        "name": "",
        "group": "57ea1d8425ab2254",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 410,
        "y": 225,
        "wires": [
            []
        ]
    },
    {
        "id": "c309c3ce8e145478",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "send completedTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completedTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 1695,
        "wires": [
            [
                "f17c0cf3a34f7116"
            ]
        ]
    },
    {
        "id": "db96dc0c6dbe7244",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "completedJsonUpdate in",
        "links": [
            "4bbe87c68c5eee68",
            "0f442f62dc9f61be"
        ],
        "x": 240,
        "y": 1695,
        "wires": [
            [
                "c309c3ce8e145478"
            ]
        ]
    },
    {
        "id": "f17c0cf3a34f7116",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 610,
        "y": 1680,
        "wires": [
            [
                "511afb106e173130"
            ]
        ]
    },
    {
        "id": "2dd33717ef5a3b58",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "triggerCompletedJsonUpdate_in",
        "links": [
            "5bebd7ba13d78561"
        ],
        "x": 240,
        "y": 1665,
        "wires": [
            [
                "88cd5d005aff3219"
            ]
        ]
    },
    {
        "id": "511afb106e173130",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 710,
        "y": 1680,
        "wires": [
            [
                "08b368484118e203"
            ]
        ],
        "l": false
    },
    {
        "id": "08b368484118e203",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 845,
        "y": 1680,
        "wires": [
            [
                "90168b3986aea043"
            ]
        ],
        "l": false
    },
    {
        "id": "90168b3986aea043",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "",
        "filename": ".\\orders\\completed.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 1680,
        "wires": [
            [
                "f3dcda45cbe40ac0"
            ]
        ]
    },
    {
        "id": "f3dcda45cbe40ac0",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "written completed.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1680,
        "wires": []
    },
    {
        "id": "189a3eca588f92de",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "forceCompletedJsonUpdate in",
        "links": [
            "1b6fb1593a697369",
            "1ff2b9c7e81f175d",
            "513dc6bfb2e965e7",
            "77ed67b82e2a4816"
        ],
        "x": 355,
        "y": 1740,
        "wires": [
            [
                "0299f7d430301eb2"
            ]
        ],
        "l": true
    },
    {
        "id": "0299f7d430301eb2",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "send completedTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completedTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 625,
        "y": 1740,
        "wires": [
            [
                "f17c0cf3a34f7116",
                "08b368484118e203"
            ]
        ]
    },
    {
        "id": "88cd5d005aff3219",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 1665,
        "wires": [
            [
                "f17c0cf3a34f7116"
            ]
        ]
    },
    {
        "id": "a692f16371e4c1bb",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "send historyTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "historyTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 1485,
        "wires": [
            [
                "230325d8fabed91c"
            ]
        ]
    },
    {
        "id": "a614abde4e2ab03e",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "historyJsonUpdate in",
        "links": [
            "892a21e16fd8d586"
        ],
        "x": 240,
        "y": 1485,
        "wires": [
            [
                "a692f16371e4c1bb"
            ]
        ]
    },
    {
        "id": "230325d8fabed91c",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 605,
        "y": 1470,
        "wires": [
            [
                "f5779068e059be4c"
            ]
        ]
    },
    {
        "id": "a1bf31c1f4982c36",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "triggerHistoryJsonUpdate_in",
        "links": [
            "2883b97684d92288"
        ],
        "x": 240,
        "y": 1455,
        "wires": [
            [
                "bdb744443037f6f5"
            ]
        ]
    },
    {
        "id": "f5779068e059be4c",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 705,
        "y": 1470,
        "wires": [
            [
                "59c0617b8993f309"
            ]
        ],
        "l": false
    },
    {
        "id": "59c0617b8993f309",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 840,
        "y": 1470,
        "wires": [
            [
                "ce8907e4ba09b5c8"
            ]
        ],
        "l": false
    },
    {
        "id": "ce8907e4ba09b5c8",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "",
        "filename": ".\\orders\\history.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 965,
        "y": 1470,
        "wires": [
            [
                "a87b7f1bb3d8030d"
            ]
        ]
    },
    {
        "id": "a87b7f1bb3d8030d",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "written history.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1470,
        "wires": []
    },
    {
        "id": "16e8c34d1250478f",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "send historyTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "historyTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1530,
        "wires": [
            [
                "59c0617b8993f309",
                "230325d8fabed91c"
            ]
        ]
    },
    {
        "id": "508fc7244c0c3621",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "forceHistoryJsonUpdate in",
        "links": [
            "180f9e3f0a29978d",
            "44ede18dded35aa0",
            "fefbd67b181182ce",
            "f129c68931c20f25"
        ],
        "x": 335,
        "y": 1530,
        "wires": [
            [
                "16e8c34d1250478f"
            ]
        ],
        "l": true
    },
    {
        "id": "bdb744443037f6f5",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1455,
        "wires": [
            [
                "230325d8fabed91c"
            ]
        ]
    },
    {
        "id": "ad0438c3cae94f40",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 320,
        "y": 765,
        "wires": [
            [
                "25779228f81e2d81",
                "84013a96084c3eeb",
                "599095620e383bff"
            ]
        ]
    },
    {
        "id": "25779228f81e2d81",
        "type": "file in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\queue.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 720,
        "wires": [
            [
                "1e6921618ed22e2b"
            ]
        ]
    },
    {
        "id": "84013a96084c3eeb",
        "type": "file in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\history.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 765,
        "wires": [
            [
                "0a853593a0797f46"
            ]
        ]
    },
    {
        "id": "599095620e383bff",
        "type": "file in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\completed.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 810,
        "wires": [
            [
                "f3493b385f266d87"
            ]
        ]
    },
    {
        "id": "1e6921618ed22e2b",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 755,
        "y": 720,
        "wires": [
            [
                "60cf7836015914f7",
                "bc155cd9a662d3f9"
            ]
        ],
        "l": false
    },
    {
        "id": "0a853593a0797f46",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 755,
        "y": 765,
        "wires": [
            [
                "74af4f94b7346e0d"
            ]
        ],
        "l": false
    },
    {
        "id": "f3493b385f266d87",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 755,
        "y": 810,
        "wires": [
            [
                "c2ffd0fb87377ef2"
            ]
        ],
        "l": false
    },
    {
        "id": "60cf7836015914f7",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1165,
        "y": 750,
        "wires": [
            [
                "92972af8c5f549ce",
                "3c58a737bee31258"
            ]
        ]
    },
    {
        "id": "92972af8c5f549ce",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read queue.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 750,
        "wires": []
    },
    {
        "id": "3c58a737bee31258",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1470,
        "y": 720,
        "wires": [],
        "l": true
    },
    {
        "id": "8ae9fd411bc78cb9",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "20s trigger",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "control",
        "payload": "trigger",
        "payloadType": "str",
        "x": 335,
        "y": 885,
        "wires": [
            [
                "fd4bd9bffc26442c",
                "2883b97684d92288",
                "5bebd7ba13d78561"
            ]
        ]
    },
    {
        "id": "fd4bd9bffc26442c",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "triggerQueueJsonUpdate_out",
        "mode": "link",
        "links": [
            "df13ffa0e29a0380"
        ],
        "x": 590,
        "y": 855,
        "wires": [],
        "l": true
    },
    {
        "id": "2883b97684d92288",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "triggerHistoryJsonUpdate_out",
        "mode": "link",
        "links": [
            "a1bf31c1f4982c36"
        ],
        "x": 590,
        "y": 885,
        "wires": [],
        "l": true
    },
    {
        "id": "5bebd7ba13d78561",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "triggerCompletedJsonUpdate_out",
        "mode": "link",
        "links": [
            "2dd33717ef5a3b58"
        ],
        "x": 600,
        "y": 915,
        "wires": [],
        "l": true
    },
    {
        "id": "90631bdf8d9f93ae",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read",
        "info": "",
        "x": 350,
        "y": 735,
        "wires": []
    },
    {
        "id": "5f2272efb6d89c79",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "write",
        "info": "",
        "x": 360,
        "y": 855,
        "wires": []
    },
    {
        "id": "74af4f94b7346e0d",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "historyTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1165,
        "y": 795,
        "wires": [
            [
                "92ada735b313aded",
                "bd2747c35b481472"
            ]
        ]
    },
    {
        "id": "c2ffd0fb87377ef2",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "completedTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1175,
        "y": 840,
        "wires": [
            [
                "95a4cfea0458c7b9",
                "6f329cf07ae77335"
            ]
        ]
    },
    {
        "id": "92ada735b313aded",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "refreshCompletedTable_out",
        "mode": "link",
        "links": [
            "15870b35cd8f1905"
        ],
        "x": 1495,
        "y": 795,
        "wires": [],
        "l": true
    },
    {
        "id": "bd2747c35b481472",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read completed.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1475,
        "y": 825,
        "wires": []
    },
    {
        "id": "95a4cfea0458c7b9",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "refreshHistoryTable_out",
        "mode": "link",
        "links": [
            "0933e76415d3b0d8",
            "a6ed287fa626363b"
        ],
        "x": 1520,
        "y": 870,
        "wires": [],
        "l": true
    },
    {
        "id": "6f329cf07ae77335",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "read history.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1495,
        "y": 900,
        "wires": []
    },
    {
        "id": "d662599943fbc2bd",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "b0737e4c04737b82",
        "name": "load/save tables to files",
        "info": "",
        "x": 325,
        "y": 450,
        "wires": []
    },
    {
        "id": "da664ace067df2dc",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "send flow.queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 3180,
        "wires": [
            [
                "90f4c3e098f997c4",
                "8dfcb46d23e73d53"
            ]
        ]
    },
    {
        "id": "3bea7933e72005a0",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "refreshQueueTable_in",
        "links": [
            "e5503f35f4093a0f",
            "c3628dd8cae730f9",
            "a8a3e1a0ebead94e",
            "32a4d22f15811fa3",
            "8b2c8f3ad083a6ad",
            "3c58a737bee31258",
            "c81a146f4493c402",
            "5cd9e3ef9922f088",
            "d8494b7bda6c8ad6",
            "cb5e93613642409a",
            "7f049357115c53e0"
        ],
        "x": 250,
        "y": 3180,
        "wires": [
            [
                "da664ace067df2dc",
                "9cb2558db9346cae"
            ]
        ],
        "l": true
    },
    {
        "id": "90f4c3e098f997c4",
        "type": "ui_etable",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "payload": "[{\"title\":\"rowId\",\"field\":\"rowId\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"\",\"field\":\"deleteButton\",\"hozAlign\":\"center\",\"formatter\":\"html\",\"editor\":false},{\"title\":\"id\",\"field\":\"id\",\"hozAlign\":\"left\",\"width\":180,\"editor\":\"input\"},{\"title\":\"Prodotte\",\"field\":\"quantProd\",\"hozAlign\":\"center\",\"editor\":\"number\"},{\"title\":\"Da Prod.\",\"field\":\"quantToDo\",\"hozAlign\":\"center\",\"editor\":\"number\"},{\"title\":\"Pressa 1\",\"field\":\"sendToPressa1\",\"formatter\":\"html\",\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"Pressa 2\",\"field\":\"sendToPressa2\",\"formatter\":\"html\",\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"Pressa 3\",\"field\":\"sendToPressa3\",\"formatter\":\"html\",\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"Pressa 4\",\"field\":\"sendToPressa4\",\"formatter\":\"html\",\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"note\",\"field\":\"note\",\"hozAlign\":\"textarea\",\"editor\":\"input\"}]",
        "payloadType": "json",
        "options": "{\"movableColumns\":true,\"resizableColumns\":true,\"selectable\":false,\"responsiveLayout\":\"collapse\",\"autoResize\":true,\"layout\":\"fitDataStretch\",\"pagination\":\"local\",\"height\":\"450px\",\"width\":\"100%\",\"groupBy\":false,\"groupStartOpen\":true}",
        "group": "77dcdddb4f97461c",
        "name": "queueTable",
        "order": 7,
        "width": "18",
        "height": "8",
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 830,
        "y": 3180,
        "wires": [
            [
                "99a287f71f858ba2",
                "d111c07926a908c5"
            ]
        ]
    },
    {
        "id": "8dfcb46d23e73d53",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "flow.QueueTable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 3135,
        "wires": []
    },
    {
        "id": "9cb2558db9346cae",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "updateQueueJson_out",
        "mode": "link",
        "links": [
            "ed112941d5cdd4e7"
        ],
        "x": 470,
        "y": 3135,
        "wires": [],
        "l": true
    },
    {
        "id": "99a287f71f858ba2",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "clicked row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 3135,
        "wires": []
    },
    {
        "id": "de78cb844f1f00d8",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "injectRows",
        "func": "\nmsg.payload=[\n    {\n        id: \"firstId\",\n        quantToDo: 10,\n        quantProd: 10,\n        progress:10,\n    },\n];\nlet presse = [\"Pressa1\", \"Pressa2\", \"Pressa3\", \"Pressa4\"];\nlet i=0;\nfor(let item of msg.payload){\n    item.rowNum= i++;\n    item.deleteButton = \"<center><i class='fa fa-trash-o' ></i></center>\"; //onCLick works\n    for(let p of presse){\n        item[\"sendTo\"+p] = \"<center><span ><i class='fa fa-arrow-up' style=\\\"padding-right:5px\\\"></i>load</span></center>\"; //onCLick works\n    }\n    \n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3015,
        "wires": [
            [
                "c3130d1334678fc5"
            ]
        ]
    },
    {
        "id": "1099581654481fc9",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 510,
        "y": 3015,
        "wires": [
            [
                "de78cb844f1f00d8"
            ]
        ],
        "l": false
    },
    {
        "id": "c3130d1334678fc5",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 805,
        "y": 3015,
        "wires": [
            [
                "a8a3e1a0ebead94e"
            ]
        ]
    },
    {
        "id": "a8a3e1a0ebead94e",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1055,
        "y": 3015,
        "wires": [],
        "l": true
    },
    {
        "id": "15c9bf7efe404627",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "load example table",
        "group": "77dcdddb4f97461c",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "load example table",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-update",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 435,
        "y": 2970,
        "wires": [
            [
                "f8d09635394baaab"
            ]
        ]
    },
    {
        "id": "f8d09635394baaab",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "injectRows",
        "func": "\n/*\nmsg.payload=[\n    {\n        id: \"id that takes a lot of space\",\n        quantToDo: 10,\n        quantProd: 10,\n        progress:10,\n    },\n    {\n        id: \"secondId\",\n        quantToDo: 12,\n        quantProd: 10,\n        progress: 50,\n    }\n];\nlet presse = [\"Pressa1\", \"Pressa2\", \"Pressa3\", \"Pressa4\"];\nlet i=0;\nfor(let item of msg.payload){\n    item.rowId= i++;\n    item.deleteButton = \"<center><i class='fa fa-trash-o' ></i></center>\"; //onCLick works\n    for(let p of presse){\n        item[\"sendTo\"+p] = \"<center><span ><i class='fa fa-arrow-up' style=\\\"padding-right:5px\\\"></i>load</span></center>\"; //onCLick works\n    }\n}\n*/\nconst tabUtils=flow.get(\"tabUtils\");\n\nlet ids=[\n    \"id that takes a lot of space\",\n    \"secondId\",\n    \"thirdId\"\n];\n\nmsg.payload=[];\nlet i=0\nfor(let id of ids){\n    let row = tabUtils.queue.newRow(i++);\n    row.id = id;\n    row.quantToDo = Math.round(5 + Math.random()*10);\n    row.quantProd = Math.round(Math.random() * row.quantToDo / 2);\n    msg.payload.push(row);\n}\nnode.warn(msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 2970,
        "wires": [
            [
                "e504bebeacdd75dd"
            ]
        ]
    },
    {
        "id": "416b85ed1defe292",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 485,
        "y": 2940,
        "wires": [
            [
                "f8d09635394baaab"
            ]
        ],
        "l": false
    },
    {
        "id": "e504bebeacdd75dd",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueTable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 2970,
        "wires": [
            [
                "e5503f35f4093a0f"
            ]
        ]
    },
    {
        "id": "e5503f35f4093a0f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "bd2c16c7828242aa",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1050,
        "y": 2970,
        "wires": [],
        "l": true
    },
    {
        "id": "eed42b268cafd4c4",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "salva",
        "group": "77dcdddb4f97461c",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "salva",
        "tooltip": "salva la tabella attuale, verrà ricaricata al prossimo avvio. \\n vengono in ogni caso effettuati salvataggi periodici automatici",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-floppy-o",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 2850,
        "wires": [
            [
                "8f9a1f49027a6915",
                "513dc6bfb2e965e7",
                "44ede18dded35aa0"
            ]
        ]
    },
    {
        "id": "8f9a1f49027a6915",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "forceQueueJsonUpdate out",
        "mode": "link",
        "links": [
            "3cc72650169eec95"
        ],
        "x": 570,
        "y": 2835,
        "wires": [],
        "l": true
    },
    {
        "id": "a0706941e62ef95e",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 375,
        "y": 2820,
        "wires": [
            [
                "8f9a1f49027a6915",
                "513dc6bfb2e965e7",
                "44ede18dded35aa0"
            ]
        ],
        "l": false
    },
    {
        "id": "19565f2c5b691bf7",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "nuovo ordine",
        "group": "77dcdddb4f97461c",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "nuovo ordine",
        "tooltip": "aggiungi un nuovo ordine alla tabella",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-plus-square",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 2775,
        "wires": [
            [
                "cd2a3e7d433fb3e9"
            ]
        ]
    },
    {
        "id": "cd2a3e7d433fb3e9",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "addRow",
        "func": "const tabUtils=flow.get(\"tabUtils\");\n\nlet table = flow.get(\"queueTable\")\nlet row = tabUtils.queue.newRow(tabUtils.newRowId(table));\nnode.warn({added:row});\ntable.push(row)\nflow.set(\"queueTable\",table);\nreturn {payload:table}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465,
        "y": 2775,
        "wires": [
            [
                "8b2c8f3ad083a6ad",
                "f34fa6789deaa4e6"
            ]
        ]
    },
    {
        "id": "e24cdeb55a9a6f68",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 300,
        "y": 2745,
        "wires": [
            [
                "cd2a3e7d433fb3e9"
            ]
        ],
        "l": false
    },
    {
        "id": "8b2c8f3ad083a6ad",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 670,
        "y": 2775,
        "wires": [],
        "l": true
    },
    {
        "id": "f34fa6789deaa4e6",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "debug 61",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2730,
        "wires": []
    },
    {
        "id": "7452dc34b018aaac",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "queueTable topside buttons",
        "info": "",
        "x": 305,
        "y": 2700,
        "wires": []
    },
    {
        "id": "513dc6bfb2e965e7",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "forceCompletedJsonUpdate out",
        "mode": "link",
        "links": [
            "189a3eca588f92de"
        ],
        "x": 595,
        "y": 2865,
        "wires": [],
        "l": true
    },
    {
        "id": "44ede18dded35aa0",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "bd2c16c7828242aa",
        "name": "forceHistoryJsonUpdate out",
        "mode": "link",
        "links": [
            "508fc7244c0c3621"
        ],
        "x": 600,
        "y": 2895,
        "wires": [],
        "l": true
    },
    {
        "id": "823428c64dadbb25",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "QUEUE TABLE",
        "info": "",
        "x": 230,
        "y": 2625,
        "wires": []
    },
    {
        "id": "7f11448ec8122f29",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "HISTORY TABLE",
        "info": "",
        "x": 210,
        "y": 3615,
        "wires": []
    },
    {
        "id": "0933e76415d3b0d8",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "refreshHistoryTable_in",
        "links": [
            "6a1ff5c039948610",
            "c3628dd8cae730f9",
            "11683abf612a1a4b",
            "bb54ea204f3d1f70",
            "9fdb650b24779323",
            "95a4cfea0458c7b9",
            "23a5a7bba4747615"
        ],
        "x": 210,
        "y": 4095,
        "wires": [
            [
                "a4e2b321a1dc18d5",
                "892a21e16fd8d586"
            ]
        ],
        "l": true
    },
    {
        "id": "a4e2b321a1dc18d5",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "send flow.historyTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "historyTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 4095,
        "wires": [
            [
                "f15ed631a334ae18",
                "2bd07d0a756e3fd5"
            ]
        ]
    },
    {
        "id": "892a21e16fd8d586",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "updateHistoryJson_out",
        "mode": "link",
        "links": [
            "a614abde4e2ab03e"
        ],
        "x": 430,
        "y": 4050,
        "wires": [],
        "l": true
    },
    {
        "id": "f15ed631a334ae18",
        "type": "ui_etable",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "payload": "[{\"title\":\"rowId\",\"field\":\"rowId\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"data\",\"field\":\"date\",\"visible\":true,\"hozAlign\":\"left\",\"headerSortStartingDir\":\"desc\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"ora\",\"field\":\"time\",\"visible\":true,\"hozAlign\":\"left\",\"headerSortStartingDir\":\"desc\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"millis\",\"field\":\"millis\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"Ciclo\",\"field\":\"cycleNumber\",\"visible\":true,\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"id\",\"field\":\"id\",\"hozAlign\":\"left\",\"width\":180,\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"Prodotte\",\"field\":\"quantProd\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"Esito\",\"field\":\"statusAsString\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"Eseguito su\",\"field\":\"press\",\"hozAlign\":\"center\",\"visible\":true,\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"note\",\"field\":\"note\",\"hozAlign\":\"textarea\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":\"input\"}]",
        "payloadType": "json",
        "options": "{\"movableColumns\":true,\"resizableColumns\":true,\"selectable\":false,\"responsiveLayout\":\"collapse\",\"autoResize\":true,\"layout\":\"fitDataStretch\",\"pagination\":\"local\",\"height\":\"940px\",\"width\":\"100%\",\"groupBy\":false,\"groupStartOpen\":true,\"initialSort\":[{\"column\":\"press\",\"dir\":\"asc\"},{\"column\":\"time\",\"dir\":\"desc\"},{\"column\":\"date\",\"dir\":\"desc\"}]}",
        "group": "b3c076eedf1fd2f8",
        "name": "historyTable",
        "order": 3,
        "width": "14",
        "height": "18",
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 790,
        "y": 4095,
        "wires": [
            [
                "ecf7ba24682eae0d",
                "73bd49c19cb4ea06"
            ]
        ]
    },
    {
        "id": "2bd07d0a756e3fd5",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "flow.HistoryTable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 675,
        "y": 4050,
        "wires": []
    },
    {
        "id": "ecf7ba24682eae0d",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "clicked row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 4050,
        "wires": []
    },
    {
        "id": "104a98d5dd421a19",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "salva",
        "group": "b3c076eedf1fd2f8",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "salva",
        "tooltip": "salva la tabella attuale, verrà ricaricata al prossimo avvio. \\n vengono in ogni caso effettuati salvataggi periodici automatici",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-floppy-o",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 3840,
        "wires": [
            [
                "180f9e3f0a29978d"
            ]
        ]
    },
    {
        "id": "180f9e3f0a29978d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "forceHistoryJsonUpdate out",
        "mode": "link",
        "links": [
            "508fc7244c0c3621"
        ],
        "x": 535,
        "y": 3840,
        "wires": [],
        "l": true
    },
    {
        "id": "91ec12ac87115cdc",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "70b9c5719558ad66",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 340,
        "y": 3810,
        "wires": [
            [
                "180f9e3f0a29978d"
            ]
        ],
        "l": false
    },
    {
        "id": "d02b6fbde106437f",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "70b9c5719558ad66",
        "name": "historyTable topside buttons",
        "info": "",
        "x": 275,
        "y": 3690,
        "wires": []
    },
    {
        "id": "b16cccaa62171b60",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "COMPLETED TABLE",
        "info": "",
        "x": 230,
        "y": 4260,
        "wires": []
    },
    {
        "id": "15870b35cd8f1905",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "refreshCompletedTable_in",
        "links": [
            "4b5acc982887ac5d",
            "c3628dd8cae730f9",
            "1e234f2b95dd6989",
            "50a2ac2cbfb5f142",
            "103b0946998d0bcc",
            "92ada735b313aded",
            "1fbf3d438abed790"
        ],
        "x": 220,
        "y": 4740,
        "wires": [
            [
                "e330946719521da8",
                "0f442f62dc9f61be"
            ]
        ],
        "l": true
    },
    {
        "id": "e330946719521da8",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "send flow.completedTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completedTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 4740,
        "wires": [
            [
                "51c7d7b3525d3ca6",
                "28c5c8c6a8cbdd41"
            ]
        ]
    },
    {
        "id": "0f442f62dc9f61be",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "updateCompletedJson_out",
        "mode": "link",
        "links": [
            "db96dc0c6dbe7244"
        ],
        "x": 440,
        "y": 4695,
        "wires": [],
        "l": true
    },
    {
        "id": "51c7d7b3525d3ca6",
        "type": "ui_etable",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "payload": "[{\"title\":\"rowId\",\"field\":\"rowId\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"data\",\"field\":\"date\",\"visible\":true,\"hozAlign\":\"left\",\"headerFilter\":\"input\",\"headerSortStartingDir\":\"desc\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"ora\",\"field\":\"time\",\"visible\":true,\"hozAlign\":\"left\",\"headerFilter\":\"input\",\"headerSortStartingDir\":\"desc\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"N°Ciclo\",\"field\":\"cycleNumber\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":\"false\"},{\"title\":\"millis\",\"field\":\"millis\",\"visible\":false,\"hozAlign\":\"left\",\"editor\":false},{\"title\":\"id\",\"field\":\"id\",\"hozAlign\":\"left\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"width\":180,\"editor\":\"false\"},{\"title\":\"Prodotte\",\"field\":\"quantProd\",\"hozAlign\":\"center\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":false},{\"title\":\"note\",\"field\":\"note\",\"hozAlign\":\"textarea\",\"headerFilter\":\"input\",\"headerFilterPlaceholder\":\"Filtra\",\"editor\":\"input\"}]",
        "payloadType": "json",
        "options": "{\"movableColumns\":true,\"resizableColumns\":true,\"selectable\":false,\"responsiveLayout\":\"collapse\",\"autoResize\":true,\"layout\":\"fitDataStretch\",\"pagination\":\"local\",\"height\":\"450px\",\"width\":\"100%\",\"groupBy\":false,\"groupStartOpen\":true,\"initialSort\":[{\"column\":\"time\",\"dir\":\"desc\"},{\"column\":\"date\",\"dir\":\"desc\"}]}",
        "group": "b7f5c766a413446a",
        "name": "completedTable",
        "order": 3,
        "width": "18",
        "height": "8",
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 800,
        "y": 4740,
        "wires": [
            [
                "f0d5683c1d5e6fa4",
                "34fe2b838d57bdf8"
            ]
        ]
    },
    {
        "id": "28c5c8c6a8cbdd41",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "flow.CompletedTable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 4695,
        "wires": []
    },
    {
        "id": "f0d5683c1d5e6fa4",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "clicked row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 4695,
        "wires": []
    },
    {
        "id": "21776dac0e1ffac5",
        "type": "ui_button",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "3714a803248cefeb",
        "name": "salva",
        "group": "b7f5c766a413446a",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "salva",
        "tooltip": "salva la tabella attuale, verrà ricaricata al prossimo avvio. \\n vengono in ogni caso effettuati salvataggi periodici automatici",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-floppy-o",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 4485,
        "wires": [
            [
                "1ff2b9c7e81f175d"
            ]
        ]
    },
    {
        "id": "1ff2b9c7e81f175d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "3714a803248cefeb",
        "name": "forceCompletedJsonUpdate out",
        "mode": "link",
        "links": [
            "189a3eca588f92de"
        ],
        "x": 545,
        "y": 4485,
        "wires": [],
        "l": true
    },
    {
        "id": "88e3d23a3ec9d6b0",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "3714a803248cefeb",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 350,
        "y": 4455,
        "wires": [
            [
                "1ff2b9c7e81f175d"
            ]
        ],
        "l": false
    },
    {
        "id": "d27598503a5b31c1",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "3714a803248cefeb",
        "name": "completedTable topside buttons",
        "info": "",
        "x": 285,
        "y": 4335,
        "wires": []
    },
    {
        "id": "9e7d5e610f97bb9a",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 240,
        "y": 3140,
        "wires": [
            [
                "da664ace067df2dc"
            ]
        ],
        "l": false
    },
    {
        "id": "9145dcd7afd55580",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "scope": [
            "84013a96084c3eeb"
        ],
        "uncaught": false,
        "x": 325,
        "y": 600,
        "wires": [
            [
                "972b3c581c06be97"
            ]
        ]
    },
    {
        "id": "f28eb465e5ea874e",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "catch tables fileNotFound",
        "func": "\nif(/^ENOENT/.test(msg.error) && !context.get(msg.origin+\"_triedOnce\")){\n    context.set(msg.origin+\"_triedOnce\");\n    return msg;\n}\nelse{\n    if (msg.error) {\n        node.error({ \"err\": msg.error.message, origin:msg.origin,\"full\": msg });\n        //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    }\n    else {\n        node.error(msg);\n    }\n    return null\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 600,
        "wires": [
            [
                "dca5936e80add879"
            ]
        ]
    },
    {
        "id": "6fbb1b9edbfec062",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "msg.origin",
        "property": "origin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "queue",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "completed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1100,
        "y": 600,
        "wires": [
            [
                "083e54e2bf6c88c0"
            ],
            [
                "d9fdf272d0dc630c"
            ],
            [
                "9ec25ad7f772805f"
            ]
        ]
    },
    {
        "id": "d9fdf272d0dc630c",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\history.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1355,
        "y": 585,
        "wires": [
            [
                "bf7a7388b5301e71"
            ]
        ]
    },
    {
        "id": "9ec25ad7f772805f",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\completed.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1365,
        "y": 630,
        "wires": [
            [
                "ad642f1caae66ae0"
            ]
        ]
    },
    {
        "id": "083e54e2bf6c88c0",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "filename": ".\\orders\\queue.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1355,
        "y": 540,
        "wires": [
            [
                "94522e8fcaf7234f"
            ]
        ]
    },
    {
        "id": "bf06b4c02ad79ffa",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "scope": [
            "25779228f81e2d81"
        ],
        "uncaught": false,
        "x": 325,
        "y": 555,
        "wires": [
            [
                "9180b7c3e7a90c3b"
            ]
        ]
    },
    {
        "id": "0abd1e62f1abfb13",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "scope": [
            "599095620e383bff"
        ],
        "uncaught": false,
        "x": 325,
        "y": 645,
        "wires": [
            [
                "d7df7b218b99fd38"
            ]
        ]
    },
    {
        "id": "dca5936e80add879",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "set to []",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"[]\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 600,
        "wires": [
            [
                "6fbb1b9edbfec062"
            ]
        ]
    },
    {
        "id": "94522e8fcaf7234f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "8b1597117f2c51ff"
        ],
        "x": 1495,
        "y": 540,
        "wires": []
    },
    {
        "id": "8b1597117f2c51ff",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link in 13",
        "links": [
            "94522e8fcaf7234f"
        ],
        "x": 475,
        "y": 720,
        "wires": [
            [
                "25779228f81e2d81"
            ]
        ]
    },
    {
        "id": "bf7a7388b5301e71",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "8ca8bba88825bbbf"
        ],
        "x": 1495,
        "y": 585,
        "wires": []
    },
    {
        "id": "8ca8bba88825bbbf",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link in 14",
        "links": [
            "bf7a7388b5301e71"
        ],
        "x": 480,
        "y": 765,
        "wires": [
            [
                "84013a96084c3eeb"
            ]
        ]
    },
    {
        "id": "ad642f1caae66ae0",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "7a96fcc940243435"
        ],
        "x": 1515,
        "y": 630,
        "wires": []
    },
    {
        "id": "7a96fcc940243435",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "link in 15",
        "links": [
            "ad642f1caae66ae0"
        ],
        "x": 480,
        "y": 810,
        "wires": [
            [
                "599095620e383bff"
            ]
        ]
    },
    {
        "id": "9180b7c3e7a90c3b",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 555,
        "wires": [
            [
                "f28eb465e5ea874e"
            ]
        ]
    },
    {
        "id": "972b3c581c06be97",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "history",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 600,
        "wires": [
            [
                "f28eb465e5ea874e"
            ]
        ]
    },
    {
        "id": "d7df7b218b99fd38",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 645,
        "wires": [
            [
                "f28eb465e5ea874e"
            ]
        ]
    },
    {
        "id": "7df2d1f5915898bf",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "create file if it does not exist",
        "info": "",
        "x": 415,
        "y": 525,
        "wires": []
    },
    {
        "id": "aaf22c351dd47989",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "df7219d880358536",
        "name": "write to completed.json",
        "info": "",
        "x": 365,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e8a45a4aa7a22874",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "f0e4c9cb0e39cbf8",
        "name": "write to history.json",
        "info": "",
        "x": 335,
        "y": 1410,
        "wires": []
    },
    {
        "id": "ba3c1b4d0beb6c45",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "send queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1080,
        "wires": [
            [
                "db7b2ef040edf421"
            ]
        ]
    },
    {
        "id": "c8587dfc70e3e4c5",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "queueJsonUpdate in",
        "links": [
            "9378b1ab33eb5d57"
        ],
        "x": 240,
        "y": 1080,
        "wires": [
            [
                "ba3c1b4d0beb6c45"
            ]
        ]
    },
    {
        "id": "ed112941d5cdd4e7",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "queueJsonUpdate in",
        "links": [
            "5770aad48055a0a4",
            "d60c51234f236dd7",
            "802f8ed5c059822d",
            "9cb2558db9346cae",
            "c652b7a0d3a05071"
        ],
        "x": 240,
        "y": 1245,
        "wires": [
            [
                "ba3c1b4d0beb6c45",
                "76eee9a189e80361"
            ]
        ]
    },
    {
        "id": "db7b2ef040edf421",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 600,
        "y": 1065,
        "wires": [
            [
                "d54b27e714abae2f"
            ]
        ]
    },
    {
        "id": "76eee9a189e80361",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "send queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1245,
        "wires": [
            [
                "df7a8363391ef95f"
            ]
        ]
    },
    {
        "id": "80dd2ac395ededd3",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "send queueTable",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queueTable",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 615,
        "y": 1320,
        "wires": [
            [
                "db7b2ef040edf421",
                "5714ac0a75f5ed73"
            ]
        ]
    },
    {
        "id": "8d2ad3a3e8ccf1ed",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "trigger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1050,
        "wires": [
            [
                "db7b2ef040edf421"
            ]
        ]
    },
    {
        "id": "d54b27e714abae2f",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 700,
        "y": 1065,
        "wires": [
            [
                "5714ac0a75f5ed73"
            ]
        ],
        "l": false
    },
    {
        "id": "df7a8363391ef95f",
        "type": "q-gate",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "keep one",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 615,
        "y": 1215,
        "wires": [
            [
                "a54e9d7aad7ac38c"
            ]
        ]
    },
    {
        "id": "3cc72650169eec95",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "forceQueueJsonUpdate in",
        "links": [
            "8f9a1f49027a6915"
        ],
        "x": 345,
        "y": 1320,
        "wires": [
            [
                "80dd2ac395ededd3"
            ]
        ],
        "l": true
    },
    {
        "id": "5714ac0a75f5ed73",
        "type": "json",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 835,
        "y": 1065,
        "wires": [
            [
                "e1d5767241a4aac7"
            ]
        ],
        "l": false
    },
    {
        "id": "df13ffa0e29a0380",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "triggerQueueJsonUpdate_in",
        "links": [
            "fd4bd9bffc26442c",
            "a835f7dcfb37a653",
            "83756693d2a8dde5",
            "302229dd36a529de",
            "54c15219622965ed"
        ],
        "x": 240,
        "y": 1050,
        "wires": [
            [
                "8d2ad3a3e8ccf1ed"
            ]
        ]
    },
    {
        "id": "50a1ab1b5b2e763e",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "1s",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "control",
        "payload": "trigger",
        "payloadType": "str",
        "x": 390,
        "y": 1215,
        "wires": [
            [
                "df7a8363391ef95f"
            ]
        ]
    },
    {
        "id": "a54e9d7aad7ac38c",
        "type": "rbe",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 735,
        "y": 1215,
        "wires": [
            [
                "ca8e8ce8b25e297e"
            ]
        ],
        "l": false
    },
    {
        "id": "b3b14f1983dbbd12",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "filter",
        "func": "const table=msg.payload;\nconst last = context.get(\"last\") ?? {};\n\nfunction passThrough(){\n    context.set(\"last\", table);\n    node.send(msg);\n}\n\nfor(let row of table){\n    let keys=Object.keys(row);\n    if(!keys)\n        if(!Object.keys(last)){\n            passThrough();\n            node.warn(\"bothEmpty\");\n            return;\n        }\n            \n    if(table.length != last.length){\n        passThrough();\n        node.warn(\"different lengths\");\n        return;\n    }\n    let i=0;\n    for(let k of keys)\n        if(!last[i].hasOwnProperty(k) || row[k]!==last[i][k]){\n            node.warn({l:last,n:row,k:k,i:i});\n            passThrough();\n            return\n        }\n}\n\n//if you get here they were equal\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 585,
        "y": 1125,
        "wires": [
            [
                "5714ac0a75f5ed73"
            ]
        ]
    },
    {
        "id": "e1d5767241a4aac7",
        "type": "file",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "",
        "filename": ".\\orders\\queue.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 960,
        "y": 1065,
        "wires": [
            [
                "8135493bd3dc4370"
            ]
        ]
    },
    {
        "id": "ca8e8ce8b25e297e",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "orders.queue.table",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 1215,
        "wires": [
            [
                "3b4e5ec5a43dcaa1",
                "9378b1ab33eb5d57"
            ]
        ]
    },
    {
        "id": "bd4440f663b8fa9f",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "poll 20s flow.queue",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "orders.queue",
        "payloadType": "flow",
        "x": 405,
        "y": 1125,
        "wires": [
            [
                "b3b14f1983dbbd12"
            ]
        ]
    },
    {
        "id": "8135493bd3dc4370",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "written queue.json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1175,
        "y": 1065,
        "wires": []
    },
    {
        "id": "c4e6970ead724f13",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "filter",
        "func": "const table=msg.payload;\nconst last = context.get(\"last\") ?? {};\n\nfunction passThrough(){\n    context.set(\"last\", table);\n    node.send(msg);\n}\n\nfor(let row of table){\n    let keys=Object.keys(row);\n    if(!keys)\n        if(!Object.keys(last)){\n            passThrough();\n            node.warn(\"bothEmpty\");\n            return;\n        }\n            \n    if(table.length != last.length){\n        passThrough();\n        node.warn(\"different lengths\");\n        return;\n    }\n    let i=0;\n    for(let k of keys)\n        if(!last[i].hasOwnProperty(k) || row[k]!==last[i][k]){\n            node.warn({l:last,n:row,k:k,i:i});\n            passThrough();\n            return\n        }\n}\n\n//if you get here they were equal\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1275,
        "wires": [
            [
                "ca8e8ce8b25e297e"
            ]
        ]
    },
    {
        "id": "3b4e5ec5a43dcaa1",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "set orders.queue.table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1230,
        "wires": []
    },
    {
        "id": "9378b1ab33eb5d57",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "write queue.json out",
        "mode": "link",
        "links": [
            "c8587dfc70e3e4c5",
            "cd5102106b5a9578"
        ],
        "x": 1185,
        "y": 1200,
        "wires": []
    },
    {
        "id": "232ea9b29c931a62",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "b2c3d112c3d0c889",
        "name": "poll 1s flow.queueTable",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "queueTable",
        "payloadType": "flow",
        "x": 545,
        "y": 1275,
        "wires": [
            [
                "c4e6970ead724f13"
            ]
        ]
    },
    {
        "id": "be43df984cc12219",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "b2c3d112c3d0c889",
        "name": "write to queue.json",
        "info": "",
        "x": 330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d111c07926a908c5",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "2f4be50b7d91c706",
        "name": "queueTable event out",
        "mode": "link",
        "links": [
            "2304d8a10ed9b149",
            "34fe0f797682d4b7"
        ],
        "x": 1050,
        "y": 3180,
        "wires": [],
        "l": true
    },
    {
        "id": "bc155cd9a662d3f9",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "reset buttons & plc",
        "func": "let table = msg.payload;\nconst tabUtils = flow.get(\"tabUtils\");\n\n/*\nfunction updateButtons(table){\n    const tabUtils = flow.get(\"tabUtils\");\n    const button=tabUtils.queue.sendToPressButton;\n\n    for(let row of table){\n        let i=0,fieldName;\n        while(fieldName=\"sendToPressa\"+(i++) && row.hasOwnProperty(fieldName)){\n            if (button.getStateString(row[fieldName+\"State\"]) == \"queued\"){\n                \n                //setSingleState(\"clickToSend\")\n                node.send({ topic: fieldName, payload: row });\n                \n            }\n            else if(button.getStateString(row[fieldName+\"State\"]) == \"clearing\")\n                button.setSingleState(\"loaded\")\n            \n        }\n        \n    }\n}*/\n\nfunction resetButtons(table){\n    const tabUtils = flow.get(\"tabUtils\");\n    const button = tabUtils.queue.sendToPressButton;\n\n    if(table.length){\n        let row = table[0];\n        let i = 1, fieldName;\n        while ((fieldName = \"sendToPressa\" + (i++)) && row.hasOwnProperty(fieldName))\n            node.send({ topic: fieldName, action: \"clear\", payload: row }, { press: \"pressa\" + i, topic: fieldName, action: \"clear\", payload: row });\n    }\n\n    /*//for each sendTo button of each row\n    for (let row of table) {\n        let i = 1, fieldName;\n        while ((fieldName = \"sendToPressa\" + (i++)) && row.hasOwnProperty(fieldName)) {\n            //button.setSingleState(\"loaded\",); //not strictly necessary..\n            let pressNum = i;\n            //emulate \"clear\" feedback\n            node.warn({\"sent\": { topic: fieldName, action: \"clear\", payload: row }})\n            node.send({topic:fieldName, action:\"clear\", payload:row}, {press:\"pressa\"+pressNum, topic:fieldName, action:\"clear\", payload:row});\n        }\n    }*/\n}\n\n\nfunction wait(callback,param){\n    if(!flow.get(\"tabUtils\"))\n        context.set(\"id\",  setTimeout(wait, 1000, callback, param),  ()=>{node.error(\"asyncContextError in 'reset buttons & plc'\")})\n    else\n        callback(param);\n}\n\nwait(resetButtons,table);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nclearTimeout(context.get(\"id\"));",
        "libs": [],
        "x": 890,
        "y": 690,
        "wires": [
            [
                "55d2fb1e2f4239c6"
            ],
            [
                "c30ca4565e0d218f"
            ]
        ]
    },
    {
        "id": "c30ca4565e0d218f",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "mixed sendToPressRequests out",
        "mode": "link",
        "links": [
            "8cc8b8736d1102b3",
            "584b8fd433a7e2cd"
        ],
        "x": 1160,
        "y": 705,
        "wires": [],
        "l": true
    },
    {
        "id": "55d2fb1e2f4239c6",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "588342109c719d84",
        "name": "sendToPressRequest done out",
        "mode": "link",
        "links": [
            "db8b2173015ac88c",
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "ee7df6ca341a90cc",
            "c6c146143c41ddfa",
            "9b865d08e3a9ac6c",
            "f3860e59347fd377",
            "8c2c42bc9a8767e9",
            "645349eefb80cd73"
        ],
        "x": 1150,
        "y": 675,
        "wires": [],
        "l": true
    },
    {
        "id": "73bd49c19cb4ea06",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "name": "historyTable event out",
        "mode": "link",
        "links": [],
        "x": 1030,
        "y": 4095,
        "wires": [],
        "l": true
    },
    {
        "id": "34fe2b838d57bdf8",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "name": "completedTable event out",
        "mode": "link",
        "links": [],
        "x": 1050,
        "y": 4740,
        "wires": [],
        "l": true
    },
    {
        "id": "9f767a4b86454460",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "pressa1 allProdExc oncePerCycleEnd in",
        "links": [
            "479532ec132fba80"
        ],
        "x": 360,
        "y": 1960,
        "wires": [
            [
                "7f9c0ab46277a85f"
            ]
        ],
        "l": true
    },
    {
        "id": "7f9c0ab46277a85f",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1960,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "935ab1c92ceb192a",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 765,
        "y": 2020,
        "wires": [
            [
                "ba40bf7df49ff334",
                "1357b3ee16a3cc63",
                "8437a7d22a9f64c3"
            ]
        ],
        "l": false
    },
    {
        "id": "d2554bc4cfd2945f",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 2000,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "a0ea58ab11051947",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 2040,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "545e9a9385547c1a",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "press",
                "pt": "msg",
                "to": "pressa4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 2080,
        "wires": [
            [
                "935ab1c92ceb192a"
            ]
        ]
    },
    {
        "id": "ba40bf7df49ff334",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "push to historyTable",
        "func": "var plcData = msg.payload;\nlet refreshMsg = msg;\nvar historyTable = flow.get(\"historyTable\");\nconst tabUtils = flow.get(\"tabUtils\");\n\nlet row=tabUtils.history.newRow(tabUtils.newRowId(historyTable));\n\nrow.id = plcData.prod_id;\nrow.quantProd = plcData.prod_quantProd;\nrow.status = plcData.exc_status;\nrow.cycleNumber = plcData.prod_cycleNumber;\nrow.press = msg.press;\nrow.statusAsString = (plcData.exc_status == \"2\" || plcData.exc_status == 2) ? \"parz.\" : \"compl.\";\n\nhistoryTable.push(row);\nnode.send(refreshMsg);\n\nflow.set(\"historyTable\", historyTable);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2030,
        "wires": [
            [
                "23a5a7bba4747615",
                "36bdb368ddeac984"
            ]
        ]
    },
    {
        "id": "1357b3ee16a3cc63",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "ifOrderCompleted -> update tables",
        "func": "var plcData=msg.payload;\nvar queueTable=flow.get(\"queueTable\");\nconst tabUtils = flow.get(\"tabUtils\");\nconst button = tabUtils.queue.sendToPressButton;\nconst pressNum = msg.press.match(/([0-9]+)$/)[1];\n\n   /* data as associative array\nvar posOf={};\nfor (let i=0, item; i<plcData.length; i++) {\n    item = plcData[i];\n    posOf[item.topic]=i;\n} */\n//let posOf=msg.posOf; //data as associative array //like payload[posOf[\"fieldName\"]];\n\n\nlet idx = 0;\nfor(let row of queueTable){\n    if(row.id == plcData.prod_id){\n        if(button.isLoaded(\"sendToPressa\"+pressNum,queueTable[idx])){\n            node.warn(\"selected \"+idx)\n            break;\n        }\n    }\n    idx++;\n}\n\nif(idx < queueTable.length && queueTable.length){\n    node.warn(\"should update \"+(idx+1)+\"° row\");\n    //plc is actually in charge of increment/decrement (necessary? no. requested? yes.)\n    queueTable[idx].quantProd = plcData.exc_quantProd;\n    queueTable[idx].quantToDo = plcData.exc_quantToDo;\n\n    //if prod >= toDo\n        //move to completed\n    if (plcData.exc_quantProd >= plcData.exc_quantToDo) {\n        var completedTable = flow.get(\"completedTable\");\n            //crea nuova riga\n        let row = tabUtils.completed.newRow(tabUtils.newRowId(completedTable));\n        node.warn({newrow:row}); //DBG\n        row.cycleNumber = plcData.prod_cycleNumber;\n        row.id = plcData.prod_id;\n        row.quantProd = queueTable[idx].quantProd;\n        row.note = queueTable[idx].note;\n            //move\n        completedTable.push(row);\n        tabUtils.deleteRow(idx, queueTable);\n        node.send([{ topic: \"refresh\", payload: \"queueTable\" }, { topic: \"refresh\", payload: \"completedTable\" }]);\n        node.warn(\"moved\");\n    }\n    else{\n        node.warn(\"not done\")\n        node.send([{ topic: \"refresh\", payload: \"queueTable\" }, null]);\n    }\n}\nelse{\n    node.warn(\"no matching id in queueTable\");\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1960,
        "wires": [
            [
                "5cd9e3ef9922f088"
            ],
            [
                "1fbf3d438abed790"
            ]
        ]
    },
    {
        "id": "2751f8a9a425be69",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "pressa2 allProdExc oncePerCycleEnd in",
        "links": [
            "ca8804a273a54375"
        ],
        "x": 360,
        "y": 2000,
        "wires": [
            [
                "d2554bc4cfd2945f"
            ]
        ],
        "l": true
    },
    {
        "id": "85e4a01c096f28a3",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "pressa3 allProdExc oncePerCycleEnd in",
        "links": [
            "9c82842ac58cdc40"
        ],
        "x": 360,
        "y": 2040,
        "wires": [
            [
                "a0ea58ab11051947"
            ]
        ],
        "l": true
    },
    {
        "id": "92d32ee8e1251cea",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "pressa4 allProdExc oncePerCycleEnd in",
        "links": [
            "bf32410fd1d62452"
        ],
        "x": 360,
        "y": 2080,
        "wires": [
            [
                "545e9a9385547c1a"
            ]
        ],
        "l": true
    },
    {
        "id": "23a5a7bba4747615",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "refreshHistoryTable_out",
        "mode": "link",
        "links": [
            "0933e76415d3b0d8",
            "1d1e8e2742a7dcf8",
            "a6ed287fa626363b"
        ],
        "x": 1230,
        "y": 2040,
        "wires": [],
        "l": true
    },
    {
        "id": "36bdb368ddeac984",
        "type": "debug",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "refresh hist",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 2080,
        "wires": []
    },
    {
        "id": "5cd9e3ef9922f088",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1270,
        "y": 1920,
        "wires": [],
        "l": true
    },
    {
        "id": "1fbf3d438abed790",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "refreshCompletedTable_out",
        "mode": "link",
        "links": [
            "15870b35cd8f1905"
        ],
        "x": 1290,
        "y": 1980,
        "wires": [],
        "l": true
    },
    {
        "id": "b83d044ecee3faf8",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "update tables with plcData",
        "info": "",
        "x": 360,
        "y": 1880,
        "wires": []
    },
    {
        "id": "4c8e5c82af533d36",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "name": "handle clicked rows interactivity",
        "func": "    //aliases for readablility\nlet activeRow = msg.payload;\nlet activeFieldName = msg.topic;\nlet refreshMsg = msg;\n    //params //may someday move to a flow.variable or obj\nconst allowMultRowSel = flow.get(\"allowMultRowSel\") ?? true; //t|f if set it allows user to set an order to track multiple presses at once, by ticking more than one button on the same row\nconst requestPopup = (id) => { return { \"popupId\": id, \"srcMsg\": msg } }\n    //restituisce l'indice della riga con rowId==rowId in table\n//const posOf = flow.get(\"tabUtils\").posOf;\n/*\nfunction posOf(rowId,table){\n    //node.warn(\"posOf\"); \n        //probable shortcut\n    if(table[rowId].rowId==rowId)\n        return rowId;\n    let i=0\n    for(let row of table) {\n        //node.warn(\"posOf:\"+i); \n        if(row.rowId==rowId)\n            return i;\n        i++;\n    }\n}*/\n\n\n    \n\n    //deleteButton\n        //create a NEW table without the row that needs to be deleted //preserves table[rowId].rowId == rowId\n        //then refresh frontend\nif (activeFieldName == \"deleteButton\") {\n    // //check that the order is not loaded (deny if it is)\n    //     //non testato\n    // const tabUtils = flow.get(\"tabUtils\");\n    // const button = tabUtils.queue.sendToPressButton;\n    // if ([0, 1, 2, 3].some(idx => button.getStateString(activeRow[\"sendToPressa\" + (idx + 1) + \"State\"]) != \"clickToSend\")) {\n    //     return [refreshMsg, null, requestPopup(\"deleteDenied_inUse\")]\n    // }\n    \n    let table = flow.get(\"queueTable\");\n    let updatedTable = new Array();\n    for (let row of table){\n        if (row.rowId != msg.payload.rowId)\n            updatedTable.push(row);\n    }\n\n    flow.set(\"queueTable\", updatedTable);\n        //refresh frontend\n    return refreshMsg;\n}\n\n    //sendToPressa\nelse if (/sendToPressa/.test(activeFieldName)){\n    let table = flow.get(\"queueTable\");\n    let tabUtils = flow.get(\"tabUtils\");\n    let button = tabUtils.queue.sendToPressButton;\n    let activeRowIdx = tabUtils.posOf(activeRow.rowId, table);\n    let pressNum = activeFieldName.match(/sendToPressa([0-9]+)/)[1];\n\n    //button.setStateInTable(\"clearing\",\"sendToPressa3\",table[activeRowIdx],table);\n\n    //overwrite column's button states //the feedback holds what's currently true\n    if(msg.isFeedback){\n        //if clear   gray tick -> clickToSend + reset them all //nothing was sent after greenTick was canceled\n            //if original row was deleted: still reset them all\n        if(msg.action == \"clear\"){\n            //reset all buttons in the same column\n            for (let rowIdx in table)\n                button.setSingleState(\"clickToSend\", activeFieldName, table[rowIdx]);\n\n        }\n        else if(msg.action == \"load\"){\n            //if row was deleted\n                //throw alert?\n            if(activeRowIdx < 0){\n                node.error(\"received button feedback of deleted row\",{errId:\"missingRowException\",triggeringMsg:msg});\n                return null;\n            }\n            //reset all other buttons in the same column\n            for (let rowIdx in table)\n                if(rowIdx != activeRowIdx && button.getStateString(table[rowIdx][activeFieldName+\"State\"]) != \"clickToSend\")\n                    button.setSingleState(\"clickToSend\", activeFieldName, table[rowIdx]);\n            //set the one to loaded\n            button.setSingleState(\"loaded\", activeFieldName, table[activeRowIdx])\n            //button.setStateInTable(\"loaded\", activeFieldName, table[activeRowIdx]);\n        }\n        //write to plc and refresh frontend\n        flow.set(\"queueTable\", table);\n        node.warn({feedback:msg.action,fr0m:activeFieldName,appliedTo:activeRow});\n        return [refreshMsg, null];\n    }\n    //change clicked button state\n    else{\n        let state = activeRow[activeFieldName + \"State\"] //ex. sendToPressa1State // 0 \"clickToSend\" | 1 \"loaded\" | -1 \"error\"\n        //state = !state; //loaded/error -> clickToSend   |   clickToSend -> loaded\n        \n        switch (button.getStateString(state)) {\n            //load order in plc as soon as it's free // -> queued //will change to loaded\n            case \"clickToSend\": {\n                for(let rowIdx in table){\n                    //queued -> clickToSend\n                    if(button.getStateString(table[rowIdx][activeFieldName+\"State\"]) == \"queued\")\n                        button.setSingleState(\"clickToSend\",activeFieldName,table[rowIdx]);\n                    //loaded -> clearing\n                    else if (button.getStateString(table[rowIdx][activeFieldName + \"State\"]) == \"loaded\")\n                        button.setSingleState(\"clearing\", activeFieldName, table[rowIdx]);\n                }\n                //set it to queued\n                button.setSingleState(\"queued\",activeFieldName, table[activeRowIdx]);\n                //writes to plc\n                msg.action = \"load\";\n                break;\n            }\n            //cancel load // -> clickToSend\n            case \"queued\": {\n                //just set it to clickToSend\n                button.setSingleState(\"clickToSend\", activeFieldName, table[activeRowIdx]);\n                //cancel action clickToSend\n                    //takes the spot of the previous action (clear)\n                    //if it has already been applied, its feedback is on the way and will update the table anyway\n                msg.action = \"nothing\";\n                break;\n            }\n            //write empty order to plc asap //-> clearing //will go to clickToSend //will reset whole column to clickToSend\n            case \"loaded\": {\n                //just set it to clearing\n                button.setSingleState(\"clearing\", activeFieldName, table[activeRowIdx]);\n                //empty plc exc\n                    //feedback will reset all buttons to clickToSend\n                msg.action = \"clear\";\n                break;\n            }\n            //-> loaded //cancel clear\n            case \"clearing\": {\n                for (let rowIdx in table) {\n                    //queued -> clickToSend\n                    if (button.getStateString(table[rowIdx][activeFieldName + \"State\"]) == \"queued\")\n                        button.setSingleState(\"clickToSend\", activeFieldName, table[rowIdx]);\n                    //loaded -> clearing\n                    else if (button.getStateString(table[rowIdx][activeFieldName + \"State\"]) == \"loaded\")\n                        button.setSingleState(\"clearing\", activeFieldName, table[rowIdx]);\n                }\n                button.setSingleState(\"loaded\", activeFieldName, table[activeRowIdx]);\n                //cancel action clear\n                    //takes the spot of the previous action (load)\n                    //if it has already been applied, its feedback is on the way and will update the table anyway\n                msg.action = \"nothing\";\n                break;\n            }\n        }\n        //write to plc and refresh frontend\n        flow.set(\"queueTable\", table);\n        node.warn({ clicked: button.getStateString(state), fr0m: activeFieldName, appliedTo: activeRow });\n        msg.press=\"pressa\"+pressNum;\n        return [refreshMsg, msg];\n    }\n}\n    //updates flow.table without refreshing frontend\nelse {\n    //flow.set(\"queueTable\", msg.options.data);\n    \n    \n    let table = flow.get(\"queueTable\");\n    let tabUtils = flow.get(\"tabUtils\");\n    let button = tabUtils.queue.sendToPressButton;\n    let activeRowIdx = tabUtils.posOf(activeRow.rowId, table);\n    \n\n    /*let inUse=false,i=0,stateString=\"\";\n    while (stateString =  && stateString !== undefined){\n        \n    }\n    */\n    let inUse=false;\n    for(let i=0;i<4;i++){\n        if (button.getStateString(activeRow[\"sendToPressa\" + (i+1) + \"State\"]) != \"clickToSend\") {\n            inUse = true;\n            break;\n        }\n    }\n    /*\n        //loop isGateOpen, breaks on false holding edit=false or on undefined holding edit=true\n    let editable=true,i=0;\n    do{\n        editable = global.get(\"pressa\" + (++i) + \"_isGateOpen\");\n    }while (global.get(\"pressa\" + (i+1) + \"_isGateOpen\"))\n    */\n    if (inUse) {\n        //return [refreshMsg] //de-update table\n        return [refreshMsg, null, requestPopup(\"editDenied_inUse\")];\n    }\n    else {\n        // if (activeFieldName == \"id\") {\n        //     if (table.some(row => row.rowId != activeRow.rowId && row.id == activeRow.id)) {\n        //         return [refreshMsg, null, requestPopup(\"editDenied_dupId\")];\n        //     }\n        // }\n        flow.set(\"queueTable\", msg.options.data);\n        return null;\n    }\n    \n    \n    \n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2220,
        "wires": [
            [
                "7f049357115c53e0"
            ],
            [
                "b841b6eefb58def0"
            ],
            [
                "8e41af32d0466377"
            ]
        ]
    },
    {
        "id": "34fe0f797682d4b7",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "name": "queueTable event in",
        "links": [
            "d111c07926a908c5"
        ],
        "x": 305,
        "y": 2220,
        "wires": [
            [
                "4c8e5c82af533d36"
            ]
        ],
        "l": true
    },
    {
        "id": "e579796d389a173e",
        "type": "change",
        "z": "2260f1f88d7c60bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isFeedback",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 655,
        "y": 2280,
        "wires": [
            [
                "4c8e5c82af533d36"
            ]
        ]
    },
    {
        "id": "7f049357115c53e0",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "name": "refreshQueueTable_out",
        "mode": "link",
        "links": [
            "3bea7933e72005a0",
            "1d1e8e2742a7dcf8",
            "107ba20c98b6cb03",
            "1ebe50be51bab839"
        ],
        "x": 1045,
        "y": 2205,
        "wires": [],
        "l": true
    },
    {
        "id": "b841b6eefb58def0",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "name": "route?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2280,
        "wires": [
            [
                "7c8bd303c63bc52d"
            ]
        ]
    },
    {
        "id": "ee7df6ca341a90cc",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "name": "pressa1 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "a992bf0170cdc157"
        ],
        "x": 345,
        "y": 2280,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "f3860e59347fd377",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "name": "pressa2 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "597b8d08f336dbe5"
        ],
        "x": 345,
        "y": 2320,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "8c2c42bc9a8767e9",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "name": "pressa3 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "6deb423e38b82d31"
        ],
        "x": 345,
        "y": 2360,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "645349eefb80cd73",
        "type": "link in",
        "z": "2260f1f88d7c60bf",
        "name": "pressa4 sendToPressRequest done in",
        "links": [
            "55d2fb1e2f4239c6",
            "e645d7e9aa1008c1"
        ],
        "x": 345,
        "y": 2400,
        "wires": [
            [
                "e579796d389a173e"
            ]
        ],
        "l": true
    },
    {
        "id": "7c8bd303c63bc52d",
        "type": "link out",
        "z": "2260f1f88d7c60bf",
        "name": "mixed sendToPressRequests out",
        "mode": "link",
        "links": [
            "8cc8b8736d1102b3",
            "584b8fd433a7e2cd"
        ],
        "x": 1145,
        "y": 2280,
        "wires": [],
        "l": true
    },
    {
        "id": "c9fa4cba41fe88a7",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "name": "",
        "info": "no msg.press\npress inferred from topic: like \"sendToPressa1\"",
        "x": 570,
        "y": 2320,
        "wires": [],
        "l": false
    },
    {
        "id": "5e7a9cab577dae64",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "name": "handle button clicks and field edits",
        "info": "",
        "x": 380,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8437a7d22a9f64c3",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "6b0818d4a0baca5e",
        "name": "tables max length",
        "func": "//leftshift history when longer than maxLength\nlet table = flow.get(\"historyTable\");\nlet maxLength = 5000;\nlet newLength = 4200;\nif(table.length >= 5000){\n    let diff = table.length - newLength;\n    for(let i=0; i<newLength; i++)\n        table[i] = table[i+diff];\n    table.length = newLength;\n}\nflow.set(\"historyTable\",table);\n\n//leftshift completed when longer than maxLength\ntable = flow.get(\"completedTable\");\nmaxLength = 5000;\nnewLength = 4200;\nif (table.length >= 5000) {\n    let diff = table.length - newLength;\n    for (let i = 0; i < newLength; i++)\n        table[i] = table[i + diff];\n    table.length = newLength;\n}\nflow.set(\"completedTable\",table);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "a72b1c3580f09904",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "f6a4cccae63b60ae",
        "group": "b7f5c766a413446a",
        "name": "completedTable title",
        "order": 2,
        "width": "8",
        "height": "1",
        "format": "<span style=\"margin-left:60px;position:relative;top:10px;color=#0000a0;\"><h3> Ultimi Ordini Completati<h3></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 265,
        "y": 4650,
        "wires": [
            []
        ]
    },
    {
        "id": "78a704a3e466fce3",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "e2961306402a77aa",
        "group": "b3c076eedf1fd2f8",
        "name": "historyTable title",
        "order": 2,
        "width": "8",
        "height": "1",
        "format": "<span style=\"margin-left:60px;position:relative;top:10px;color=#0000a0;\"><h3> Cronologia Cicli di Produzione<h3></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 3990,
        "wires": [
            []
        ]
    },
    {
        "id": "0ca3c958633a0c8b",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "2f4be50b7d91c706",
        "group": "77dcdddb4f97461c",
        "name": "queueTable title",
        "order": 1,
        "width": "8",
        "height": "1",
        "format": "<span style=\"margin-left:60px;position:relative;top:10px;color=#0000a0;\"><h3> Nuovi Ordini<h3></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 425,
        "y": 2625,
        "wires": [
            []
        ]
    },
    {
        "id": "88534f4f764fdb99",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "catchAll",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"src\":msg.error.source.id,\"n\":msg.error.source.name,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 195,
        "wires": [
            []
        ]
    },
    {
        "id": "d8cfb4d7d6f20c04",
        "type": "catch",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 710,
        "y": 195,
        "wires": [
            [
                "88534f4f764fdb99"
            ]
        ]
    },
    {
        "id": "9da7d4d6e4e7a495",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "set flow.tabUtils",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nfunction twoDigit(x) {\n    if (typeof x == \"string\")\n        x = parseInt(x);\n    return x < 10 ? '0' + x : x;\n}\n\ncallWhenDef(\"utils\",()=>{\n    const utils = global.get(\"utils\");\n    \n    const thisClassName = \"tabUtils\";\n    const def = {\n        /**\n         * returns the index of the row with rowId==rowId in the provided table, -1 if not found\n         * \n         * @param {number} rowId name of the button to affect, like \"sendToPressa1\"\n         * @param {object} tableRef reference to the row to check, must have a fieldName button.\n         * @return {number} the index of the row with rowId==rowId in the provided table, -1 if not found\n        */\n        posOf(rowId, tableRef) {\n            if (rowId < tableRef.length && tableRef[rowId].rowId == rowId)\n                return rowId;\n            for (let i = 0; i < tableRef.length; i++)\n                if (tableRef[i].rowId == rowId)\n                    return i;\n            return -1; //not found\n        },\n\n        hasRow(rowId, tableRef) {\n            return this.posOf(rowId, tableRef) >= 0;\n        },\n\n        deleteRowId(rowId, tableRef) {\n            let pos = this.posOf(rowId, tableRef);\n            if (pos >= 0) {\n                this.deleteRow(pos, tableRef);\n                return true;\n            }\n            else\n                return false\n        },\n\n        deleteRow(rowIdx, tableRef) {\n            for (let i = rowIdx; i < tableRef.length - 1; i++) {\n                tableRef[i] = tableRef[i + 1];\n            }\n            tableRef.pop();\n            return true;\n        },\n        newRowId(table) {\n            //if table empty assign first \n            if (table.length == 0)\n                return 0; //first rowId\n            //if rowId equals its table's index -> use shortcut\n            if (table[table.length - 1].rowId == table.length - 1)\n                return table.length;\n            //else\n            //load all possible indexes\n            var indexes = new Array()\n            let i = 0;\n            for (let row of table)\n                indexes[i++] = true;\n            indexes[i++] = true;\n            //flag off the used ones\n            for (let row of table)\n                indexes[row.rowId] = false;\n            //return the first available one\n            i = 0;\n            while (!indexes[i])\n                i++;\n            return i;\n        },\n        queue: {\n            /** \n             * @borrows setStateInRow as setSingleState \n             * */\n            sendToPressButton: {\n                //states the button can be in\n                //\"state\" are effimerous, will change on its own\n                //\"button\" will stay as they are until clicked\n                states: {\n                    //button //onClick: enqueue writes to plc\n                    \"clickToSend\": \"<center><span ><i class='fa fa-arrow-up' style=\\\"margin-right:5px\\\"></i>  abilita  </span></center>\",\n                    //state //onClick: reset to clickTosend and enqueue empty plc action\n                    \"queued\": \"<center><span ><i class='fa fa-arrow-up' style=\\\"margin-right:5px; color:gray;\\\"></i>  in attesa  </span></center>\",\n                    //button //onClick: reset to clearing and enqueue empty plc action\n                    \"loaded\": \"<center><span ><i class='fa fa-minus' style=\\\"margin-right:5px\\\"></i>  disabilita  </span></center>\",\n                    //state //onClick: reset to clearing and enqueue empty plc action\n                    \"clearing\": \"<center><span ><i class='fa fa-minus' style=\\\"margin-right:5px; color:gray;\\\"></i> disabilita </span></center>\",\n                    //not used\n                    \"fail\": \"<center><span ><i class='fa fa-times' style=\\\"color:red;\\\"></i></span></center>\",\n                    //something went wrong in a function\n                    \"tableError\": \"<span style=\\\"color: red\\\"> tableError </span>\"\n                },\n\n                getStateString(state) {\n                    var stateString;\n                    switch (state) {\n                        case 0: { stateString = \"clickToSend\"; break; }\n                        case 1: { stateString = \"queued\"; break; }\n                        case 2: { stateString = \"loaded\"; break; }\n                        case 3: { stateString = \"clearing\"; break; }\n                        case -1: { stateString = \"fail\"; break; }\n                        default: { node.error(\"unknown button state \" + state + \" \") }\n                        case false: { stateString = \"tableError\"; break }\n                    }\n                    //node.warn({stateStringSetTo:stateString});\n                    return stateString;\n                },\n                getStateInt(stateString) {\n                    var state;\n                    switch (stateString) {\n                        case \"clickToSend\": { state = 0; break; }\n                        case \"queued\": { state = 1; break; }\n                        case \"loaded\": { state = 2; break; }\n                        case \"clearing\": { state = 3; break; }\n                        case \"fail\": { state = -1; break; }\n                        default: { node.error(\"unknown button state \" + state + \" \") }\n                        case \"tableError\": { state = false; break; }\n                    }\n                    //node.warn({ stateIntSetTo: state });\n                    return state;\n                },\n\n\n\n                /** \n                 * @param {(-1|\"fail\"|0|\"clickToSend\"|1|\"queued\"|2|\"loaded\"|3|\"clearing\")} state state to set\n                 * @param {string} fieldName name of the button to affect, like \"sendToPressa1\"\n                 * @param {object} reference to the row to edit, must have a fieldName button.\n                */\n                \"setStateInRow\": function setStateInRow(state, fieldName, rowRef) {\n                    if (arguments.length != setStateInRow.length) throw new SyntaxError(\"missing args\");\n                    var stateString = state;\n                    if (typeof (state) == \"string\")\n                        state = this.getStateInt(state);\n                    else\n                        stateString = this.getStateString(state);\n                    //node.warn({f:\"setStateInRow\",params:{state:state,fieldName:fieldName,rowRef:rowRef,stateString:stateString}});\n\n                    if (!rowRef.hasOwnProperty(fieldName) || !this.states.hasOwnProperty(stateString)) {\n                        node.error(\"no \" + fieldName + \" button or unknown state \" + stateString)\n                        stateString = \"tableError\";\n                        state = this.getStateInt(stateString);\n                    }\n                    rowRef[fieldName] = this.states[stateString];\n                    rowRef[fieldName + \"State\"] = state;\n                    //node.warn({applied:state,toBtn:fieldName,inRow:rowRef});\n                    return;\n                },\n                setSingleState(state, fieldName, rowRef) {\n                    return this.setStateInRow(state, fieldName, rowRef);\n                },\n\n                /* not working\n                setStateInTable(state, fieldName, rowRef, tableRef) {\n                    var stateString = state;\n                    if (typeof (state) == \"string\")\n                        state = this.getStateInt(state);\n                    else\n                        stateString = this.getStateString(state);\n                    \n                    switch(stateString){\n                        case \"clickToSend\": {\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                        //there can only be 1 per column\n                        case \"queued\":{\n                            for(let row of tableRef){\n                                if(row.rowId!=rowRef.rowId){\n                                    //queued -> clickToSend\n                                    if(row[fieldName+\"State\"] == 1) \n                                        this.setStateInRow(0,fieldName,rowRef);\n                                    //loaded -> clearing\n                                    else if(row[fieldName+\"State\"] == 2)\n                                        this.setStateInRow(3,fieldName,rowRef);\n                                }\n                            }\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                        //there can only be 1 per column\n                        case \"loaded\":{\n                            for(let row of tableRef){\n                                if (row.rowId != rowRef.rowId) {\n                                    //loaded || clearing -> clickToSend\n                                    if(row[fieldName+\"State\"] == 2 || row[fieldName+\"State\"] == 3) \n                                        this.setStateInRow(0,fieldName,rowRef);\n                                }\n                            }\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                        case \"clearing\":{\n                            this.setStateInRow(state, fieldName, rowRef);\n                            break;\n                        }\n                    }\n                    return;\n                },\n                */\n\n\n                /**\n                 * true if referenced press is currently loaded into the plc\n                 * @param {string} fieldName name of the button to affect, like \"sendToPressa1\"\n                 * @param {object} reference to the row to check, must have a fieldName button.\n                */\n                isLoaded(fieldName, rowRef) { //true se questa riga è attualmente caricata nel plc\n                    let stateString = this.getStateString(rowRef[fieldName + \"State\"]);\n                    return (stateString == \"clearing\" || stateString == \"loaded\");\n                }\n            },\n\n            newRow(rowId) {\n                var row = {\n                    rowId: rowId,\n                    deleteButton: \"<center><i class='fa fa-trash-o' ></i></center>\",\n                    id: \"\",\n                    quantToDo: 1,\n                    quantProd: 0,\n                    progress: this.quantProd / this.quantToDo,\n                    note: \"\"\n                    //sendToPressa1,2,3.. :\n                    //sendToPressa1(2,3..)State: 0 (click2Send) | 1 (sentAndOk) | -1 (loading?)\n                }\n\n                let presse = [\"Pressa1\", \"Pressa2\", \"Pressa3\", \"Pressa4\"];\n                for (let p of presse) {\n                    row[\"sendTo\" + p] = `<center>\n                    <span style=\"display:inline; \"><i class='fa fa-arrow-up' style=\"padding-right:5px;\"></i>load</span>\n                    <span style=\"display:none; \"><i class='fa fa-check' style=\"color:green;\"></i></span>\n                    <span style=\"display:none; \"><i class='fa fa-cross' style=\"color:red; padding-right:5px; \"></i> errore</span>\n                </center>`; //onCLick works\n                    row[\"sendTo\" + p + \"State\"] = null;\n                    this.sendToPressButton.setStateInRow(\"clickToSend\", \"sendTo\" + p, row);\n                }\n                return row;\n            }\n        },\n        history: {\n            newRow(rowId, doneByPressNum = 1) {\n                const dateObj = new Date();\n                let d = dateObj;\n                var row = {\n                    rowId: rowId, //hidden\n                    doneByPressNum: doneByPressNum,\n                    cycleNumber: 0,\n                    dateObj: new Date(),\n                    date: twoDigit(d.getDate()) + \".\" + twoDigit(1 + d.getMonth()) + \".\" + d.getFullYear(),\n                    time: twoDigit(d.getHours()) + \":\" + twoDigit(d.getMinutes()) + \":\" + twoDigit(d.getSeconds()),\n                    millis: Date.now(),\n                    id: \"\",\n                    quantProd: 0,\n                    note: \"\",\n                }\n\n                return row;\n            }\n        },\n        completed: {\n            newRow(rowId) {\n                const dateObj = new Date();\n                let d = dateObj;\n                var row = {\n                    rowId: rowId, //hidden\n                    //doneByPressNum: doneByPressNum, //hidden\n                    cycleNumber: 0,\n                    dateObj: new Date(),\n                    date: twoDigit(d.getDate()) + \".\" + twoDigit(1 + d.getMonth()) + \".\" + d.getFullYear(),\n                    time: twoDigit(d.getHours()) + \":\" + twoDigit(d.getMinutes()) + \":\" + twoDigit(d.getSeconds()),\n                    millis: Date.now(),\n                    id: \"\",\n                    quantProd: 0,\n                    quantToDo: 0,\n                    quantSumm: this.quantProd + \"/\" + this.quantToDo,\n                    note: \"\",\n                }\n\n                return row;\n            }\n        }\n\n    }\n\n\n    utils.wrapFunctions(def, \"[\" + thisClassName + \"]\");\n    flow.set(thisClassName, def);\n    node.send(def);\n    node.status({ fill: \"green\", text: Object.keys(def).join(' & ') });\n\n});\n\n\n\n/** @summary repeatedly tries to fetch all varNames with store.get().\n     *  @desc may be used with inverse parameters. Like (?...varNames, ?opts, cb). Supports (\"name\",\"name\",cb), (opts, cb) cases.\n        * @param {function} cb called once ALL globalName are defined\n        * @param {Object} opts object holding optional function params. can be omitted passing the first globalName instead.\n        * @param {number} opts.timeout ms delay after which stop trying and either call opts.errorCb() or log an error. defaults to 15000\n        * @param {number} opts.retryDelay ms between each attempt. defaults to 100\n        * @param {function} opts.errorCb function to call after timeout. defaults to falsy, logging a warning\n        * @param  {...any} varNames series of strings\n        */\nfunction callWhenDef(cb, opts, ...varNames) {\n    //check for argument reverse order -> //treat as (?...varNames, ?opts, cb) //easier to read\n    if (typeof (cb) == \"string\") // @ts-ignore //ignore type mismatch\n        var [cb, opts = {}, ...varNames] = [...arguments].reverse(); //\"var\",cb -> cb, \"var\"\n    //check for opts presence\n    if (typeof (opts) == \"string\")\n        varNames.push(opts);\n    let { timeout = 3000, retryDelay = 100, errorCb = null, ctx = \"global\" } = (typeof (opts) == \"string\" ? {} : (opts ?? {}));\n    var tout, intv, tmp;\n    //switch context to the one specified in ctx\n    var store = ctx === \"global\" ? global : ctx === \"flow\" ? flow : ctx === \"context\" ? context : (() => { node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']. passed \" + ctx + \" of type \" + typeof (ctx)); return global })();\n    //const store = function (c = ctx) { return {global:global, flow:flow, context:context}[c] ??  (()=>{ node.error(\"[callWhenDef] param opts.context must be a string among ['context','global','flow']\"); return global })() }\n    //detect and warn about \"return msg\" erroneous usage //(cb is not supposed to return anything)\n    let wrappedCb = () => tmp = cb() && (tmp ?? node.warn({ txt: \"[callWhenDef] detected possible typo, did you mean to use node.send(msg)?\", returned: tmp, args: arguments }))\n\n    //try immediately, before doing any work\n    if (varNames.every(name => store.get(name) !== undefined))\n        return wrappedCb()\n    //set timeout unless false or not specified\n    if (timeout) {\n        tout = setTimeout(() => {\n            clearInterval(intv);\n            errorCb ? errorCb(...arguments) : node.warn({ err: \"callWhenDef_Timeout\", arg: arguments, isDef: varNames.map(name => store.get(name) !== undefined) })\n        }, timeout);\n    }\n    //set store-checking interval\n    intv = setInterval(() => {\n        if (!varNames.every(name => store.get(name) !== undefined))\n            return\n        clearTimeout(tout);\n        clearInterval(intv);\n        wrappedCb();\n    }, retryDelay)\n}",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 225,
        "wires": [
            []
        ]
    },
    {
        "id": "891c7b3250aa152a",
        "type": "comment",
        "z": "2260f1f88d7c60bf",
        "g": "ee1fd54ec57a959c",
        "name": "set globals and utilities",
        "info": "tabUtils\n    ha funzioni comuni a tutte le tabelle,\n    in aggiunta a quelle specifiche per le singole.",
        "x": 305,
        "y": 180,
        "wires": []
    },
    {
        "id": "e198712935d863ce",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "ee1fd54ec57a959c",
        "name": "set flow.uiConfig",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "0fce669fac8b246c",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "ee1fd54ec57a959c",
        "name": "set flow.params",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 315,
        "wires": [
            []
        ]
    },
    {
        "id": "ceb2f1af58e4621a",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "g": "ee1fd54ec57a959c",
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "e198712935d863ce",
                "0fce669fac8b246c"
            ]
        ]
    },
    {
        "id": "81a49ecdc6eebfee",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "e64d1b9eb78e1d44",
        "group": "8c268b6bfa27c24a",
        "name": "popupRouter",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div style=\"display:none\">\n    <div note=\"[popupRouter] example content\">\n        <p>The number is</p>\n        <font color=\"{{((msg.payload || 0) % 2 === 0) ? 'green' : 'red'}}\">\n            {{(msg.payload || 0) % 2 === 0 ? 'even' : 'odd'}}\n        </font>\n    </div>\n    <script note=\"[popupRouter] create popup container\">\n        //create popup container\n        $(function () {\n            if(!window.popupRouter_InitCalled){\n                window.popupRouter_InitCalled = true;\n                pushFunctions(); //append utils and popup pseudo-classes to windows.functions \n\n                var popupCont = document.createElement(\"div\");\n                popupCont.classList.add(\"popup-container\");\n                popupCont.id = \"mainPopupContainer\";\n                \n\n                //document.getElementsByTagName(\"body\")[0].append(popupCont);\n                let mainSect = getMainSect();\n                mainSect.append(popupCont);\n                console.log(\"[popupRouter][init()] appended popupContainer to \", mainSect, popupCont);\n            }else{\n                console.log(\"[popupRouter][init()] skipping init (popupRouter_InitCalled is def)\");\n            }\n            \n\n            function getMainSect(){\n                var mainSect = null;\n                for(el of document.getElementsByTagName(\"md-content\")[0].children){\n                    if(/section/i.test(el.tagName)){\n                        mainSect = el;\n                        break;\n                    }\n                }\n                if(!mainSect)\n                    console.warn(\"getMainSect(): not found\",mainSect);\n                //mainSect === null ? console.warn(\"mainSect:\",mainSect) : console.log(\"mainSect:\",mainSect);\n                return mainSect;\n            }\n        });\n        \n        function pushFunctions(){\n            let root = window.functions ?? (window.functions = new Object());\n            //import some utils. //avoid overwriting\n            root.utils ??= {};\n            root.utils = mergeRec(root.utils ,{\n                /** recursively merge two Objects\n                    * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n                    * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n                    * - -res.a===main.a\n                    * - -res.c===sec.c\n                    * - -res.b!==sec.b2\n                    * @param {Object} main\n                    * @param {Object} sec */\n                \"mergeRec\":mergeRec,\n                /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n                     * @param {any} value accepts anything\n                     * @returns {boolean}\n                     *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n                     */\n                \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n                    return !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n                        // it has a prototype that's also truthy\n                        !!(value = Object.getPrototypeOf(value)) &&\n                        // which has `null` as parent prototype\n                        !Object.getPrototypeOf(value);\n                },\n                /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n                 *      skip non-function, assign wrapped to their original key\n                 *  @param root {Object} the object to parse for functions\n                 *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n                \"wrapFunctions\": function wrapFunctions(root, prefix) {\n                    prefix ?? console.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n                    const isPlainObj = this.isPlainObj;\n                    //recursively parse root\n                    //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n                    let desc;\n                    for (let k in root) {\n                        if (isPlainObj(root[k]))\n                            root[k] = wrapFunctions.call(this, root[k], prefix + `.${k}`);\n                        else if (//is a simple function, or an arrow function\n                            //value of root[k] has type function\n                            typeof (root[k]) == \"function\"\n                            //root[k] itself is a function, not the result of it's getter call\n                            && (desc = Object.getOwnPropertyDescriptor(root, k)).value !== undefined    // @ts-ignore\n                            && !desc.get\n                        ) {\n                            //wrap in an exception catching function\n                            //trace errors back to their source, independently of the caller\n                            let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                            root[k] = function (...args) {\n                                try {\n                                    return cb.call(this, ...args)\n                                } catch (e) {\n                                    e.nrStack = (e.nrStack ?? []);\n                                    e.nrStack.push({ summ: `at ${k}(${args.join(\", \")}) of ${prefix}`, fName: k, args: args, root: prefix, err: e.message, e: e });\n                                    e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                                    //console.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                                    throw e;\n                                }\n                            }\n                        }\n                    }\n                    return root;\n                }.bind(root.utils),\n                \"fromHtml\":function fromHtml(html, appendTo=document){\n                    if(arguments.length != fromHtml.length) throw new Error(\"arg length mismatch. \"+arguments.length+\"/\"+fromHtml.length);\n                    let factory = document.createElement(\"div\");\n                    // if(!factory){\n                    //     factory=document.createElement(\"div\");\n                    //     factory.id = \"htmlFactory\";\n                    //     factory.style.display = \"none\";\n                    //     factory.position = \"absolute\";\n                    //     document.lastElementChild.append(factory);\n                    // }\n                    factory.innerHTML = html;\n                    if(factory.children.length > 1)\n                        console.error(\"[<globFuncs>.utils.fromHtml()] more than 1 element created, when only the first will be returned.\",arguments,\"\\n->\",factory.children,);\n                    return factory.firstElementChild ?? console.error(\"[<globFuncs>.utils.fromHtml()] nothing created. returned null\",arguments);\n                },\n                /** some characters do not have an uppercase equivalent. They are considered to be lowercase by this func */\n                \"isLowerCase\":function isLowerCase(ch=null){\n                    return ch!==null && ch == ch?.toLowerCase?.();\n                }\n            });\n            //root.utils.wrapFunctions(root.utils,\"[<globFuncs>.utils]\");\n            //popup-specific functions\n            root.popup = {};\n            root.popup = root.utils.mergeRec(root.popup, {\n                \"getTemplate\":function getTemplate(type=\"info\",text=\"\"){\n                    const utils = window.functions.utils;\n                    if(!utils.isLowerCase(type?.[0]))\n                        type = type.toLowerCase();\n                    switch(type){\n                        default:{ console.warn(\"[<globFuncs>.utils] getTemplate(): invalid type \",type, \".used info\"); }\n                        case \"std\":\n                        case \"info\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"err\":\n                        case \"error\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup error\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"warn\":\n                        case \"warning\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup warning\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                    }\n                    \n                },\n                \"push\": function push(popup){\n                    document.getElementById(\"mainPopupContainer\").prepend(popup);\n                    return popup;\n                }.bind(root.popup),\n                \"popOlder\": function pop(){\n                    let cont = document.getElementById(\"mainPopupContainer\");\n                    var removed = cont.lastElementChild;\n                    if(cont.children.length)\n                        cont.lastElementChild?.remove?.();\n                    return removed;\n                },\n                \"show\":function show(type=\"info\",content=\"\",selfCloseMs=null, dismissable = true){\n                    const utils = window.functions.utils;\n                    var pUpClass = this;\n                    var popup = this.getTemplate(type, content);\n                    if(selfCloseMs !== null){\n                        setTimeout(()=>{\n                            for(var el of document.getElementById(\"mainPopupContainer\").children){\n                                if(el === popup){\n                                    el.remove();\n                                    console.log(\"removed \",el);\n                                }\n                            }\n                            console.warn(\"no popup matched with \",popup, \" after the timeout\");\n                        },selfCloseMs)\n                    }\n                    if(dismissable){\n                        popup.onclick = function (){\n                            console.log(\"clicked\",this);\n                            this.remove();\n                        }\n                    }\n                    this.push(popup);\n                }.bind(root.popup),\n                \"showTitled\":function showTitled(type=\"info\",title=\"\",txt=\"\",selfCloseMs=null, dismissable = true){\n                    this.show(type,`\n                    <span style=\"font-size:1.3em\">${title}</span>\n                    <div>${txt}</div>\n                    `,selfCloseMs, dismissable);\n                }.bind(root.popup),\n            });\n            //root.utils.wrapFunctions(root.popup,\"[<globFuncs>.popup]\");\n        }\n\n\n        /**\n        * @summary recursively merge two Objects\n            * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n            * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n            * - -res.a===main.a\n            * - -res.c===sec.c\n            * - -res.b!==sec.b2\n            * @param {Object} main \n            * @param {Object} sec */\n        function mergeRec(main, sec) {\n            for (let p in sec) {\n                //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n                //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n                if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                    thisFun(main[p], sec[p]);\n                else\n                    main[p] = sec[p];\n            }\n            return main;\n        }\n\n    </script>\n    <style note=\"[popupRouter]\">\n        .popupRouter-card {\n            border: 1px solid green;\n            display:none;\n        }\n\n        .popupPusher {\n            border: 1px solid green;\n            display:none;\n        }\n        .popupPusher-card {\n            border: 1px solid green;\n            display:none;\n        }\n    \n        .popup-container {\n            /*border: 1px solid green;*/\n            width: max(30vw,600px);\n            position: fixed;\n            right:2vw;\n            padding-top: 0.3em;\n        }\n        \n        .popup-container .roundPopup {\n            text-align: left;\n            padding: 0.3em 1.5em;\n            margin-bottom: 1vh;\n            border: 3px solid gray;\n            border-radius: 10px;\n            background-color: rgb(243 243 243 / 100%); /* light gray */\n            color:#19196F;\n            width: fit-content;\n            margin-left: auto;\n            margin-right: 0;\n        }\n\n        .popup-container .roundPopup:hover {\n            background-color:#caeeff; /* light light blue */\n        }\n\n        .popup-container .roundPopup hr {\n            margin-left:-1.5em;\n            margin-right:-1.5em;\n        }\n\n        .popup-container .warning {\n            border-color: sandybrown;\n            background-color: lemonchiffon\n        }\n\n        .popup-container .error {\n            border-color: crimson;\n            background-color: #ffc0c0;\n        }\n    </style>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupRouter-card",
        "x": 1295,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "c6847b06e1ed6fcb",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "e64d1b9eb78e1d44",
        "group": "8c268b6bfa27c24a",
        "name": "popup",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.show(\n                \"error\",\n                `operazione non permessa.\n                <br>Non è possibile modificare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                null,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1280,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "7652703d56dd1baf",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "e64d1b9eb78e1d44",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1135,
        "y": 270,
        "wires": [
            [
                "c6847b06e1ed6fcb"
            ]
        ]
    },
    {
        "id": "8b2375c11c170ba7",
        "type": "inject",
        "z": "2260f1f88d7c60bf",
        "g": "e64d1b9eb78e1d44",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1135,
        "y": 315,
        "wires": [
            [
                "b0b63f27328cd857"
            ]
        ]
    },
    {
        "id": "b0b63f27328cd857",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "g": "e64d1b9eb78e1d44",
        "group": "8c268b6bfa27c24a",
        "name": "popup error: cannot edit while loaded",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Attenzione\",\n                `Non è possibile modificare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                null,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1380,
        "y": 315,
        "wires": [
            []
        ]
    },
    {
        "id": "8e41af32d0466377",
        "type": "switch",
        "z": "2260f1f88d7c60bf",
        "name": "popupId",
        "property": "popupId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "deleteDenied_inUse",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "editDenied_inUse",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "editDenied_dupId",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1325,
        "y": 2235,
        "wires": [
            [
                "179f88f4f12b55bb"
            ],
            [
                "279e1a725c8052f5"
            ],
            [
                "6bd5b24222082719"
            ],
            [
                "765efb76dc0d7fc3"
            ]
        ]
    },
    {
        "id": "179f88f4f12b55bb",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "group": "8c268b6bfa27c24a",
        "name": "popup error 7s: cannot delete while loaded",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Attenzione\",\n                `Non è possibile eliminare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1590,
        "y": 2190,
        "wires": [
            []
        ]
    },
    {
        "id": "279e1a725c8052f5",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "group": "8c268b6bfa27c24a",
        "name": "popup error 7s: cannot edit while loaded",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Attenzione\",\n                `Non è possibile modificare un ordine mentre quest'ultimo è caricato od in produzione.`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1580,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "6bd5b24222082719",
        "type": "ui_template",
        "z": "2260f1f88d7c60bf",
        "d": true,
        "group": "8c268b6bfa27c24a",
        "name": "popup error 7s: duplicate id",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"error\",\n                \"Id ordine non valido\",\n                `Esiste già un ordine che riporta l'id ${msg?.payload?.[msg.topic] ?? \"specificato\"}.\n                <br>Gli id devono essere unici per poter essere inseriti nel database di riferimento.`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1550,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "765efb76dc0d7fc3",
        "type": "function",
        "z": "2260f1f88d7c60bf",
        "name": "error",
        "func": "node.error({ err: \"unknown or missing popupId\", popupId: msg.popupId,fullMsg:msg});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "a848fb1dfb6e367c",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "a2dc8e5cbc92778b",
        "name": "",
        "order": 11,
        "width": 9,
        "height": 1,
        "format": "\n<div style=\"width=100%\">\n    <input size:\"3\" name=\"tempPianoSup_min\" type=\"number\" step=\"1\" /></span>\n    <span style=\"width:100px\"> Range Indicatore Temperatura </span>\n    <span style=\"width:6ch\"><input name=\"tempPianoSup_max\" type=\"number\" step=\"1\" /></span>\n</div>\n\n<script>\n    var value = \"hello world\";\n    // or overwrite value in your callback function ...\n    this.scope.action = function() { return value; }\n</script>\n<md-button ng-click=\"send({payload:action()})\">\n    Click me to send a hello world\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 705,
        "y": 750,
        "wires": [
            []
        ]
    },
    {
        "id": "2f5d29d0bad75108",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "OnStartup0.1:   1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 535,
        "y": 750,
        "wires": [
            [
                "a848fb1dfb6e367c"
            ]
        ]
    },
    {
        "id": "7cd8c0db07ed6353",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "a2dc8e5cbc92778b",
        "name": "popup",
        "order": 1,
        "width": 9,
        "height": 1,
        "format": "<style>\n    .popup\n    {   width:200px;\n        heigth:100px;\n        border:1px solid red;\n        position:absolute;\n        top:1000px;\n        left:100px;\n        display:block;\n    }\n</style>\n<script>\n    var intervalSet;\n    if(intervalSet !== undefined){\n        intervalSet=true;\n        setInterval(()=>{\n            let el=document.getElementById(\"popup\");\n            if(el){\n                if(el.style.display==\"none\")\n                    el.style.display=\"block\";\n                else\n                    el.style.display=\"none\";\n                console.log(\"blinked\");\n            }\n            else\n                console.log(\"blink: el not found\");\n        },2000);\n    }\n</script>\n<div class=\"popup\" id=\"popup\" class=\"popup\">\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 625,
        "y": 795,
        "wires": [
            []
        ]
    },
    {
        "id": "b8bf553ba73175d1",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf",
                "pt": "global",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "062ce81d525ecefe",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata",
                "pt": "global",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 195,
        "wires": [
            []
        ]
    },
    {
        "id": "807df9d04afae599",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 575,
        "y": 195,
        "wires": [
            [
                "062ce81d525ecefe"
            ]
        ],
        "l": false
    },
    {
        "id": "1fb7b9a01b31b648",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 575,
        "y": 240,
        "wires": [
            [
                "b8bf553ba73175d1"
            ]
        ],
        "l": false
    },
    {
        "id": "52bbb0087db3d190",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 1830,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "5f47847d258d5819",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "d6dcf6dea0234745",
        "name": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .tempPianoInf_colorPicker {\n        border: 2px solid yellow;\n    }\n    .hideMe {\n        display:none;\n        border: 2px solid red;\n    }\n    \n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 720,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "35882cd26eff49ba",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "db63de8125d253b0",
        "name": "test",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<script>\n    \n    $(document).ready(()=>{\n        var el=document.getElementById(\"thisDiv\").parentElement;\n        console.log(\"running over\",el);\n        \n        while(el && el.children[0] && el.children[0].children[0] && el.children[0].children[0].tagName != \"MD-SELECT\" ){\n            //el = el.previousElementSibling;\n        }\n        if(el===null)\n            throw new Exception(\"reachedRootWithoutFindingElement\");\n        \n        \n        //el.ng-change=\"alert('ohohooh')\";\n        console.log(\"edited\",el);\n        \n    });\n    /*\n     */\n</script>\n<div id=\"thisDiv\">\n    \n    <input type=\"button\" name=\"buttName\" value=\"clickMe\" onClick=\"toggleColors(this.parentElement.parentElement.parentElement);console.log(this.parentElement.parentElement);\"/>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "f87673eb1dbca407",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "d": true,
        "group": "db63de8125d253b0",
        "name": "",
        "order": 11,
        "width": 0,
        "height": 0,
        "format": "<div id=\"thisDiv\">\n    <script>\n        function toggleColors(rootElement){\n            const matches=rootElement.getElementsByClassName(\"tempPianoInf_colorPicker\");\n            console.log(\"elsByClass:\",matches);\n            for (let i = 0; i < matches.length; i++) {\n                matches[i].classList.toggle('hideMe');\n            }\n        }\n    </script>\n    <input type=\"button\" name=\"buttName\" value=\"clickMe\" onClick=\"toggleColors(this.parentElement.parentElement.parentElement);console.log(this.parentElement.parentElement);\"/>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 705,
        "y": 1845,
        "wires": [
            []
        ]
    },
    {
        "id": "ec91820d6fb68309",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_c1",
        "label": "",
        "group": "d6dcf6dea0234745",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 780,
        "y": 2175,
        "wires": [
            [
                "17bcd0430dc5cf65"
            ]
        ]
    },
    {
        "id": "74a2e3418b515508",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_min",
        "label": "",
        "tooltip": "il valore minimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "d6dcf6dea0234745",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 730,
        "y": 1950,
        "wires": [
            [
                "bdf219b2feda1c1f"
            ]
        ]
    },
    {
        "id": "f48ddc499cd108c3",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "d6dcf6dea0234745",
        "name": "\"range\"",
        "order": 2,
        "width": 5,
        "height": 1,
        "format": "<span><center> range </center></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 700,
        "y": 1995,
        "wires": [
            []
        ]
    },
    {
        "id": "45ba0fddc88027bb",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_max",
        "label": "",
        "tooltip": "il valore massimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "d6dcf6dea0234745",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 740,
        "y": 2040,
        "wires": [
            [
                "d99e893985e9f5d2"
            ]
        ]
    },
    {
        "id": "31ec72e69c36084a",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.min",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1245,
        "y": 1950,
        "wires": [
            []
        ]
    },
    {
        "id": "3f49c884e0dbfced",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.max",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1265,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "bdf219b2feda1c1f",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1050,
        "y": 1950,
        "wires": [
            [
                "31ec72e69c36084a"
            ]
        ],
        "l": false
    },
    {
        "id": "d99e893985e9f5d2",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1070,
        "y": 2040,
        "wires": [
            [
                "3f49c884e0dbfced"
            ]
        ],
        "l": false
    },
    {
        "id": "1994f8c9154c9e8a",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_c2",
        "label": "",
        "group": "d6dcf6dea0234745",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 825,
        "y": 2220,
        "wires": [
            [
                "8b37906492021e10"
            ]
        ]
    },
    {
        "id": "c79684d488633046",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_c3",
        "label": "",
        "group": "d6dcf6dea0234745",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 885,
        "y": 2265,
        "wires": [
            [
                "c2b538893ffd00f8"
            ]
        ]
    },
    {
        "id": "3a81f68796ed1918",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1095,
        "y": 2175,
        "wires": [
            [
                "9b820c04588a3822",
                "f5c381b5ec72eda4"
            ]
        ],
        "l": false
    },
    {
        "id": "9b820c04588a3822",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.c1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 2175,
        "wires": [
            []
        ]
    },
    {
        "id": "d42e3781f0fd7e8d",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.c2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1315,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "5b4d84e74392cf04",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1130,
        "y": 2220,
        "wires": [
            [
                "d42e3781f0fd7e8d",
                "f5c381b5ec72eda4"
            ]
        ],
        "l": false
    },
    {
        "id": "d23ff2ec027956a6",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.c3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1375,
        "y": 2265,
        "wires": [
            []
        ]
    },
    {
        "id": "21e2596c2a03ef6a",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1190,
        "y": 2265,
        "wires": [
            [
                "d23ff2ec027956a6",
                "f5c381b5ec72eda4"
            ]
        ],
        "l": false
    },
    {
        "id": "59c6ba56962ade0d",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1950,
        "wires": [
            [
                "74a2e3418b515508"
            ]
        ],
        "l": false
    },
    {
        "id": "202ce5143dd1d07e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2040,
        "wires": [
            [
                "45ba0fddc88027bb"
            ]
        ],
        "l": false
    },
    {
        "id": "77beb92da2a36325",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2175,
        "wires": [
            [
                "ec91820d6fb68309"
            ]
        ],
        "l": false
    },
    {
        "id": "bfc9a3fa042faef6",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2220,
        "wires": [
            [
                "1994f8c9154c9e8a"
            ]
        ],
        "l": false
    },
    {
        "id": "19ac6cb7de7ffdcd",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c3",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2265,
        "wires": [
            [
                "c79684d488633046"
            ]
        ],
        "l": false
    },
    {
        "id": "29e4829ae591da51",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "to config.pressPressata",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.pressPressata",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 2070,
        "wires": [
            [
                "59c6ba56962ade0d",
                "202ce5143dd1d07e",
                "77beb92da2a36325",
                "bfc9a3fa042faef6",
                "19ac6cb7de7ffdcd",
                "90e1d64a5b12c045"
            ]
        ]
    },
    {
        "id": "2b2c25ba59229fe0",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "config.jsonRead_in",
        "links": [
            "afddbb067e0f39ac",
            "d7627910a57b0358",
            "69295ced8ddc4e81"
        ],
        "x": 210,
        "y": 2070,
        "wires": [
            [
                "29e4829ae591da51"
            ]
        ]
    },
    {
        "id": "c3cc6f3c39a2375d",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1070,
        "y": 2130,
        "wires": [
            [
                "4c9195b824a1b917"
            ]
        ],
        "l": false
    },
    {
        "id": "4c9195b824a1b917",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.pressPressata.copyColors",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1275,
        "y": 2130,
        "wires": [
            []
        ]
    },
    {
        "id": "20f17d1127f00b9e",
        "type": "ui_dropdown",
        "z": "69a590bb3eaafea5",
        "name": "pressPressata_copyColors",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "d6dcf6dea0234745",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "manuale",
                "value": false,
                "type": "bool"
            },
            {
                "label": "ind. temperatura piano superiore",
                "value": "tempPianoSup",
                "type": "str"
            },
            {
                "label": "ind. temperatura piano inferiore",
                "value": "tempPianoInf",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 720,
        "y": 2130,
        "wires": [
            [
                "c3cc6f3c39a2375d"
            ]
        ]
    },
    {
        "id": "90e1d64a5b12c045",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.copyColors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2130,
        "wires": [
            [
                "20f17d1127f00b9e"
            ]
        ],
        "l": false
    },
    {
        "id": "473885989dad9f52",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoInf_c1",
        "label": "",
        "group": "db63de8125d253b0",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "tempPianoInf_colorPicker",
        "x": 770,
        "y": 1635,
        "wires": [
            [
                "75e56109a8a866c3"
            ]
        ]
    },
    {
        "id": "c604566eeb7fb13a",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoInf_min",
        "label": "",
        "tooltip": "il valore minimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "db63de8125d253b0",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 1380,
        "wires": [
            [
                "45c2b92b337111a5"
            ]
        ]
    },
    {
        "id": "8b17ae7bba194a73",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "db63de8125d253b0",
        "name": "\"range\"",
        "order": 2,
        "width": 5,
        "height": 1,
        "format": "<span><center> range </center></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 1425,
        "wires": [
            []
        ]
    },
    {
        "id": "d05462db58f73afc",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoInf_max",
        "label": "",
        "tooltip": "il valore massimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "db63de8125d253b0",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 1470,
        "wires": [
            [
                "a892984e29c66c6e"
            ]
        ]
    },
    {
        "id": "40899b323fee0b76",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.min",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1225,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "740551f4c9b7b080",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.max",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1245,
        "y": 1470,
        "wires": [
            []
        ]
    },
    {
        "id": "45c2b92b337111a5",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1040,
        "y": 1380,
        "wires": [
            [
                "40899b323fee0b76"
            ]
        ],
        "l": false
    },
    {
        "id": "a892984e29c66c6e",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1060,
        "y": 1470,
        "wires": [
            [
                "740551f4c9b7b080"
            ]
        ],
        "l": false
    },
    {
        "id": "b3e079038c25e0e5",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoInf_c2",
        "label": "",
        "group": "db63de8125d253b0",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "tempPianoInf_colorPicker",
        "x": 800,
        "y": 1680,
        "wires": [
            [
                "62683d69fe83fcf5"
            ]
        ]
    },
    {
        "id": "1a12b6a9508e8986",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoInf_c3",
        "label": "",
        "group": "db63de8125d253b0",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "tempPianoInf_colorPicker",
        "x": 860,
        "y": 1725,
        "wires": [
            [
                "d1287757094f792c"
            ]
        ]
    },
    {
        "id": "5c8d41d3de6d0758",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1085,
        "y": 1635,
        "wires": [
            [
                "90d15b938fe04887",
                "f9db0017c651a201"
            ]
        ],
        "l": false
    },
    {
        "id": "90d15b938fe04887",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.c1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 1635,
        "wires": [
            []
        ]
    },
    {
        "id": "06995737ec64c385",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.c2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1335,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "41ddef0483c1b0ec",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1120,
        "y": 1680,
        "wires": [
            [
                "06995737ec64c385",
                "f9db0017c651a201"
            ]
        ],
        "l": false
    },
    {
        "id": "7e216c6e08250db0",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.c3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1365,
        "y": 1725,
        "wires": [
            []
        ]
    },
    {
        "id": "12b581027f3896b9",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1180,
        "y": 1725,
        "wires": [
            [
                "7e216c6e08250db0",
                "f9db0017c651a201"
            ]
        ],
        "l": false
    },
    {
        "id": "330da2b395af8bff",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "to config.tempPianoInf",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.tempPianoInf",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1500,
        "wires": [
            [
                "9e853a8a40a0266b",
                "accbf4699d8ef89b",
                "6387af83fcfb06b4",
                "bc9cfcd5540d185e",
                "21ea61fe115983dc",
                "abc1f9e882824f5e"
            ]
        ]
    },
    {
        "id": "35b66a3ec499c665",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "config.jsonRead_in",
        "links": [
            "afddbb067e0f39ac",
            "d7627910a57b0358",
            "69295ced8ddc4e81"
        ],
        "x": 185,
        "y": 1500,
        "wires": [
            [
                "330da2b395af8bff"
            ]
        ]
    },
    {
        "id": "9e853a8a40a0266b",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1380,
        "wires": [
            [
                "c604566eeb7fb13a"
            ]
        ],
        "l": false
    },
    {
        "id": "accbf4699d8ef89b",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1470,
        "wires": [
            [
                "d05462db58f73afc"
            ]
        ],
        "l": false
    },
    {
        "id": "6387af83fcfb06b4",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1635,
        "wires": [
            [
                "473885989dad9f52"
            ]
        ],
        "l": false
    },
    {
        "id": "bc9cfcd5540d185e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1680,
        "wires": [
            [
                "b3e079038c25e0e5"
            ]
        ],
        "l": false
    },
    {
        "id": "21ea61fe115983dc",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c3",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1725,
        "wires": [
            [
                "1a12b6a9508e8986"
            ]
        ],
        "l": false
    },
    {
        "id": "ea34d947fd0cd8da",
        "type": "ui_dropdown",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoInf_copyColors",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "db63de8125d253b0",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "manuale",
                "value": false,
                "type": "bool"
            },
            {
                "label": "ind. temperatura piano superiore",
                "value": "tempPianoSup",
                "type": "str"
            },
            {
                "label": "ind. pressione di pressata",
                "value": "pressPressata",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 710,
        "y": 1575,
        "wires": [
            [
                "736f8d45954ec7e1"
            ]
        ]
    },
    {
        "id": "abc1f9e882824f5e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.copyColors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1575,
        "wires": [
            [
                "ea34d947fd0cd8da"
            ]
        ],
        "l": false
    },
    {
        "id": "736f8d45954ec7e1",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1070,
        "y": 1575,
        "wires": [
            [
                "d2696f5f5855db2e"
            ]
        ],
        "l": false
    },
    {
        "id": "d2696f5f5855db2e",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoInf.copyColors",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1275,
        "y": 1575,
        "wires": [
            []
        ]
    },
    {
        "id": "ae0f9ddcf0040d6a",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_c1",
        "label": "",
        "group": "a2dc8e5cbc92778b",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 885,
        "y": 1095,
        "wires": [
            [
                "97f5611b40d92575"
            ]
        ]
    },
    {
        "id": "040a66c23701faf9",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_min",
        "label": "",
        "tooltip": "il valore minimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "a2dc8e5cbc92778b",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 820,
        "y": 870,
        "wires": [
            [
                "1bd620f8fe2c32e3"
            ]
        ]
    },
    {
        "id": "612044f1c3a9a2bb",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "a2dc8e5cbc92778b",
        "name": "\"range\"",
        "order": 3,
        "width": 5,
        "height": 1,
        "format": "<span><center> range </center></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 915,
        "wires": [
            []
        ]
    },
    {
        "id": "20d2bfd30584b08e",
        "type": "ui_text_input",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_max",
        "label": "",
        "tooltip": "il valore massimo che utilizzerà l'indicatore di temperatura nella pagina di stato",
        "group": "a2dc8e5cbc92778b",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 830,
        "y": 960,
        "wires": [
            [
                "0dcb0f233cefc5df"
            ]
        ]
    },
    {
        "id": "0244195a5d53d85f",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.min",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1305,
        "y": 870,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "55eb6fd7125a5aaa",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.max",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1325,
        "y": 960,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "1bd620f8fe2c32e3",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1110,
        "y": 870,
        "wires": [
            [
                "0244195a5d53d85f"
            ]
        ],
        "l": false
    },
    {
        "id": "0dcb0f233cefc5df",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1130,
        "y": 960,
        "wires": [
            [
                "55eb6fd7125a5aaa"
            ]
        ],
        "l": false
    },
    {
        "id": "681fa14316ce9e62",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_c3",
        "label": "",
        "group": "a2dc8e5cbc92778b",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 10,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 975,
        "y": 1185,
        "wires": [
            [
                "395f419e9458085d"
            ]
        ]
    },
    {
        "id": "46b0cd793ac07399",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1160,
        "y": 1095,
        "wires": [
            [
                "ca7c13217c8a527d",
                "93cf5aa68bdd90b4"
            ]
        ],
        "l": false
    },
    {
        "id": "ca7c13217c8a527d",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.c1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1345,
        "y": 1095,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "37447a9eb7220bbd",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.c2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 1140,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "2176a8c51d7c26da",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1195,
        "y": 1140,
        "wires": [
            [
                "37447a9eb7220bbd",
                "93cf5aa68bdd90b4"
            ]
        ],
        "l": false
    },
    {
        "id": "1a4ff677fdd5bfbd",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.c3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1185,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "718c58ef61374d5c",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1255,
        "y": 1185,
        "wires": [
            [
                "1a4ff677fdd5bfbd",
                "93cf5aa68bdd90b4"
            ]
        ],
        "l": false
    },
    {
        "id": "89b937e2a293b78b",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "d": true,
        "name": "config.jsonRead_in",
        "links": [
            "afddbb067e0f39ac",
            "d7627910a57b0358",
            "69295ced8ddc4e81"
        ],
        "x": 295,
        "y": 990,
        "wires": [
            [
                "351eace510045898"
            ]
        ]
    },
    {
        "id": "355ecfb91b388592",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 870,
        "wires": [
            [
                "040a66c23701faf9"
            ]
        ],
        "l": false
    },
    {
        "id": "351eace510045898",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "to config.tempPianoSup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config.tempPianoSup",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 990,
        "wires": [
            [
                "355ecfb91b388592",
                "fe73029cde7530a1",
                "f5c3c29198dd6e9b",
                "50b06c2e2b28d6d7",
                "db72940507b1c735",
                "8af9fc16a604bf70"
            ]
        ]
    },
    {
        "id": "fe73029cde7530a1",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 960,
        "wires": [
            [
                "20d2bfd30584b08e"
            ]
        ],
        "l": false
    },
    {
        "id": "f5c3c29198dd6e9b",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1095,
        "wires": [
            [
                "ae0f9ddcf0040d6a"
            ]
        ],
        "l": false
    },
    {
        "id": "50b06c2e2b28d6d7",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1140,
        "wires": [
            [
                "48f107e3f14f3950"
            ]
        ],
        "l": false
    },
    {
        "id": "db72940507b1c735",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.c3",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1185,
        "wires": [
            [
                "681fa14316ce9e62"
            ]
        ],
        "l": false
    },
    {
        "id": "2f59f19e65d77665",
        "type": "ui_dropdown",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_copyColors",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a2dc8e5cbc92778b",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "manuale",
                "value": false,
                "type": "bool"
            },
            {
                "label": "ind. temperatura piano inferiore",
                "value": "tempPianoInf",
                "type": "str"
            },
            {
                "label": "ind. pressione di pressata",
                "value": "pressPressata",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 825,
        "y": 1050,
        "wires": [
            [
                "7b018344d7ced409"
            ]
        ]
    },
    {
        "id": "8af9fc16a604bf70",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.copyColors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 1050,
        "wires": [
            [
                "2f59f19e65d77665"
            ]
        ],
        "l": false
    },
    {
        "id": "7b018344d7ced409",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1145,
        "y": 1050,
        "wires": [
            [
                "fc480e83d8d666c0"
            ]
        ],
        "l": false
    },
    {
        "id": "fc480e83d8d666c0",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config.tempPianoSup.copyColors",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 1050,
        "wires": [
            [
                "749598853168b6d8"
            ]
        ]
    },
    {
        "id": "6c7bf597c254ff15",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "name": "link out 10",
        "mode": "link",
        "links": [],
        "x": 1680,
        "y": 1005,
        "wires": []
    },
    {
        "id": "749598853168b6d8",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1620,
        "y": 1005,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "48f107e3f14f3950",
        "type": "ui_colour_picker",
        "z": "69a590bb3eaafea5",
        "name": "tempPianoSup_c2",
        "label": "",
        "group": "a2dc8e5cbc92778b",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": true,
        "showValue": true,
        "showHue": true,
        "showAlpha": false,
        "showLightness": false,
        "square": "true",
        "dynOutput": "false",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 915,
        "y": 1140,
        "wires": [
            [
                "88f369def95315f7"
            ]
        ]
    },
    {
        "id": "e3696b26fb98fd8f",
        "type": "complete",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "b45e5b597df321ef",
        "name": "",
        "scope": [
            "40899b323fee0b76",
            "740551f4c9b7b080",
            "90d15b938fe04887",
            "06995737ec64c385",
            "7e216c6e08250db0",
            "31ec72e69c36084a",
            "3f49c884e0dbfced",
            "9b820c04588a3822",
            "d42e3781f0fd7e8d",
            "d23ff2ec027956a6",
            "d2696f5f5855db2e",
            "4c9195b824a1b917",
            "0244195a5d53d85f",
            "55eb6fd7125a5aaa",
            "ca7c13217c8a527d",
            "37447a9eb7220bbd",
            "1a4ff677fdd5bfbd",
            "fc480e83d8d666c0"
        ],
        "uncaught": false,
        "x": 310,
        "y": 520,
        "wires": [
            [
                "5f0e4cd2a231d950"
            ]
        ]
    },
    {
        "id": "c738458e2f0166fd",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "poll 1.5s global.config",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 385,
        "y": 550,
        "wires": [
            [
                "a79139d6fa8686e2"
            ]
        ]
    },
    {
        "id": "a79139d6fa8686e2",
        "type": "rbe",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 525,
        "y": 550,
        "wires": [
            [
                "47787bd5c3f095c5",
                "d552f3455898102d",
                "34b28815286f8381"
            ]
        ],
        "l": false
    },
    {
        "id": "47787bd5c3f095c5",
        "type": "json",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 605,
        "y": 535,
        "wires": [
            [
                "cd632756435b2754"
            ]
        ],
        "l": false
    },
    {
        "id": "cd632756435b2754",
        "type": "file",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "filename": ".\\uiConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 535,
        "wires": [
            [
                "0c1c5418ae454848"
            ]
        ]
    },
    {
        "id": "9aac6231207dd902",
        "type": "file in",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "filename": ".\\uiConfig.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 540,
        "y": 440,
        "wires": [
            [
                "711adcc293c4fe4e"
            ]
        ]
    },
    {
        "id": "27b14ed1b833f3fa",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "9aac6231207dd902"
            ]
        ]
    },
    {
        "id": "711adcc293c4fe4e",
        "type": "json",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 655,
        "y": 440,
        "wires": [
            [
                "16a57738beed3d92"
            ]
        ],
        "l": false
    },
    {
        "id": "16a57738beed3d92",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 440,
        "wires": [
            [
                "ef9feb95d1f12a3a",
                "afddbb067e0f39ac"
            ]
        ]
    },
    {
        "id": "0c1c5418ae454848",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "written settings",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 915,
        "y": 535,
        "wires": []
    },
    {
        "id": "afddbb067e0f39ac",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "config.jsonRead_out",
        "mode": "link",
        "links": [
            "89b937e2a293b78b",
            "346806aac61025dc",
            "35b66a3ec499c665",
            "2b2c25ba59229fe0"
        ],
        "x": 915,
        "y": 440,
        "wires": []
    },
    {
        "id": "d552f3455898102d",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "OnConfigUpdate_out",
        "mode": "link",
        "links": [
            "019724bd0407040d",
            "7a56c04c308a37eb",
            "0be9e347c272ebc7",
            "382b9ee86b061715",
            "2829a11cc5455212",
            "c7f4104b21b3f0ed",
            "4f4965017bd78144",
            "79329d19f997f71e",
            "dcfdd404535dc654",
            "23fa7a8de9d4b748",
            "71cdad2935eab809",
            "a3c95a133003aada",
            "736f1d79123164d5",
            "93745921a000afa6",
            "6a909b80fd1cfba9",
            "f352e5b1b926013a"
        ],
        "x": 690,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "5f0e4cd2a231d950",
        "type": "change",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "b45e5b597df321ef",
        "name": "get config",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "config",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 520,
        "wires": [
            [
                "47787bd5c3f095c5",
                "d552f3455898102d"
            ]
        ]
    },
    {
        "id": "5d4297555cadcdff",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "send",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 430,
        "y": 580,
        "wires": [
            [
                "d552f3455898102d"
            ]
        ]
    },
    {
        "id": "11ffda579a2d7473",
        "type": "complete",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "b45e5b597df321ef",
        "name": "OnConfigUpdate",
        "scope": [
            "16a57738beed3d92",
            "47787bd5c3f095c5"
        ],
        "uncaught": false,
        "x": 480,
        "y": 625,
        "wires": [
            [
                "11d636077cbd1545"
            ]
        ]
    },
    {
        "id": "11d636077cbd1545",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "d": true,
        "g": "b45e5b597df321ef",
        "name": "OnConfigUpdateEvent_out",
        "mode": "link",
        "links": [],
        "x": 710,
        "y": 625,
        "wires": [],
        "l": true
    },
    {
        "id": "ef9feb95d1f12a3a",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "read settings",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 470,
        "wires": []
    },
    {
        "id": "65449a11e08aa594",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "3a3a52a5dbc9568a",
        "name": "bugFix",
        "func": "//somehow colors hex string looses the leading \"#\"\n\nif(typeof msg.payload==\"string\" && /^#/.test(msg.payload) != true)\n    msg.payload=\"#\" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 945,
        "y": 765,
        "wires": [
            [
                "1f1ff5e26b2ddf38"
            ]
        ]
    },
    {
        "id": "5848c5489be4b695",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "g": "3a3a52a5dbc9568a",
        "name": "bugFix",
        "links": [],
        "x": 840,
        "y": 765,
        "wires": [
            [
                "65449a11e08aa594"
            ]
        ]
    },
    {
        "id": "1f1ff5e26b2ddf38",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "g": "3a3a52a5dbc9568a",
        "name": "bugFix_out",
        "mode": "return",
        "links": [],
        "x": 1050,
        "y": 765,
        "wires": []
    },
    {
        "id": "97f5611b40d92575",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1055,
        "y": 1095,
        "wires": [
            [
                "46b0cd793ac07399"
            ]
        ]
    },
    {
        "id": "88f369def95315f7",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1085,
        "y": 1140,
        "wires": [
            [
                "2176a8c51d7c26da"
            ]
        ]
    },
    {
        "id": "395f419e9458085d",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1160,
        "y": 1185,
        "wires": [
            [
                "718c58ef61374d5c"
            ]
        ]
    },
    {
        "id": "75e56109a8a866c3",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 950,
        "y": 1635,
        "wires": [
            [
                "5c8d41d3de6d0758"
            ]
        ]
    },
    {
        "id": "62683d69fe83fcf5",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 995,
        "y": 1680,
        "wires": [
            [
                "41ddef0483c1b0ec"
            ]
        ]
    },
    {
        "id": "d1287757094f792c",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1040,
        "y": 1725,
        "wires": [
            [
                "12b581027f3896b9"
            ]
        ]
    },
    {
        "id": "17bcd0430dc5cf65",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 990,
        "y": 2175,
        "wires": [
            [
                "3a81f68796ed1918"
            ]
        ]
    },
    {
        "id": "8b37906492021e10",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1020,
        "y": 2220,
        "wires": [
            [
                "5b4d84e74392cf04"
            ]
        ]
    },
    {
        "id": "c2b538893ffd00f8",
        "type": "link call",
        "z": "69a590bb3eaafea5",
        "name": "",
        "links": [
            "5848c5489be4b695"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1065,
        "y": 2265,
        "wires": [
            [
                "21e2596c2a03ef6a"
            ]
        ]
    },
    {
        "id": "80ce9f5ef71f266e",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "a2dc8e5cbc92778b",
        "name": "\"utilizza colori di\"",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<span style=\"margin-left:60px;position:relative;top:30px\">utilizza colori di</span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "pickColors-title",
        "x": 815,
        "y": 1005,
        "wires": [
            []
        ]
    },
    {
        "id": "502bbc5503d90d3b",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "de425a720011e6e9",
        "name": "localStyle",
        "order": 12,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .pickColors-title {\n        overflow-y: visible; \n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1005,
        "y": 1005,
        "wires": [
            []
        ]
    },
    {
        "id": "d54c9038cc673dcd",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "db63de8125d253b0",
        "name": "\"utilizza colori di\"",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<span style=\"margin-left:60px;position:relative;top:30px\">utilizza colori di</span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "pickColors-title",
        "x": 700,
        "y": 1530,
        "wires": [
            []
        ]
    },
    {
        "id": "7e89b24cde089d6c",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "group": "d6dcf6dea0234745",
        "name": "\"utilizza colori di\"",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<span style=\"margin-left:60px;position:relative;top:30px\">utilizza colori di</span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "pickColors-title",
        "x": 715,
        "y": 2085,
        "wires": [
            []
        ]
    },
    {
        "id": "93745921a000afa6",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "name": "OnConfigUpdate in",
        "links": [
            "d552f3455898102d"
        ],
        "x": 300,
        "y": 960,
        "wires": [
            [
                "351eace510045898"
            ]
        ]
    },
    {
        "id": "6a909b80fd1cfba9",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "name": "OnConfigUpdate in",
        "links": [
            "d552f3455898102d"
        ],
        "x": 180,
        "y": 1470,
        "wires": [
            [
                "330da2b395af8bff"
            ]
        ]
    },
    {
        "id": "f352e5b1b926013a",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "name": "OnConfigUpdate in",
        "links": [
            "d552f3455898102d"
        ],
        "x": 210,
        "y": 2040,
        "wires": [
            [
                "29e4829ae591da51"
            ]
        ]
    },
    {
        "id": "13c1fa98c29f8f81",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "set def settings",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 345,
        "wires": []
    },
    {
        "id": "636abe298d8940a7",
        "type": "file",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "filename": ".\\uiConfig.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1060,
        "y": 345,
        "wires": [
            [
                "13c1fa98c29f8f81",
                "9aac6231207dd902"
            ]
        ]
    },
    {
        "id": "649be06b4b880b67",
        "type": "json",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 945,
        "y": 345,
        "wires": [
            [
                "636abe298d8940a7"
            ]
        ],
        "l": false
    },
    {
        "id": "0c0ba63642b01a89",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "setDefault",
        "func": "msg.payload = {\n    \"tempPianoSup\": {\n        \"min\": 0,\n        \"max\": 250,\n        \"c1\": \"#2cbec6\",\n        \"c2\": \"#0c942e\",\n        \"c3\": \"#e42b2b\",\n        \"copyColors\": false\n    },\n    \"pressPressata\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"c1\": \"#2cbec6\",\n        \"c2\": \"#0c942e\",\n        \"c3\": \"#e42b2b\",\n        \"copyColors\": \"tempPianoSup\"\n    },\n    \"tempPianoInf\": {\n        \"min\": 0,\n        \"max\": 250,\n        \"c1\": \"#2cbec6\",\n        \"c2\": \"#0c942e\",\n        \"c3\": \"#e42b2b\",\n        \"copyColors\": \"tempPianoSup\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 855,
        "y": 345,
        "wires": [
            [
                "649be06b4b880b67"
            ]
        ]
    },
    {
        "id": "e517363a9bb66217",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 315,
        "wires": [
            [
                "0c0ba63642b01a89"
            ]
        ],
        "l": false
    },
    {
        "id": "7f28962bbf2edd96",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "catch uiConfig fileNotFound",
        "func": "\nif(/ENOENT/.test(msg.error) && !context.get(\"triedOnce\")){\n    context.set(\"triedOnce\");\n    return msg;\n}\nelse{\n    if (msg.error) {\n        node.error({ \"err\": msg.error.message, \"full\": msg });\n        //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n    }\n    else {\n        node.error(msg);\n    }\n    return null\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 340,
        "wires": [
            [
                "0c0ba63642b01a89"
            ],
            [
                "323cfea2dd074604"
            ]
        ]
    },
    {
        "id": "323cfea2dd074604",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "catch uiConfig",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "13d2e16bdac1b820",
        "type": "catch",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "",
        "scope": [
            "9aac6231207dd902"
        ],
        "uncaught": false,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "7f28962bbf2edd96"
            ]
        ]
    },
    {
        "id": "34b28815286f8381",
        "type": "debug",
        "z": "69a590bb3eaafea5",
        "g": "b45e5b597df321ef",
        "name": "settings changed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 635,
        "y": 490,
        "wires": []
    },
    {
        "id": "93cf5aa68bdd90b4",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 1290,
        "y": 1230,
        "wires": [
            [
                "fb52913cc5f5fed3"
            ]
        ],
        "l": false
    },
    {
        "id": "fb52913cc5f5fed3",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "name": "if not in manual mode",
        "func": "const cfg = msg.payload;\nif (cfg)\n    if(cfg.copyColors)\n        return msg;\n    else\n        return [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1230,
        "wires": [
            [
                "852f78815ff40211"
            ],
            []
        ]
    },
    {
        "id": "852f78815ff40211",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "name": "popup err 7s: must be in manual to edit",
        "mode": "link",
        "links": [
            "f6dfdebddb6b4ea5"
        ],
        "x": 1735,
        "y": 1230,
        "wires": [],
        "l": true
    },
    {
        "id": "2fc894e0f20b7fcb",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "name": "popup err 7s: must be in manual to edit",
        "mode": "link",
        "links": [
            "f6dfdebddb6b4ea5"
        ],
        "x": 1645,
        "y": 1770,
        "wires": [],
        "l": true
    },
    {
        "id": "719f370d675764fe",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "name": "if not in manual mode",
        "func": "const cfg = msg.payload;\nif (cfg)\n    if(cfg.copyColors)\n        return msg;\n    else\n        return [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1770,
        "wires": [
            [
                "2fc894e0f20b7fcb"
            ],
            []
        ]
    },
    {
        "id": "f9db0017c651a201",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 1200,
        "y": 1770,
        "wires": [
            [
                "719f370d675764fe"
            ]
        ],
        "l": false
    },
    {
        "id": "1d4573414aeeb51d",
        "type": "link out",
        "z": "69a590bb3eaafea5",
        "name": "popup err 7s: must be in manual to edit",
        "mode": "link",
        "links": [
            "f6dfdebddb6b4ea5"
        ],
        "x": 1620,
        "y": 2310,
        "wires": [],
        "l": true
    },
    {
        "id": "f5c381b5ec72eda4",
        "type": "switch",
        "z": "69a590bb3eaafea5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 1,
        "x": 1215,
        "y": 2310,
        "wires": [
            [
                "e779c7255cbbe3f2"
            ]
        ],
        "l": false
    },
    {
        "id": "e0159898d44cfae9",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "g": "cbc36db7c52f56bd",
        "group": "bcc9d4a1865e43c4",
        "name": "popup err 7s: must be in manual to edit",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"popupPusher\">\n</div>\n<script note=\"[popupPusher] fwd msgs to popup container\">\n    //forward messages to popup container\n    (function(scope) {\n    scope.$watch('msg', function(msg) {\n        if (msg) {\n            // Do something when msg arrives\n            //$(\"#my_\"+scope.$id).html(msg.payload);\n            console.log(\"[popupPusher] got msg\",msg);\n            window.functions.popup.showTitled(\n                \"warn\",\n                \"Attenzione\",\n                `La modifica non avrà effetto se non si imposta \"utilizza colori\" su \"manuale\"`,\n                7000,\n                !!\"dismissable\"\n            );\n        }\n        else{\n            console.log(\"[popupPusher] got empty msg\",msg);\n        }\n    });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupPusher-card",
        "x": 1385,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "f6dfdebddb6b4ea5",
        "type": "link in",
        "z": "69a590bb3eaafea5",
        "g": "cbc36db7c52f56bd",
        "name": "err popup in",
        "links": [
            "852f78815ff40211",
            "1d4573414aeeb51d",
            "2169d054e3700ab8",
            "2fc894e0f20b7fcb"
        ],
        "x": 1185,
        "y": 780,
        "wires": [
            [
                "e0159898d44cfae9"
            ]
        ]
    },
    {
        "id": "07709d64d5b739e2",
        "type": "ui_template",
        "z": "69a590bb3eaafea5",
        "g": "cbc36db7c52f56bd",
        "group": "bcc9d4a1865e43c4",
        "name": "popupRouter",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div style=\"display:none\">\n    <div note=\"[popupRouter] example content\">\n        <p>The number is</p>\n        <font color=\"{{((msg.payload || 0) % 2 === 0) ? 'green' : 'red'}}\">\n            {{(msg.payload || 0) % 2 === 0 ? 'even' : 'odd'}}\n        </font>\n    </div>\n    <script note=\"[popupRouter] create popup container\">\n        //create popup container\n        $(function () {\n            if(!window.popupRouter_InitCalled){\n                window.popupRouter_InitCalled = true;\n                pushFunctions(); //append utils and popup pseudo-classes to windows.functions \n\n                var popupCont = document.createElement(\"div\");\n                popupCont.classList.add(\"popup-container\");\n                popupCont.id = \"mainPopupContainer\";\n                \n\n                //document.getElementsByTagName(\"body\")[0].append(popupCont);\n                let mainSect = getMainSect();\n                mainSect.append(popupCont);\n                console.log(\"[popupRouter][init()] appended popupContainer to \", mainSect);\n            }else{\n                console.log(\"[popupRouter][init()] skipping init (popupRouter_InitCalled is def)\");\n            }\n            \n\n            function getMainSect(){\n                var mainSect = null;\n                for(el of document.getElementsByTagName(\"md-content\")[0].children){\n                    if(/section/i.test(el.tagName)){\n                        mainSect = el;\n                        break;\n                    }\n                }\n                mainSect === null ? console.warn(\"mainSect:\",mainSect) : console.log(\"mainSect:\",mainSect);\n                return mainSect;\n            }\n        });\n        \n        function pushFunctions(){\n            let root = window.functions ?? (window.functions = new Object());\n            //import some utils. //avoid overwriting\n            root.utils ??= {};\n            root.utils = mergeRec(root.utils ,{\n                /** recursively merge two Objects\n                    * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n                    * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n                    * - -res.a===main.a\n                    * - -res.c===sec.c\n                    * - -res.b!==sec.b2\n                    * @param {Object} main\n                    * @param {Object} sec */\n                \"mergeRec\":mergeRec,\n                /** checks wether a value is an Obj and has not more than 1 prototype in its proto chain.\n                     * @param {any} value accepts anything\n                     * @returns {boolean}\n                     *  note: checking for value?.constructor===Object.prototype.constructor doesn't work as expected (object from different vm or \"realms\"?)\n                     */\n                \"isPlainObj\": function isPlainObj(value) { //source:https://stackoverflow.com/questions/65787971/ways-to-determine-if-something-is-a-plain-object-in-javascript\n                    return !!value &&          //rules out null && undef, which'd result in an except. for getPrototypeOf()\n                        // it has a prototype that's also truthy\n                        !!(value = Object.getPrototypeOf(value)) &&\n                        // which has `null` as parent prototype\n                        !Object.getPrototypeOf(value);\n                },\n                /** recursively wrap root funct.and arrow funct. in an error-logging exception-catching function\n                 *      skip non-function, assign wrapped to their original key\n                 *  @param root {Object} the object to parse for functions\n                 *  @param prefix {string} the name of root, will be displayed in its funcions and all its children's functions errors */\n                \"wrapFunctions\": function wrapFunctions(root, prefix) {\n                    prefix ?? console.warn({ txt: \"[WHERE? WHO KNOWS!][wrapFunctions] missing 'prefix' argument. Errors will be harder to trace back.\", rootContent: root })\n                    const isPlainObj = this.isPlainObj;\n                    //recursively parse root\n                    //root must be an object to avoid re-assigning all values //would require the use of prop descriptors to guarantee nothing is changed\n                    let desc;\n                    for (let k in root) {\n                        if (isPlainObj(root[k]))\n                            root[k] = wrapFunctions.call(this, root[k], prefix + `.${k}`);\n                        else if (//is a simple function, or an arrow function\n                            //value of root[k] has type function\n                            typeof (root[k]) == \"function\"\n                            //root[k] itself is a function, not the result of it's getter call\n                            && (desc = Object.getOwnPropertyDescriptor(root, k)).value !== undefined    // @ts-ignore\n                            && !desc.get\n                        ) {\n                            //wrap in an exception catching function\n                            //trace errors back to their source, independently of the caller\n                            let cb = root[k]; //must reside outside the function statement, or it will refer the modified function\n                            root[k] = function (...args) {\n                                try {\n                                    return cb.call(this, ...args)\n                                } catch (e) {\n                                    e.nrStack = (e.nrStack ?? []);\n                                    e.nrStack.push({ summ: `at ${k}(${args.join(\", \")}) of ${prefix}`, fName: k, args: args, root: prefix, err: e.message, e: e });\n                                    e.message = e.message + `\\n   at ${k}() of ${prefix}`;\n                                    //console.error(\"<wrapped>\"+prefix+(!cb.name ? \"\" : `[${cb.name}]`)+`${e.name} exception:${e.message},cause:${e.lineNumber??''}:${e.columnNumber??''}>${e.cause}`);\n                                    throw e;\n                                }\n                            }\n                        }\n                    }\n                    return root;\n                }.bind(root.utils),\n                \"fromHtml\":function fromHtml(html, appendTo=document){\n                    if(arguments.length != fromHtml.length) throw new Error(\"arg length mismatch. \"+arguments.length+\"/\"+fromHtml.length);\n                    let factory = document.createElement(\"div\");\n                    // if(!factory){\n                    //     factory=document.createElement(\"div\");\n                    //     factory.id = \"htmlFactory\";\n                    //     factory.style.display = \"none\";\n                    //     factory.position = \"absolute\";\n                    //     document.lastElementChild.append(factory);\n                    // }\n                    factory.innerHTML = html;\n                    if(factory.children.length > 1)\n                        console.error(\"[<globFuncs>.utils.fromHtml()] more than 1 element created, when only the first will be returned.\",arguments,\"\\n->\",factory.children,);\n                    return factory.firstElementChild ?? console.error(\"[<globFuncs>.utils.fromHtml()] nothing created. returned null\",arguments);\n                },\n                /** some characters do not have an uppercase equivalent. They are considered to be lowercase by this func */\n                \"isLowerCase\":function isLowerCase(ch=null){\n                    return ch!==null && ch == ch?.toLowerCase?.();\n                }\n            });\n            //root.utils.wrapFunctions(root.utils,\"[<globFuncs>.utils]\");\n            //popup-specific functions\n            root.popup = {};\n            root.popup = root.utils.mergeRec(root.popup, {\n                \"getTemplate\":function getTemplate(type=\"info\",text=\"\"){\n                    const utils = window.functions.utils;\n                    if(!utils.isLowerCase(type?.[0]))\n                        type = type.toLowerCase();\n                    switch(type){\n                        default:{ console.warn(\"[<globFuncs>.utils] getTemplate(): invalid type \",type, \".used info\"); }\n                        case \"std\":\n                        case \"info\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"err\":\n                        case \"error\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup error\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                        case \"warn\":\n                        case \"warning\":{\n                            return utils.fromHtml(`\n                                <div class=\"roundPopup warning\">\n                                    <span>${text}</span>\n                                </div>\n                            `);\n                        }\n                    }\n                    \n                },\n                \"push\": function push(popup){\n                    document.getElementById(\"mainPopupContainer\").prepend(popup);\n                    return popup;\n                }.bind(root.popup),\n                \"popOlder\": function pop(){\n                    let cont = document.getElementById(\"mainPopupContainer\");\n                    var removed = cont.lastElementChild;\n                    if(cont.children.length)\n                        cont.lastElementChild?.remove?.();\n                    return removed;\n                },\n                \"show\":function show(type=\"info\",content=\"\",selfCloseMs=null, dismissable = true){\n                    const utils = window.functions.utils;\n                    var pUpClass = this;\n                    var popup = this.getTemplate(type, content);\n                    if(selfCloseMs !== null){\n                        setTimeout(()=>{\n                            for(var el of document.getElementById(\"mainPopupContainer\").children){\n                                if(el === popup){\n                                    el.remove();\n                                    console.log(\"removed \",el);\n                                }\n                            }\n                            console.warn(\"no popup matched with \",popup, \" after the timeout\");\n                        },selfCloseMs)\n                    }\n                    if(dismissable){\n                        popup.onclick = function (){\n                            console.log(\"clicked\",this);\n                            this.remove();\n                        }\n                    }\n                    this.push(popup);\n                }.bind(root.popup),\n                \"showTitled\":function showTitled(type=\"info\",title=\"\",txt=\"\",selfCloseMs=null, dismissable = true){\n                    this.show(type,`\n                    <span style=\"font-size:1.3em\">${title}</span>\n                    <div>${txt}</div>\n                    `,selfCloseMs, dismissable);\n                }.bind(root.popup),\n            });\n            //root.utils.wrapFunctions(root.popup,\"[<globFuncs>.popup]\");\n        }\n\n\n        /**\n        * @summary recursively merge two Objects\n            * @desc overlay sec onto main. keeps properties of both. undefined properties of main are directly assigned from sec.\n            * - ex: main : {a, b:b1} sec:{b:b2, c} -> res:{a , b:b2, c} where:\n            * - -res.a===main.a\n            * - -res.c===sec.c\n            * - -res.b!==sec.b2\n            * @param {Object} main \n            * @param {Object} sec */\n        function mergeRec(main, sec) {\n            for (let p in sec) {\n                //if(main[p]===undefined) //commented bcs implicitly included in the next if condition //(typeof(undefVar) <=> \"undefined\")\n                //if(deepCopy && typeof(main[p]) ==\"object\") //too big an hustle\n                if (sec[p].constructor == Object && typeof (main[p]) == \"object\")\n                    thisFun(main[p], sec[p]);\n                else\n                    main[p] = sec[p];\n            }\n            return main;\n        }\n\n    </script>\n    <style note=\"[popupRouter]\">\n        .hidden {\n            display:none;\n        }\n        .popupRouter-card {\n            border: 1px solid green;\n            display:none;\n        }\n\n        .popupPusher {\n            border: 1px solid green;\n            display:none;\n        }\n        .popupPusher-card {\n            border: 1px solid green;\n            display:none;\n        }\n    \n        .popup-container {\n            /*border: 1px solid green;*/\n            width: max(30vw,600px);\n            position: fixed;\n            right:2vw;\n            padding-top: 0.3em;\n        }\n        \n        .popup-container .roundPopup {\n            text-align: left;\n            padding: 0.3em 1.5em;\n            margin-bottom: 1vh;\n            border: 3px solid gray;\n            border-radius: 10px;\n            background-color: rgb(243 243 243 / 100%); /* light gray */\n            color:#19196F;\n            width: fit-content;\n            margin-left: auto;\n            margin-right: 0;\n        }\n\n        .popup-container .roundPopup:hover {\n            background-color:#caeeff; /* light light blue */\n        }\n\n        .popup-container .roundPopup hr {\n            margin-left:-1.5em;\n            margin-right:-1.5em;\n        }\n\n        .popup-container .warning {\n            border-color: sandybrown;\n            background-color: lemonchiffon\n        }\n\n        .popup-container .error {\n            border-color: crimson;\n            background-color: #ffc0c0;\n        }\n    </style>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "popupRouter-card",
        "x": 1320,
        "y": 735,
        "wires": [
            []
        ]
    },
    {
        "id": "f93356f24f96a675",
        "type": "inject",
        "z": "69a590bb3eaafea5",
        "g": "cbc36db7c52f56bd",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1190,
        "y": 735,
        "wires": [
            [
                "e0159898d44cfae9"
            ]
        ],
        "l": false
    },
    {
        "id": "e779c7255cbbe3f2",
        "type": "function",
        "z": "69a590bb3eaafea5",
        "name": "if not in manual mode",
        "func": "const cfg = msg.payload;\nif (cfg)\n    if(cfg.copyColors)\n        return msg;\n    else\n        return [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2310,
        "wires": [
            [
                "1d4573414aeeb51d"
            ],
            []
        ]
    },
    {
        "id": "16b9385eb2394d8b",
        "type": "comment",
        "z": "69a590bb3eaafea5",
        "name": "NOT WORKING",
        "info": "invece che ricevere un oggetto cfg riceve una stringa colore",
        "x": 1525,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b0cd0777fbffd034",
        "type": "catch",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "85ef1e45805265d5"
            ]
        ]
    },
    {
        "id": "49e6d3e2af0723a8",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "endpoint": "fa784b598becc58c",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "ifDiff -> all status 10s",
        "x": 300,
        "y": 1820,
        "wires": [
            [
                "17ccce6813bb1513"
            ]
        ]
    },
    {
        "id": "d1dbf0ba787aaf87",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "pressa1 allStatus pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 675,
        "y": 1775,
        "wires": []
    },
    {
        "id": "765edce0c2be3f26",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "split with topic:varName",
        "func": "\nlet keys=Object.keys(msg.payload);\n//node.warn(keys);\n    //from status_alife:true   to {topic:alife, payload:true}\nlet out=[];\nfor(let k of keys){\n    node.send({\n        topic:k.match(/\\w+_(.+)/)[1],\n        payload:msg.payload[k],\n    })\n    //out.push({\n    //     topic: k.match(/\\w+_(.+)/)[1],\n    //    payload: msg.payload[k],\n    //});\n}\n\n//node.warn(out);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1820,
        "wires": [
            [
                "f496db4601480ad7"
            ]
        ]
    },
    {
        "id": "9dbec7cb448f90d2",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "catchAll",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d74f25d28c5fec88",
        "type": "catch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "81fdc4e21618ea8e",
        "name": "",
        "scope": [
            "49e6d3e2af0723a8",
            "9ca5c05780dc2c19",
            "3b424968240bbd7c",
            "81faf0db9baee789",
            "bb19e1a6f465c228",
            "1f0e6e97749e1662",
            "016705b24c943eb8",
            "2aa275dd861f9ccf",
            "79eab282041abd4d",
            "a4c307b888a951e2",
            "e2c6161b189af928",
            "35770bc641499596",
            "c0f863a3eee61ef2",
            "bb1b97f50089b22d",
            "64588e3ee83192c2",
            "f2d66bf3b277d261",
            "4ef25541b10aa843",
            "0a18813d0305d84e",
            "459430cfd2021fdd"
        ],
        "uncaught": false,
        "x": 240,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "09f63ed09817f46d",
        "type": "delay",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 610,
        "y": 200,
        "wires": [
            [
                "79112dc81c4df1e1"
            ]
        ]
    },
    {
        "id": "79112dc81c4df1e1",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "catchPlc",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9ca5c05780dc2c19",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "endpoint": "34ec8711cb2e9270",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": true,
        "name": "ifDifferent -> prod_cycleRun",
        "x": 330,
        "y": 1655,
        "wires": [
            [
                "9ceed6fd254ce510"
            ]
        ]
    },
    {
        "id": "e1d9dc50e8c79a8f",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "payload true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 655,
        "y": 1655,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0ad0e75869583a93",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 435,
        "y": 1580,
        "wires": [
            [
                "e1d9dc50e8c79a8f"
            ]
        ]
    },
    {
        "id": "7fefc00461152886",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 435,
        "y": 1610,
        "wires": [
            [
                "e1d9dc50e8c79a8f"
            ]
        ]
    },
    {
        "id": "3b424968240bbd7c",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "endpoint": "34ec8711cb2e9270",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "all prodExc 10s",
        "x": 275,
        "y": 2105,
        "wires": [
            [
                "260b48d27cf6b812"
            ]
        ]
    },
    {
        "id": "f5cdb10387af4f40",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning=context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n    //lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning){\n    context.set(\"lastCycleIsRunning\",cycleIsRunning);\n    //on cycle beginning\n    if(cycleIsRunning){\n\n\n        node.send([msg,null]);\n    }\n    //on cycle end\n    else{\n\n\n        node.send([null, msg]);\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 635,
        "y": 2060,
        "wires": [
            [
                "d475353a7f70bf2a"
            ],
            [
                "479532ec132fba80",
                "9333514511ccbe3e"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "479532ec132fba80",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "pressa1 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "9f767a4b86454460",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a"
        ],
        "x": 965,
        "y": 2090,
        "wires": [],
        "l": true
    },
    {
        "id": "ca74a0de42a788ba",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "all prodExc pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 2120,
        "wires": []
    },
    {
        "id": "b3472d016caff6c0",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "parse status",
        "func": "\nfunction isLost(status) {\n    return status.fill == \"red\";\n}\n\nfunction isWarn(status){\n    return status.fill == \"orange\";\n}\n\nfunction isOk(status) {\n    return status.fill == \"green\"; //!isWarn(status) && !isLost(status);\n}\n\n\nif(msg.origin==\"prodExc\")\n    context.set(\"prodExc\", msg.status)\nelse\n    context.set(\"status\", msg.status)\nvar status = context.get(\"status\");\nvar prodExc= context.get(\"prodExc\");\n//node.warn({pr:prodExc,st:status});\n\nif (isLost(status) || isLost(prodExc)) {\n    msg.payload=false;\n    return msg;\n}\nelse if (isLost(status) || isLost(prodExc)) {\n    msg.payload = \"warn\";\n    return msg;\n}\nelse if(isOk(status) && isOk(prodExc)){\n    msg.payload = true;\n    return msg;\n}\nelse\n    return //do nothing\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 1180,
        "wires": [
            [
                "1268ad479e7f6bab"
            ]
        ]
    },
    {
        "id": "ee85a2f48f8b5e02",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "parseStatus in",
        "links": [],
        "x": 695,
        "y": 1180,
        "wires": [
            [
                "b3472d016caff6c0"
            ]
        ]
    },
    {
        "id": "1268ad479e7f6bab",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "parseStatus out",
        "mode": "return",
        "links": [],
        "x": 995,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0a547f33659dd077",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1400,
        "wires": [
            [
                "6a2f84e5a6053bfa"
            ]
        ]
    },
    {
        "id": "c40dd074760f5ff9",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "pressa1_allStatus",
        "scope": [
            "9ca5c05780dc2c19",
            "49e6d3e2af0723a8"
        ],
        "x": 280,
        "y": 1400,
        "wires": [
            [
                "0a547f33659dd077"
            ]
        ]
    },
    {
        "id": "6a2f84e5a6053bfa",
        "type": "link call",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "parse Status",
        "links": [
            "ee85a2f48f8b5e02"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 725,
        "y": 1415,
        "wires": [
            [
                "419d8fe0bc51a50a"
            ]
        ]
    },
    {
        "id": "6632929cbf8477f9",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "prodExc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1430,
        "wires": [
            [
                "6a2f84e5a6053bfa"
            ]
        ]
    },
    {
        "id": "f22eaeab0459ee15",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1_alife_dataIn_out",
        "mode": "link",
        "links": [
            "8ef946242380175e",
            "7446c855e9d2de4f"
        ],
        "x": 1120,
        "y": 1415,
        "wires": [],
        "l": true
    },
    {
        "id": "fa36f3d9a2716a47",
        "type": "status",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1_allProdExc",
        "scope": [
            "49e6d3e2af0723a8",
            "9ca5c05780dc2c19"
        ],
        "x": 280,
        "y": 1430,
        "wires": [
            [
                "6632929cbf8477f9",
                "0a547f33659dd077",
                "642b4cd1857e998b"
            ]
        ]
    },
    {
        "id": "9742879be4c1261c",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "poll status pressa1",
        "info": "",
        "x": 285,
        "y": 1775,
        "wires": []
    },
    {
        "id": "bdec638b99156315",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "track connection status pressa1",
        "info": "",
        "x": 350,
        "y": 1355,
        "wires": []
    },
    {
        "id": "419d8fe0bc51a50a",
        "type": "trigger",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "merge 300ms",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "300",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 1415,
        "wires": [
            [
                "f22eaeab0459ee15"
            ]
        ]
    },
    {
        "id": "d475353a7f70bf2a",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "pressa1 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [],
        "x": 965,
        "y": 2045,
        "wires": [],
        "l": true
    },
    {
        "id": "8c63b0896103090c",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "emuRead in",
        "links": [
            "5ce383fc8f203d80",
            "e9413d634bd51052",
            "3f33a48033934063"
        ],
        "x": 280,
        "y": 2150,
        "wires": [
            [
                "260b48d27cf6b812"
            ]
        ],
        "l": true
    },
    {
        "id": "9333514511ccbe3e",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "oncePerCyc end pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2135,
        "wires": []
    },
    {
        "id": "2d42bfb3b1c1476f",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "start cycle",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 820,
        "wires": [
            [
                "e83df1da93dc1fed"
            ]
        ]
    },
    {
        "id": "6b6aad74d9d607ed",
        "type": "delay",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1720,
        "y": 775,
        "wires": [
            [
                "2d42bfb3b1c1476f"
            ]
        ]
    },
    {
        "id": "e83df1da93dc1fed",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "emulate plc",
        "func": "var state=context.get(\"state\")\n//node.warn({ input_state: state });\n\n//output template: [readOutput , cycleChanged , prod_writeRequest, status_writeRequest, prod_readRequest, status_readRequest ]\n    //readOutput    same as s7 //{} with var:value pairs\n    //cycleChanged  topic: \"cycleOff\" | \"cycleOn\"  payload:state\n    //prod_writeRequest     sends to plc prodExc s7\n    //status_writeRequest   sends to plc status s7    //only used in OnStart\n    //prod_readRequest      reads from plc prodExc s7\n    //status_readRequest    reads from plc status s7   //only used in OnStart\n\nfunction initData(){\n    return {\n        \"exc_id\":\"leftoverId\",\n        \"exc_status\":\"someStatus\",\n        \"exc_quantToDo\":17,\n        \"exc_quantProd\":3,\n        \"prod_cycleRun\":true,\n        \"prod_cycleNumber\":0,\n        \"prod_id\":\"\",\n        \"prod_quantProd\":0,\n        \"prod_esito\":true\n    }\n}\n\n\nif(!state)\n    state = initData();\n\n//emulate cycle routine state changes\nif(msg.action==\"start\"){\n    if(state.cycleRun)\n        node.error(\"received start when already running\");\n    node.warn(\"cycle began\");\n    //set state\n    state.cycleRun=true;\n    state.prod_cycleNumber++;\n    state.prod_id = state.exc_id;\n    state.exc_quantProd += state.prod_quantProd;\n    //emulate completion routine\n        //msg.eta = completion delay ms\n        //default delay = 5000ms\n    setTimeout((state)=>{\n        state.cycleRun=false;\n        //state.prod_id = \"\";\n        let esito = Math.rand() < 0.8;\n        if(esito){\n            \n        }\n        else{\n            state.exc_quantProd -= state.prod_quantProd;\n        }\n        node.warn({ esito: esito, cycle: state});\n        \n        //create write request for prodExc plc\n        let request={};\n        request.payload = new Array();\n        request.variable = new Array();\n        let keys=Object.keys(state);\n        let i=0;\n        for(let k of keys){\n            request.payload.push(state[k]);\n            request.variable.push(k);\n        }\n        node.send([ null, {topic:\"cycleOff\",payload:state}, request, null, null, null ]);\n    },msg.eta ?? 5000);\n}\n//read all //outputs an obj\nelse if(!msg.action || msg.action==\"readAll\"){\n    node.warn(\"readAll\");\n    node.send([state,null,null]);\n}\n//else write what's in variable\nelse if(msg.action == \"write\"){\n    let oldState=state; //#DBG\n    if (msg.variable.length) {\n        let i = 0;\n        for (let v of msg.variable) {\n            state[v] = msg.payload[i++];\n        }\n    }\n    node.warn({ written: msg, from: oldState, to: state });\n}\nelse{\n    node.warn({err:\"wth\",msg:msg});\n}\n\n\nnode.warn({output_state:state});\ncontext.set(\"state\",state);\n\n//create write request for plc\nlet request = {};\nrequest.payload = new Array();\nrequest.variable = new Array();\nlet keys = Object.keys(state);\nfor (let k of keys) {\n    request.payload.push(state[k]);\n    request.variable.push(k);\n}\nnode.send([null, (msg.action!=\"start\") ? null : { topic: \"cycleOn\", payload: state }, request, null, null, null]);",
        "outputs": 6,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"status\", {\n    status_alife: false,\n    status_cycleActive: false,\n    status_emergency: false,\n    status_idraulicCmd: false,\n    status_idPressa: 1234,\n    status_pressPressata: 0,\n    status_tempPianoSup: 0,\n    status_tempPianoInf: 0\n});\n\n\n    //generate status changes\nlet id=setInterval(()=>{\n    let last=context.get(\"status\");\n    if(!last)\n        node.error(\"context undefined\");\n\n    let status = {\n        \"status_alife\": !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random()*350,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    status.status_tempPianoSup =   Math.random() * (2 * status.status_pressPressata)  ;\n    status.status_tempPianoInf =   status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup  ;\n    \n    \n\n    //create write request for plc \n    let request = {};\n    request.payload = new Array();\n    request.variable = new Array();\n    let keys = Object.keys(status);\n    //node.warn({\"req keys\":keys});\n    for (let k of keys) {\n        //node.warn({s:status,\"k\":k,item:status[k]});\n        request.payload.push(status[k]);\n        request.variable.push(k);\n    }\n    \n    node.send([null, null, null,request,null])\n\n},10000);\n\ncontext.set(\"intervalId\",id); //cleared in \"On stop\"",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nclearTimeout(context.get(\"intervalId\"));\nnode.warn(\"timeout cleared\");",
        "libs": [],
        "x": 1640,
        "y": 865,
        "wires": [
            [],
            [
                "715b65f58c966686"
            ],
            [
                "1f0e6e97749e1662",
                "7d5d66e4e2b480f4"
            ],
            [
                "016705b24c943eb8",
                "d13313512ae49a4a"
            ],
            [
                "6058f3345d37e4dc",
                "40be6c6cb5f36f37"
            ],
            [
                "e8ab6a202bfe33f6",
                "d3cdc80e459cdf33"
            ]
        ],
        "outputLabels": [
            "readOutput",
            "topic:cycleOn/cycleOff",
            "prodExc_writeRequest",
            "status_writeRequest",
            "prodExc_readRequest",
            "status_readRequest"
        ]
    },
    {
        "id": "715b65f58c966686",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "delete",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 775,
        "wires": [
            [
                "6b6aad74d9d607ed"
            ]
        ]
    },
    {
        "id": "81faf0db9baee789",
        "type": "s7 control",
        "z": "9922a8114f46702b",
        "g": "6aaddccc85e9cc4d",
        "endpoint": "34ec8711cb2e9270",
        "function": "trigger",
        "name": "",
        "x": 2205,
        "y": 925,
        "wires": [
            [
                "420d2f3b4f8caa1b"
            ]
        ]
    },
    {
        "id": "bb19e1a6f465c228",
        "type": "s7 control",
        "z": "9922a8114f46702b",
        "g": "6aaddccc85e9cc4d",
        "endpoint": "fa784b598becc58c",
        "function": "trigger",
        "name": "",
        "x": 2225,
        "y": 970,
        "wires": [
            [
                "4122cbdcb42e0560"
            ]
        ]
    },
    {
        "id": "1f0e6e97749e1662",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "g": "6aaddccc85e9cc4d",
        "endpoint": "34ec8711cb2e9270",
        "variable": "",
        "name": "",
        "x": 1965,
        "y": 820,
        "wires": []
    },
    {
        "id": "016705b24c943eb8",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "g": "6aaddccc85e9cc4d",
        "endpoint": "fa784b598becc58c",
        "variable": "",
        "name": "",
        "x": 1970,
        "y": 865,
        "wires": []
    },
    {
        "id": "49ec813eb9ef324d",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link in 10",
        "links": [
            "6058f3345d37e4dc"
        ],
        "x": 2015,
        "y": 925,
        "wires": [
            [
                "81faf0db9baee789"
            ]
        ]
    },
    {
        "id": "fe70ebeba81a880f",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link in 11",
        "links": [
            "e8ab6a202bfe33f6"
        ],
        "x": 2025,
        "y": 970,
        "wires": [
            [
                "bb19e1a6f465c228"
            ]
        ]
    },
    {
        "id": "20e1e02ce292a867",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link in 12",
        "links": [
            "420d2f3b4f8caa1b",
            "4122cbdcb42e0560"
        ],
        "x": 1510,
        "y": 895,
        "wires": [
            [
                "e83df1da93dc1fed"
            ]
        ]
    },
    {
        "id": "6058f3345d37e4dc",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "49ec813eb9ef324d"
        ],
        "x": 1765,
        "y": 895,
        "wires": []
    },
    {
        "id": "e8ab6a202bfe33f6",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "fe70ebeba81a880f"
        ],
        "x": 1765,
        "y": 940,
        "wires": []
    },
    {
        "id": "420d2f3b4f8caa1b",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "20e1e02ce292a867"
        ],
        "x": 2390,
        "y": 925,
        "wires": []
    },
    {
        "id": "4122cbdcb42e0560",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "20e1e02ce292a867"
        ],
        "x": 2415,
        "y": 970,
        "wires": []
    },
    {
        "id": "efe20e68d0236d94",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "utility: emulate plc",
        "info": "",
        "x": 1405,
        "y": 745,
        "wires": []
    },
    {
        "id": "12fde84fc27f5e55",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1330,
        "y": 880,
        "wires": [
            [
                "2d42bfb3b1c1476f"
            ]
        ]
    },
    {
        "id": "7d5d66e4e2b480f4",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 820,
        "wires": []
    },
    {
        "id": "40be6c6cb5f36f37",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 925,
        "wires": []
    },
    {
        "id": "d13313512ae49a4a",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2155,
        "y": 865,
        "wires": []
    },
    {
        "id": "d3cdc80e459cdf33",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "6aaddccc85e9cc4d",
        "name": "debug 72",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 970,
        "wires": []
    },
    {
        "id": "bd629777c9b54b8f",
        "type": "function",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emulate prodExc plc",
        "func": "var state=context.get(\"state\");\n//output template: [readOutput , cycleChanged , selfRequests]\n    //readOutput    same as s7 //{} with var:value pairs\n    //cycleChanged  topic: \"cycleOff\" | \"cycleOn\"  payload:state\n    //selfRequests  sends to this node\n    //readStatusOutput\n\nfunction newData(){\n    return {\n        \"genCtrl\":Math.random(),\n        \"exc_id\":\"sampleId\",\n        \"exc_status\":2,\n        \"exc_quantToDo\":17,\n        \"exc_quantProd\":18,\n        \"prod_cycleRun\":false,\n        \"prod_cycleNumber\":0,\n        \"prod_id\":\"\",\n        \"prod_quantProd\":0,\n        \"prod_esito\":false\n    }\n}\n\nfunction statData(last){\n    let status={\n        \"status_alife\": !last ? true : !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": !last ? false : last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": !last ? false : last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random()*240,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    let percPress = status.pressPressata/240*100;\n    status.status_tempPianoSup =   (200-200/6 + Math.random() * 2*200/6) * percPress;\n    status.status_tempPianoInf =   (200-200/6 + Math.random() * 2*200/6) * percPress;\n    //status.status_tempPianoSup =   Math.random() * (2 * status.status_pressPressata)  ;\n    //status.status_tempPianoInf =   status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup  ;\n    return status;\n}\nfunction newRandData(prod_cycleRun=true){\n    let d=newData();\n}\n\n//one-time init\nif(state === undefined){\n    state = newData();\n    /*\n    let status = statData();\n    for(let k in status)\n        state[k]=status[k];\n\n    */\n}\n\n\nif(msg.action == \"poll\"){\n    /*\n    let allStatusOutput = {payload:{}};\n    let allProdExcOutput = {payload:{}};\n    for(let k in state){\n        if(/^status_/.test(k))\n            allStatusOutput.payload[k]=state[k];\n        else\n            allProdExcOutput.payload[k] = state[k];\n    }\n    node.send([null, null, allProdExcOutput,allStatusOutput])\n    */\n}\n//emulate cycle state changes\nelse if(msg.action==\"start\"){\n    if(state.prod_cycleRun)\n        node.error(\"received start when already running\");\n    //set state\n    state.prod_cycleRun=true;\n    state.prod_cycleNumber++;\n    state.prod_id = state.exc_id;\n    state.exc_status = 1;\n    state.prod_quantProd = 2;\n    state.exc_quantProd += state.prod_quantProd;\n    //emulate completion routine\n        //msg.eta = completion delay ms\n        //default delay = 5000ms\n    setTimeout((state)=>{\n        node.warn(\"cycleOff\");\n        state.prod_cycleRun=false;\n        \n        //state.prod_id = \"\";\n        let esito = Math.random() < 0.8;\n        if(esito){\n            state.exc_status = 3; // 'C'\n        }\n        else{\n            state.exc_status = 2; // 'P'\n            state.exc_quantProd -= state.prod_quantProd;\n        }\n        node.warn(esito);\n        let request={};\n        request.payload = new Array();\n        request.variable = new Array();\n        //create write request for this node //avoid async shenanigans from context.set()\n        for(let k in state){\n            request.payload.push(state[k]);\n            request.variable.push(k);\n        }\n        request.action=\"writeAll\";\n        /*\n        var allProdExc={};\n        for (let k in state) {\n            if (!/^status_/.test(k))\n                allProdExc[k] = state[k];\n        }\n        */\n        node.send([{topic:\"allProdExc\",payload:state},{topic:\"cycleOff\",payload:state},request])\n    },msg.eta ?? 5000,state);\n    /*\n    var allProdExc = {};\n    for (let k in state) {\n        if (!/^status_/.test(k))\n            allProdExc[k] = state[k];\n    }*/\n    node.warn(\"cycleOn\");\n    node.send([{topic:\"allProdExc\",payload:state}, null, null]);\n}\n//read all //outputs an obj\nelse if(!msg.action || msg.action==\"readAll\"){\n    let allStatusOutput = { payload:{} };\n    let allProdExcOutput = { payload: {} };\n\n    /*for(let k in state){\n        if(/^status_/.test(k))\n            allStatusOutput.payload[k]=state[k];\n        else\n            allProdExcOutput.payload[k] = state[k];\n    }*/\n    \n    msg.payload=state;\n    delete msg.action;\n\n    node.warn(\"readAll\");\n    node.send([msg,null,null]);\n}\nelse if (msg.action == \"writeAllStatus\") {\n    let status=context.get(\"status\");\n    if (msg.variable.length) {\n        //node.warn(\"writeAllStatus\");\n        for (let i = 0; i < msg.variable.length; i++) {\n            //node.warn({ write: msg.payload[i], to: msg.variable[i] });\n            status[msg.variable[i]] = msg.payload[i];\n        }\n    }\n    context.set(\"status\",status);\n    node.warn({ statusGoneTo: status });\n}\n//else write what's in variable\nelse{\n    \n    if (msg.variable.length) {\n        //node.warn(\"writeAll\");\n        for (let i=0;i<msg.variable.length;i++) {\n            //node.warn({write:msg.payload[i],to:msg.variable[i]});\n            state[msg.variable[i]] = msg.payload[i];\n        }\n    }\n    node.warn({stateGoneTo:state});\n}\n\n\ncontext.set(\"state\",state);",
        "outputs": 4,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n\ncontext.set(\"status\", {\n    status_alife: false,\n    status_cycleActive: false,\n    status_emergency: false,\n    status_idraulicCmd: false,\n    status_idPressa: 1234,\n    status_pressPressata: 0,\n    status_tempPianoSup: 0,\n    status_tempPianoInf: 0\n});\n\n\n//generate status changes\nlet id = setInterval(() => {\n    let last = context.get(\"state\") ?? context.get(\"status\");\n    if (!last)\n        node.error(\"context undefined\");\n\n    let status = {\n        \"status_alife\": !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random() * 350,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    status.status_tempPianoSup = Math.random() * (2 * status.status_pressPressata);\n    status.status_tempPianoInf = status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup;\n\n    //create write request for this node\n    let request = {};\n    request.payload = new Array();\n    request.variable = new Array();\n    let keys = Object.keys(status);\n    //node.warn({\"req keys\":keys});\n    for (let k of keys) {\n        //node.warn({s:status,\"k\":k,item:status[k]});\n        request.payload.push(status[k]);\n        request.variable.push(k);\n    }\n    request.action=\"writeAllStatus\";\n    node.send([null, null, request,{payload:status}])\n\n}, 5000);\n\ncontext.set(\"intervalId\", id); //cleared in \"On stop\"\n\n",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 455,
        "wires": [
            [
                "5ce383fc8f203d80",
                "a188fac48c65b3be",
                "a42e22b6fe63c233",
                "3a395e9b79d9a1ef",
                "35096506cb7f5c4e"
            ],
            [
                "2b1f55ad3aabcc65"
            ],
            [
                "528adee0da78807c"
            ],
            [
                "416ca37ceaf57e14",
                "856c6c8e9fbd9ec1",
                "1fa3adddebc9c293",
                "4e0c1adaea343925",
                "7fefd0dc5ebd5ff7"
            ]
        ],
        "outputLabels": [
            "readOutput",
            "topic:cycleOn/cycleOff",
            "to self",
            ""
        ]
    },
    {
        "id": "528adee0da78807c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 540,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ],
        "l": false
    },
    {
        "id": "3950d474263fe0c5",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start cycle",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 595,
        "y": 440,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "d4f9793e37a6375a",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "action:poll 10s",
        "props": [
            {
                "p": "action",
                "v": "poll",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 520,
        "y": 525,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "fc5cb067036c4315",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "action:readAll",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "readAll",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 570,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "5ce383fc8f203d80",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "8c63b0896103090c",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1170,
        "y": 410,
        "wires": [],
        "l": true
    },
    {
        "id": "a188fac48c65b3be",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "all prodExc with topic:prodExc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 440,
        "wires": []
    },
    {
        "id": "2b1f55ad3aabcc65",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 380,
        "wires": [
            [
                "58bc8c7447e48a14"
            ]
        ]
    },
    {
        "id": "416ca37ceaf57e14",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "b6bc7095606ea745"
        ],
        "x": 1195,
        "y": 500,
        "wires": [],
        "l": true
    },
    {
        "id": "856c6c8e9fbd9ec1",
        "type": "debug",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 530,
        "wires": []
    },
    {
        "id": "a213156032b5e251",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 435,
        "wires": [
            [
                "0f6ad999ba80fa0f"
            ]
        ],
        "l": false
    },
    {
        "id": "382a6197f96e3cd0",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emuReadAll in",
        "links": [],
        "x": 420,
        "y": 570,
        "wires": [
            [
                "fc5cb067036c4315"
            ]
        ],
        "l": true
    },
    {
        "id": "cc59c1ac68580b95",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 485,
        "y": 610,
        "wires": [
            [
                "fc5cb067036c4315"
            ]
        ],
        "l": false
    },
    {
        "id": "58bc8c7447e48a14",
        "type": "delay",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "9dc8240d440f560b"
            ]
        ]
    },
    {
        "id": "7a21669f3c26b95c",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "toggle cycle loop",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "toggle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 335,
        "wires": [
            [
                "9dc8240d440f560b"
            ]
        ]
    },
    {
        "id": "7f7d732440d6aec6",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 335,
        "wires": [
            [
                "7a21669f3c26b95c"
            ]
        ],
        "l": false
    },
    {
        "id": "ab40650461f823e3",
        "type": "comment",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "utility: emulate plc self-contained, halfworking",
        "info": "",
        "x": 540,
        "y": 320,
        "wires": []
    },
    {
        "id": "164db36128db7462",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "OnStartup3",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 445,
        "y": 380,
        "wires": [
            [
                "3950d474263fe0c5"
            ]
        ]
    },
    {
        "id": "3112342511e963b8",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "sendToPress requests",
        "func": "\n\nvar write;\n\n//load order in plc\nif(msg.action == \"load\"){\n    write = {\n        \"exc_quantProd\":msg.payload.quantProd,\n        \"exc_quantToDo\":msg.payload.quantToDo,\n        \"exc_status\": 0,\n        \"exc_id\":msg.payload.id\n    }\n}\n//clear plc with placeholder values\nelse if(msg.action == \"clear\"){\n    write = {\n        \"exc_quantProd\": 0,\n        \"exc_quantToDo\": 0,\n        \"exc_status\":0,\n        \"exc_id\": \"\"\n    }\n}\nelse if(msg.action == \"nothing\"){\n    return null;\n}\n\n//build s7 request\nlet request = { payload: [], variable: [] };\nfor (let k in write) {\n    request.payload.push(write[k]);\n    request.variable.push(k);\n}\n//send msg as feedback on 2nd channel\nreturn [request, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 835,
        "y": 2525,
        "wires": [
            [
                "f83e49751218dc3f",
                "8f0ca2e92ed379a5",
                "d0e343c96a859730"
            ],
            [
                "a992bf0170cdc157"
            ]
        ]
    },
    {
        "id": "27be6fe227af16cc",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_prodExc",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 2210,
        "wires": [
            []
        ]
    },
    {
        "id": "214d0a5f9c40f7c2",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_exc_status",
                "pt": "flow",
                "to": "payload.exc_status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "7b1590892f6f2cf5",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "pressa1 sendToPressRequests in",
        "links": [
            "c90373ea81f269e7",
            "66b3788924f607a2",
            "297375027392a9b4",
            "6b4639f59bf141a0",
            "2b4384d6ab15617e"
        ],
        "x": 350,
        "y": 2525,
        "wires": [
            [
                "8d4c1528250e9b80"
            ]
        ],
        "l": true
    },
    {
        "id": "8d4c1528250e9b80",
        "type": "q-gate",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "keep last",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 635,
        "y": 2525,
        "wires": [
            [
                "3112342511e963b8"
            ]
        ]
    },
    {
        "id": "89b827b78086e83f",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 2465,
        "wires": [
            [
                "8d4c1528250e9b80"
            ]
        ]
    },
    {
        "id": "8f5de7d1e2efd275",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "exc_status",
        "property": "payload.exc_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 2450,
        "wires": [
            [
                "89b827b78086e83f"
            ],
            [
                "8c354411f4678925"
            ],
            [
                "89b827b78086e83f"
            ],
            [
                "89b827b78086e83f"
            ]
        ]
    },
    {
        "id": "8c354411f4678925",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 2435,
        "wires": [
            [
                "8d4c1528250e9b80"
            ]
        ]
    },
    {
        "id": "f83e49751218dc3f",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "endpoint": "34ec8711cb2e9270",
        "variable": "",
        "name": "writeTo prodExc",
        "x": 1095,
        "y": 2495,
        "wires": []
    },
    {
        "id": "2a9c9c49c94432d9",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "pressa1 allProdExc out",
        "mode": "link",
        "links": [
            "d09af2547970d46b",
            "2ef2e1ec9ad18993"
        ],
        "x": 650,
        "y": 2165,
        "wires": [],
        "l": true
    },
    {
        "id": "d09af2547970d46b",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "pressa1 allProdExc in",
        "links": [
            "2a9c9c49c94432d9"
        ],
        "x": 275,
        "y": 2450,
        "wires": [
            [
                "8f5de7d1e2efd275"
            ]
        ],
        "l": true
    },
    {
        "id": "98a76a1f9321a573",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "pressa1 connStatus",
        "scope": [
            "3b424968240bbd7c"
        ],
        "x": 600,
        "y": 2340,
        "wires": [
            [
                "b45882cc15a076be"
            ]
        ]
    },
    {
        "id": "b45882cc15a076be",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "21bbb7d46384e287",
        "name": "!= green",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 795,
        "y": 2340,
        "wires": [
            [
                "8c354411f4678925"
            ]
        ]
    },
    {
        "id": "a992bf0170cdc157",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "pressa1 sendToPressRequest done out",
        "mode": "link",
        "links": [
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "ee7df6ca341a90cc"
        ],
        "x": 1165,
        "y": 2540,
        "wires": [],
        "l": true
    },
    {
        "id": "3e4df8358764c8bf",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "poll prodExc pressa1",
        "info": "",
        "x": 285,
        "y": 1970,
        "wires": []
    },
    {
        "id": "f496db4601480ad7",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "pressa1_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "9890c53475b90fa6"
        ],
        "x": 915,
        "y": 1820,
        "wires": [],
        "l": true
    },
    {
        "id": "f361ef0e22514ae8",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "sendToPress requests pressa1",
        "info": "",
        "x": 320,
        "y": 2345,
        "wires": []
    },
    {
        "id": "c839a1cea19f06fc",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emuWrite in",
        "links": [
            "8f0ca2e92ed379a5",
            "504464c430ba7283",
            "c0a6f5a095ded7d3",
            "69b1ea7a62b8ffde",
            "a467d56466998dc7",
            "264c06f2fdf3b2df",
            "82ede1c062e87eb3",
            "d16297afbe03f8ba",
            "dd535bcb2b06deea",
            "0d08d91772b4a46f"
        ],
        "x": 415,
        "y": 485,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "8f0ca2e92ed379a5",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "emuWrite out",
        "mode": "link",
        "links": [
            "c839a1cea19f06fc",
            "7ac6e5493f61d4cd",
            "e0e81e80da5f8816"
        ],
        "x": 1085,
        "y": 2450,
        "wires": [],
        "l": true
    },
    {
        "id": "260b48d27cf6b812",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "0c753ce1969e7a11",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 405,
        "y": 2105,
        "wires": [
            [
                "f5cdb10387af4f40",
                "ca74a0de42a788ba",
                "27be6fe227af16cc",
                "214d0a5f9c40f7c2",
                "2a9c9c49c94432d9",
                "c23689e8b3ce4d15"
            ]
        ],
        "l": false
    },
    {
        "id": "9ceed6fd254ce510",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 480,
        "y": 1655,
        "wires": [
            [
                "e1d9dc50e8c79a8f"
            ]
        ],
        "l": false
    },
    {
        "id": "17ccce6813bb1513",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1820,
        "wires": [
            [
                "d1dbf0ba787aaf87",
                "765edce0c2be3f26"
            ]
        ],
        "l": false
    },
    {
        "id": "b6bc7095606ea745",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "e2bd9331f9185534",
        "name": "allStatus emuRead in",
        "links": [
            "416ca37ceaf57e14",
            "46c2b8c68937078c",
            "dfb6b94f3d572af5"
        ],
        "x": 300,
        "y": 1865,
        "wires": [
            [
                "17ccce6813bb1513"
            ]
        ],
        "l": true
    },
    {
        "id": "642b4cd1857e998b",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "send to status globals",
        "func": "\nif(msg.status && msg.status.fill && (typeof msg.status.fill) == \"string\")\n    return [{ payload: msg.status.fill }, { payload: msg.status.fill==\"green\" }]\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1490,
        "wires": [
            [
                "554553d14c4528a1"
            ],
            [
                "400413a022ab7c31"
            ]
        ],
        "l": false
    },
    {
        "id": "8c5c18cd60513a30",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a70fe69b7459b746",
        "name": "pressa1_allStatus",
        "scope": [
            "9ca5c05780dc2c19",
            "49e6d3e2af0723a8"
        ],
        "x": 280,
        "y": 1490,
        "wires": [
            [
                "642b4cd1857e998b"
            ]
        ]
    },
    {
        "id": "554553d14c4528a1",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 605,
        "y": 1475,
        "wires": [
            [
                "cff57bec7157bef0"
            ]
        ]
    },
    {
        "id": "400413a022ab7c31",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnIsOk",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 595,
        "y": 1505,
        "wires": [
            [
                "5c16a509de896e67"
            ]
        ]
    },
    {
        "id": "cff57bec7157bef0",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1 onConnStatusChange out",
        "mode": "link",
        "links": [],
        "x": 910,
        "y": 1475,
        "wires": [],
        "l": true
    },
    {
        "id": "5c16a509de896e67",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "pressa1 onConnIsOkChange out",
        "mode": "link",
        "links": [
            "3fcc6bd133bdfd43"
        ],
        "x": 910,
        "y": 1505,
        "wires": [],
        "l": true
    },
    {
        "id": "b0f4b6634f190f48",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "OnStartup0.1 setDefaults",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1230,
        "y": 1490,
        "wires": [
            [
                "f96b3c5023454e2b",
                "58387c00123218e3"
            ]
        ]
    },
    {
        "id": "58387c00123218e3",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnIsOk",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 1505,
        "wires": [
            []
        ]
    },
    {
        "id": "f96b3c5023454e2b",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "a70fe69b7459b746",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnStatus",
                "pt": "global",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 1475,
        "wires": [
            []
        ]
    },
    {
        "id": "2639fa3be4067762",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "63f089643e332739",
        "name": "plc pressa1",
        "info": "",
        "x": 240,
        "y": 1280,
        "wires": []
    },
    {
        "id": "6412ab5d90cfce0c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "sort data by press",
        "property": "press",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pressa1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 820,
        "wires": [
            [
                "66b3788924f607a2"
            ],
            [
                "17c1ab0431cd8ccc"
            ],
            [
                "1a030fa6a72f51d6"
            ],
            [
                "1be724ee4d388de3"
            ],
            [
                "a817f30ecf7302d4"
            ]
        ]
    },
    {
        "id": "a817f30ecf7302d4",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "error",
        "func": "node.error({ err: \"unknown press in mixed sort\", press: msg.press, msg: msg });\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "8cc8b8736d1102b3",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "mixed sendToPressRequests in",
        "links": [
            "abe96bc7d7fbc506",
            "c30ca4565e0d218f",
            "7c8bd303c63bc52d"
        ],
        "x": 290,
        "y": 820,
        "wires": [
            [
                "6412ab5d90cfce0c"
            ]
        ],
        "l": true
    },
    {
        "id": "66b3788924f607a2",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa1 sendToPressRequests out",
        "mode": "link",
        "links": [
            "7b1590892f6f2cf5"
        ],
        "x": 715,
        "y": 740,
        "wires": []
    },
    {
        "id": "8b321fcb911b77fd",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "sort press for sendToPressRequests",
        "info": "",
        "x": 320,
        "y": 740,
        "wires": []
    },
    {
        "id": "ee59f528d39b796f",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "action:writeAll",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "writeAll",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 585,
        "y": 485,
        "wires": [
            [
                "bd629777c9b54b8f"
            ]
        ]
    },
    {
        "id": "d0e343c96a859730",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "write to prodExc pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 2420,
        "wires": []
    },
    {
        "id": "c23689e8b3ce4d15",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "0c753ce1969e7a11",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 895,
        "y": 2210,
        "wires": [
            []
        ]
    },
    {
        "id": "a42e22b6fe63c233",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "8e9758acad3f2063",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1580,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "17c1ab0431cd8ccc",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa2 sendToPressRequests out",
        "mode": "link",
        "links": [
            "4e103e969b9f7d0b",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 715,
        "y": 780,
        "wires": []
    },
    {
        "id": "1fa3adddebc9c293",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "2c215d3ea4d110e9"
        ],
        "x": 1630,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "d7c994974930edc9",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "0be63189ee3d400d"
        ],
        "x": 230,
        "y": 520,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "1a030fa6a72f51d6",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa3 sendToPressRequests out",
        "mode": "link",
        "links": [
            "da493fa473ae1988",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 715,
        "y": 820,
        "wires": []
    },
    {
        "id": "3a395e9b79d9a1ef",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "6369e148ad4ba347",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1620,
        "y": 320,
        "wires": [],
        "l": true
    },
    {
        "id": "4e0c1adaea343925",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "6e49827f9cf44a2c"
        ],
        "x": 1670,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "0535e99eb9542659",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "0d08d91772b4a46f",
            "9b49d29e19e194f6"
        ],
        "x": 230,
        "y": 440,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "1be724ee4d388de3",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "ad333cdc3a9edd51",
        "name": "pressa4 sendToPressRequests out",
        "mode": "link",
        "links": [
            "54535349b75194e9",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 715,
        "y": 860,
        "wires": []
    },
    {
        "id": "35096506cb7f5c4e",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "d04018a4b190756c",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1660,
        "y": 280,
        "wires": [],
        "l": true
    },
    {
        "id": "7fefd0dc5ebd5ff7",
        "type": "link out",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "1e843a5590cd9b13"
        ],
        "x": 1710,
        "y": 620,
        "wires": [],
        "l": true
    },
    {
        "id": "2aa275dd861f9ccf",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "endpoint": "33b06a116480e90c",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "ifDiff -> all status 10s",
        "x": 2020,
        "y": 1820,
        "wires": [
            [
                "aa39133655d9b787"
            ]
        ]
    },
    {
        "id": "becbecad76166e9d",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "name": "pressa2 allStatus pressa2 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2395,
        "y": 1775,
        "wires": []
    },
    {
        "id": "0deac0f9f705f59a",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "name": "split with topic:varName",
        "func": "\nlet keys=Object.keys(msg.payload);\n//node.warn(keys);\n    //from status_alife:true   to {topic:alife, payload:true}\nlet out=[];\nfor(let k of keys){\n    node.send({\n        topic:k.match(/\\w+_(.+)/)[1],\n        payload:msg.payload[k],\n    })\n    //out.push({\n    //     topic: k.match(/\\w+_(.+)/)[1],\n    //    payload: msg.payload[k],\n    //});\n}\n\n//node.warn(out);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 1820,
        "wires": [
            [
                "19c5b907b8a99896"
            ]
        ]
    },
    {
        "id": "956b5b4d094f0125",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "name": "poll status pressa2",
        "info": "",
        "x": 2005,
        "y": 1775,
        "wires": []
    },
    {
        "id": "19c5b907b8a99896",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "name": "pressa2_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "56377c4577552212"
        ],
        "x": 2635,
        "y": 1820,
        "wires": [],
        "l": true
    },
    {
        "id": "aa39133655d9b787",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2180,
        "y": 1820,
        "wires": [
            [
                "becbecad76166e9d",
                "0deac0f9f705f59a"
            ]
        ],
        "l": false
    },
    {
        "id": "2c215d3ea4d110e9",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "23b242037b1d989d",
        "name": "allStatus emuRead in",
        "links": [
            "1fa3adddebc9c293"
        ],
        "x": 2020,
        "y": 1865,
        "wires": [
            [
                "aa39133655d9b787"
            ]
        ],
        "l": true
    },
    {
        "id": "d28033bff8f64efb",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "exc_status",
        "property": "payload.exc_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 2190,
        "y": 2450,
        "wires": [
            [
                "f05392340a92472a"
            ],
            [
                "c7d6011eb2792412"
            ],
            [
                "f05392340a92472a"
            ],
            [
                "f05392340a92472a"
            ]
        ]
    },
    {
        "id": "b8cd8815df4b9cda",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "pressa2 allProdExc in",
        "links": [
            "5650bd7882594c6c"
        ],
        "x": 1995,
        "y": 2450,
        "wires": [
            [
                "d28033bff8f64efb"
            ]
        ],
        "l": true
    },
    {
        "id": "c7d6011eb2792412",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2385,
        "y": 2435,
        "wires": [
            [
                "8daa2ecbbec7641e"
            ]
        ]
    },
    {
        "id": "f05392340a92472a",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2385,
        "y": 2465,
        "wires": [
            [
                "8daa2ecbbec7641e"
            ]
        ]
    },
    {
        "id": "b473a79df4ff304f",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "173f861c8cd401be",
        "name": "!= green",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2475,
        "y": 2355,
        "wires": [
            [
                "c7d6011eb2792412"
            ]
        ]
    },
    {
        "id": "8daa2ecbbec7641e",
        "type": "q-gate",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "keep last",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 2355,
        "y": 2525,
        "wires": [
            [
                "efc9e3e717cf27ba"
            ]
        ]
    },
    {
        "id": "c6e44fec67bad770",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "173f861c8cd401be",
        "name": "pressa2 connStatus",
        "scope": [
            "a4c307b888a951e2"
        ],
        "x": 2280,
        "y": 2355,
        "wires": [
            [
                "b473a79df4ff304f"
            ]
        ]
    },
    {
        "id": "4e103e969b9f7d0b",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "pressa2 sendToPressRequests in",
        "links": [
            "c90373ea81f269e7",
            "17c1ab0431cd8ccc",
            "297375027392a9b4",
            "6b4639f59bf141a0",
            "2b4384d6ab15617e"
        ],
        "x": 2070,
        "y": 2525,
        "wires": [
            [
                "8daa2ecbbec7641e"
            ]
        ],
        "l": true
    },
    {
        "id": "efc9e3e717cf27ba",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "sendToPress requests",
        "func": "\n\nvar write;\n\n//load order in plc\nif(msg.action == \"load\"){\n    write = {\n        \"exc_quantProd\":msg.payload.quantProd,\n        \"exc_quantToDo\":msg.payload.quantToDo,\n        \"exc_status\": 0,\n        \"exc_id\":msg.payload.id\n    }\n}\n//clear plc with placeholder values\nelse if(msg.action == \"clear\"){\n    write = {\n        \"exc_quantProd\": 0,\n        \"exc_quantToDo\": 0,\n        \"exc_status\":0,\n        \"exc_id\": \"\",\n    }\n}\nelse if(msg.action == \"nothing\"){\n    return null;\n}\n\n//build s7 request\nlet request = { payload: [], variable: [] };\nfor (let k in write) {\n    request.payload.push(write[k]);\n    request.variable.push(k);\n}\n//send msg as feedback on 2nd channel\nreturn [request, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2555,
        "y": 2525,
        "wires": [
            [
                "79eab282041abd4d",
                "0d08d91772b4a46f",
                "fca7034dd83115ce"
            ],
            [
                "597b8d08f336dbe5"
            ]
        ]
    },
    {
        "id": "79eab282041abd4d",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "endpoint": "1667e67dd14845f1",
        "variable": "",
        "name": "writeTo prodExc",
        "x": 2815,
        "y": 2495,
        "wires": []
    },
    {
        "id": "597b8d08f336dbe5",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "pressa2 sendToPressRequest done out",
        "mode": "link",
        "links": [
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "f3860e59347fd377"
        ],
        "x": 2885,
        "y": 2540,
        "wires": [],
        "l": true
    },
    {
        "id": "507cb64d15d2e613",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "sendToPress requests pressa2",
        "info": "",
        "x": 2040,
        "y": 2345,
        "wires": []
    },
    {
        "id": "0d08d91772b4a46f",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "emuWrite out",
        "mode": "link",
        "links": [
            "c839a1cea19f06fc",
            "0535e99eb9542659",
            "7ac6e5493f61d4cd",
            "e0e81e80da5f8816",
            "e2478e13b980611c"
        ],
        "x": 2805,
        "y": 2450,
        "wires": [],
        "l": true
    },
    {
        "id": "fca7034dd83115ce",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "write to prodExc pressa2 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 2420,
        "wires": []
    },
    {
        "id": "5650bd7882594c6c",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "pressa2 allProdExc out",
        "mode": "link",
        "links": [
            "b8cd8815df4b9cda",
            "2ef2e1ec9ad18993"
        ],
        "x": 2370,
        "y": 2165,
        "wires": [],
        "l": true
    },
    {
        "id": "a4c307b888a951e2",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "endpoint": "1667e67dd14845f1",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "all prodExc 10s",
        "x": 1995,
        "y": 2105,
        "wires": [
            [
                "6e46a705b20f7981"
            ]
        ]
    },
    {
        "id": "740937c2e6c2a904",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning=context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n    //lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning){\n    context.set(\"lastCycleIsRunning\",cycleIsRunning);\n    //on cycle beginning\n    if(cycleIsRunning){\n\n\n        node.send([msg,null]);\n    }\n    //on cycle end\n    else{\n\n\n        node.send([null, msg]);\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2355,
        "y": 2060,
        "wires": [
            [
                "74c9021b786ac79a"
            ],
            [
                "ca8804a273a54375",
                "10ca373128c765fb"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "13e87411d7638fc5",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "all prodExc pressa2 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2360,
        "y": 2120,
        "wires": []
    },
    {
        "id": "a00762f0d6cd69c4",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a3b8edad7fbf25b8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2_prodExc",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2370,
        "y": 2210,
        "wires": [
            []
        ]
    },
    {
        "id": "d6a43738c3c954f7",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a3b8edad7fbf25b8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2_exc_status",
                "pt": "flow",
                "to": "payload.exc_status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2385,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "8e9758acad3f2063",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "emuRead in",
        "links": [
            "a42e22b6fe63c233"
        ],
        "x": 2000,
        "y": 2150,
        "wires": [
            [
                "6e46a705b20f7981"
            ]
        ],
        "l": true
    },
    {
        "id": "74c9021b786ac79a",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "pressa2 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [],
        "x": 2685,
        "y": 2045,
        "wires": [],
        "l": true
    },
    {
        "id": "ca8804a273a54375",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "pressa2 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "2751f8a9a425be69",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a"
        ],
        "x": 2685,
        "y": 2090,
        "wires": [],
        "l": true
    },
    {
        "id": "10ca373128c765fb",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "oncePerCyc end pressa2 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 2135,
        "wires": []
    },
    {
        "id": "25a73b9db7b8a60a",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "poll prodExc pressa2",
        "info": "",
        "x": 2005,
        "y": 1970,
        "wires": []
    },
    {
        "id": "6e46a705b20f7981",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "a3b8edad7fbf25b8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2125,
        "y": 2105,
        "wires": [
            [
                "740937c2e6c2a904",
                "13e87411d7638fc5",
                "a00762f0d6cd69c4",
                "d6a43738c3c954f7",
                "5650bd7882594c6c",
                "797048def978921d"
            ]
        ],
        "l": false
    },
    {
        "id": "797048def978921d",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "a3b8edad7fbf25b8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2615,
        "y": 2210,
        "wires": [
            []
        ]
    },
    {
        "id": "8ea5cb4356c45bc7",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "90b855390ac72238",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 2155,
        "y": 1580,
        "wires": [
            [
                "ab48b4c5f87099ad"
            ]
        ]
    },
    {
        "id": "ab48b4c5f87099ad",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "90b855390ac72238",
        "name": "payload true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2375,
        "y": 1655,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4caddee93c71a5a9",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "90b855390ac72238",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 2155,
        "y": 1610,
        "wires": [
            [
                "ab48b4c5f87099ad"
            ]
        ]
    },
    {
        "id": "316ffc734d1d2d62",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "90b855390ac72238",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2200,
        "y": 1655,
        "wires": [
            [
                "ab48b4c5f87099ad"
            ]
        ],
        "l": false
    },
    {
        "id": "e2c6161b189af928",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "endpoint": "1667e67dd14845f1",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": true,
        "name": "ifDifferent -> prod_cycleRun",
        "x": 2050,
        "y": 1655,
        "wires": [
            [
                "316ffc734d1d2d62"
            ]
        ]
    },
    {
        "id": "4af794f99335ccfe",
        "type": "status",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "pressa2_allProdExc",
        "scope": [
            "2aa275dd861f9ccf",
            "e2c6161b189af928"
        ],
        "x": 2000,
        "y": 1430,
        "wires": [
            [
                "cc9eec14428b2731",
                "9e4c376d1cc0c44d",
                "088216a78f90bc21"
            ]
        ]
    },
    {
        "id": "cc9eec14428b2731",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "prodExc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 1430,
        "wires": [
            [
                "afade25048219b87"
            ]
        ]
    },
    {
        "id": "9e4c376d1cc0c44d",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2215,
        "y": 1400,
        "wires": [
            [
                "afade25048219b87"
            ]
        ]
    },
    {
        "id": "088216a78f90bc21",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "send to status globals",
        "func": "\nif(msg.status && msg.status.fill && (typeof msg.status.fill) == \"string\")\n    return [{ payload: msg.status.fill }, { payload: msg.status.fill==\"green\" }]\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1490,
        "wires": [
            [
                "2e719b14fb0ca611"
            ],
            [
                "1cf5b9cf5dcfd951"
            ]
        ],
        "l": false
    },
    {
        "id": "afade25048219b87",
        "type": "link call",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "parse Status",
        "links": [
            "ee85a2f48f8b5e02"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2445,
        "y": 1415,
        "wires": [
            [
                "7bddb7a234eef127"
            ]
        ]
    },
    {
        "id": "1855d43dc448ddb2",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "90b855390ac72238",
        "name": "pressa2_allStatus",
        "scope": [
            "e2c6161b189af928",
            "2aa275dd861f9ccf"
        ],
        "x": 2000,
        "y": 1400,
        "wires": [
            [
                "9e4c376d1cc0c44d"
            ]
        ]
    },
    {
        "id": "9e09bcccc9fd7ac5",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "90b855390ac72238",
        "name": "pressa2_allStatus",
        "scope": [
            "e2c6161b189af928",
            "2aa275dd861f9ccf"
        ],
        "x": 2000,
        "y": 1490,
        "wires": [
            [
                "088216a78f90bc21"
            ]
        ]
    },
    {
        "id": "2e719b14fb0ca611",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2ConnStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2325,
        "y": 1475,
        "wires": [
            [
                "e9bb6030f6732304"
            ]
        ]
    },
    {
        "id": "1cf5b9cf5dcfd951",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2ConnIsOk",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2315,
        "y": 1505,
        "wires": [
            [
                "87cfce336c5607c4"
            ]
        ]
    },
    {
        "id": "7bddb7a234eef127",
        "type": "trigger",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "merge 300ms",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "300",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2620,
        "y": 1415,
        "wires": [
            [
                "3f6cec0ad8030491"
            ]
        ]
    },
    {
        "id": "e9bb6030f6732304",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "pressa2 onConnStatusChange out",
        "mode": "link",
        "links": [],
        "x": 2630,
        "y": 1475,
        "wires": [],
        "l": true
    },
    {
        "id": "87cfce336c5607c4",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "pressa2 onConnIsOkChange out",
        "mode": "link",
        "links": [
            "bf5be8304044fb8d"
        ],
        "x": 2630,
        "y": 1505,
        "wires": [],
        "l": true
    },
    {
        "id": "3f6cec0ad8030491",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "pressa2_alife_dataIn_out",
        "mode": "link",
        "links": [
            "8ef946242380175e",
            "577869e151539f03"
        ],
        "x": 2840,
        "y": 1415,
        "wires": [],
        "l": true
    },
    {
        "id": "7284f43907fc62d5",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "OnStartup0.1 setDefaults",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 2950,
        "y": 1490,
        "wires": [
            [
                "3126cff55c2701d2",
                "c34dd01b4ac8ed2c"
            ]
        ]
    },
    {
        "id": "3126cff55c2701d2",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2ConnStatus",
                "pt": "global",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3220,
        "y": 1475,
        "wires": [
            []
        ]
    },
    {
        "id": "c34dd01b4ac8ed2c",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa2ConnIsOk",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3210,
        "y": 1505,
        "wires": [
            []
        ]
    },
    {
        "id": "3e2260e4d228e248",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "90b855390ac72238",
        "name": "track connection status pressa2",
        "info": "",
        "x": 2070,
        "y": 1355,
        "wires": []
    },
    {
        "id": "fe3da39d45bc7cd4",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "1999eebe26eba53b",
        "name": "plc pressa2",
        "info": "",
        "x": 1960,
        "y": 1280,
        "wires": []
    },
    {
        "id": "35770bc641499596",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "endpoint": "f84482f335843f79",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "ifDiff -> all status 10s",
        "x": 300,
        "y": 3240,
        "wires": [
            [
                "8c00bfe915de6596"
            ]
        ]
    },
    {
        "id": "cfdc7a55d0c91ce4",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "name": "pressa3 allStatus pressa3 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 675,
        "y": 3195,
        "wires": []
    },
    {
        "id": "f88f04ba0493a4b5",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "name": "split with topic:varName",
        "func": "\nlet keys=Object.keys(msg.payload);\n//node.warn(keys);\n    //from status_alife:true   to {topic:alife, payload:true}\nlet out=[];\nfor(let k of keys){\n    node.send({\n        topic:k.match(/\\w+_(.+)/)[1],\n        payload:msg.payload[k],\n    })\n    //out.push({\n    //     topic: k.match(/\\w+_(.+)/)[1],\n    //    payload: msg.payload[k],\n    //});\n}\n\n//node.warn(out);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 3240,
        "wires": [
            [
                "48f3a9fa6bc4b18e"
            ]
        ]
    },
    {
        "id": "9b02ecbf75701343",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "name": "poll status pressa3",
        "info": "",
        "x": 285,
        "y": 3195,
        "wires": []
    },
    {
        "id": "48f3a9fa6bc4b18e",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "name": "pressa3_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "f0e330b3f6e390be"
        ],
        "x": 915,
        "y": 3240,
        "wires": [],
        "l": true
    },
    {
        "id": "8c00bfe915de6596",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 3240,
        "wires": [
            [
                "cfdc7a55d0c91ce4",
                "f88f04ba0493a4b5"
            ]
        ],
        "l": false
    },
    {
        "id": "6e49827f9cf44a2c",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "03ef9a71f127822f",
        "name": "allStatus emuRead in",
        "links": [
            "4e0c1adaea343925"
        ],
        "x": 300,
        "y": 3285,
        "wires": [
            [
                "8c00bfe915de6596"
            ]
        ],
        "l": true
    },
    {
        "id": "e4d83352939e4c4a",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "exc_status",
        "property": "payload.exc_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 3870,
        "wires": [
            [
                "cca7df6602b1217a"
            ],
            [
                "89df21546261dd35"
            ],
            [
                "cca7df6602b1217a"
            ],
            [
                "cca7df6602b1217a"
            ]
        ]
    },
    {
        "id": "393c1f27d9c6c20d",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "pressa3 allProdExc in",
        "links": [
            "f6fb287fce3470c3"
        ],
        "x": 275,
        "y": 3870,
        "wires": [
            [
                "e4d83352939e4c4a"
            ]
        ],
        "l": true
    },
    {
        "id": "89df21546261dd35",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 3855,
        "wires": [
            [
                "860e5c547cecf5f9"
            ]
        ]
    },
    {
        "id": "cca7df6602b1217a",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 3885,
        "wires": [
            [
                "860e5c547cecf5f9"
            ]
        ]
    },
    {
        "id": "2b2cf606c296e602",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "8bc986f7994d89a7",
        "name": "!= green",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 795,
        "y": 3765,
        "wires": [
            [
                "89df21546261dd35"
            ]
        ]
    },
    {
        "id": "860e5c547cecf5f9",
        "type": "q-gate",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "keep last",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 635,
        "y": 3945,
        "wires": [
            [
                "e8c173d03c5227ed"
            ]
        ]
    },
    {
        "id": "f695bbdc498a93c1",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "8bc986f7994d89a7",
        "name": "pressa3 connStatus",
        "scope": [
            "bb1b97f50089b22d"
        ],
        "x": 600,
        "y": 3765,
        "wires": [
            [
                "2b2cf606c296e602"
            ]
        ]
    },
    {
        "id": "da493fa473ae1988",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "pressa3 sendToPressRequests in",
        "links": [
            "c90373ea81f269e7",
            "1a030fa6a72f51d6",
            "297375027392a9b4",
            "6b4639f59bf141a0",
            "2b4384d6ab15617e"
        ],
        "x": 350,
        "y": 3945,
        "wires": [
            [
                "860e5c547cecf5f9"
            ]
        ],
        "l": true
    },
    {
        "id": "e8c173d03c5227ed",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "sendToPress requests",
        "func": "\n\nvar write;\n\n//load order in plc\nif(msg.action == \"load\"){\n    write = {\n        \"exc_quantProd\":msg.payload.quantProd,\n        \"exc_quantToDo\":msg.payload.quantToDo,\n        \"exc_status\": 0,\n        \"exc_id\":msg.payload.id\n    }\n}\n//clear plc with placeholder values\nelse if(msg.action == \"clear\"){\n    write = {\n        \"exc_quantProd\": 0,\n        \"exc_quantToDo\": 0,\n        \"exc_status\":0,\n        \"exc_id\": \"\"\n    }\n}\nelse if(msg.action == \"nothing\"){\n    return null;\n}\n\n//build s7 request\nlet request = { payload: [], variable: [] };\nfor (let k in write) {\n    request.payload.push(write[k]);\n    request.variable.push(k);\n}\n//send msg as feedback on 2nd channel\nreturn [request, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 835,
        "y": 3945,
        "wires": [
            [
                "c0f863a3eee61ef2",
                "0be63189ee3d400d",
                "978547859b92dc4b"
            ],
            [
                "6deb423e38b82d31"
            ]
        ]
    },
    {
        "id": "c0f863a3eee61ef2",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "endpoint": "2c8ae7c7ae56a942",
        "variable": "",
        "name": "writeTo prodExc",
        "x": 1095,
        "y": 3915,
        "wires": []
    },
    {
        "id": "6deb423e38b82d31",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "pressa3 sendToPressRequest done out",
        "mode": "link",
        "links": [
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "8c2c42bc9a8767e9"
        ],
        "x": 1165,
        "y": 3960,
        "wires": [],
        "l": true
    },
    {
        "id": "8c21e5e10e5ae929",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "sendToPress requests pressa3",
        "info": "",
        "x": 320,
        "y": 3765,
        "wires": []
    },
    {
        "id": "0be63189ee3d400d",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "emuWrite out",
        "mode": "link",
        "links": [
            "d7c994974930edc9"
        ],
        "x": 1085,
        "y": 3870,
        "wires": [],
        "l": true
    },
    {
        "id": "978547859b92dc4b",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "write to prodExc pressa3 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 3840,
        "wires": []
    },
    {
        "id": "f6fb287fce3470c3",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "pressa3 allProdExc out",
        "mode": "link",
        "links": [
            "393c1f27d9c6c20d",
            "2ef2e1ec9ad18993"
        ],
        "x": 650,
        "y": 3585,
        "wires": [],
        "l": true
    },
    {
        "id": "bb1b97f50089b22d",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "endpoint": "2c8ae7c7ae56a942",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "all prodExc 10s",
        "x": 275,
        "y": 3525,
        "wires": [
            [
                "f5d2631c81929e16"
            ]
        ]
    },
    {
        "id": "f69efb660e9c4cd9",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning=context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n    //lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning){\n    context.set(\"lastCycleIsRunning\",cycleIsRunning);\n    //on cycle beginning\n    if(cycleIsRunning){\n\n\n        node.send([msg,null]);\n    }\n    //on cycle end\n    else{\n\n\n        node.send([null, msg]);\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 635,
        "y": 3480,
        "wires": [
            [
                "149895a36f22bfbd"
            ],
            [
                "9c82842ac58cdc40",
                "431e5b57039e7b91"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "edc049428c9a0d15",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "all prodExc pressa3 ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 3540,
        "wires": []
    },
    {
        "id": "2a18a1347862e606",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b1f8c54951ecbf7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3_prodExc",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 3630,
        "wires": [
            []
        ]
    },
    {
        "id": "cd1fadf1f3dfb869",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b1f8c54951ecbf7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3_exc_status",
                "pt": "flow",
                "to": "payload.exc_status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 665,
        "y": 3670,
        "wires": [
            []
        ]
    },
    {
        "id": "6369e148ad4ba347",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "emuRead in",
        "links": [
            "3a395e9b79d9a1ef"
        ],
        "x": 280,
        "y": 3570,
        "wires": [
            [
                "f5d2631c81929e16"
            ]
        ],
        "l": true
    },
    {
        "id": "149895a36f22bfbd",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "pressa3 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [],
        "x": 965,
        "y": 3465,
        "wires": [],
        "l": true
    },
    {
        "id": "9c82842ac58cdc40",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "pressa3 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "85e4a01c096f28a3",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a"
        ],
        "x": 965,
        "y": 3510,
        "wires": [],
        "l": true
    },
    {
        "id": "431e5b57039e7b91",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "oncePerCyc end pressa3 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 3555,
        "wires": []
    },
    {
        "id": "14764e9036425238",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "poll prodExc pressa3",
        "info": "",
        "x": 285,
        "y": 3390,
        "wires": []
    },
    {
        "id": "f5d2631c81929e16",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "b1f8c54951ecbf7f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 405,
        "y": 3525,
        "wires": [
            [
                "f69efb660e9c4cd9",
                "edc049428c9a0d15",
                "2a18a1347862e606",
                "cd1fadf1f3dfb869",
                "f6fb287fce3470c3",
                "eeb4753ae7fa02d4"
            ]
        ],
        "l": false
    },
    {
        "id": "eeb4753ae7fa02d4",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "b1f8c54951ecbf7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 895,
        "y": 3630,
        "wires": [
            []
        ]
    },
    {
        "id": "63453611971f3d19",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "84182d5ef898d336",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 435,
        "y": 3000,
        "wires": [
            [
                "b900d87e44861236"
            ]
        ]
    },
    {
        "id": "b900d87e44861236",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "84182d5ef898d336",
        "name": "payload true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 655,
        "y": 3075,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "61fb9090578aaa56",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "84182d5ef898d336",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 435,
        "y": 3030,
        "wires": [
            [
                "b900d87e44861236"
            ]
        ]
    },
    {
        "id": "67721c302a07a675",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "84182d5ef898d336",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 480,
        "y": 3075,
        "wires": [
            [
                "b900d87e44861236"
            ]
        ],
        "l": false
    },
    {
        "id": "64588e3ee83192c2",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "endpoint": "2c8ae7c7ae56a942",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": true,
        "name": "ifDifferent -> prod_cycleRun",
        "x": 330,
        "y": 3075,
        "wires": [
            [
                "67721c302a07a675"
            ]
        ]
    },
    {
        "id": "6f23177aad613c8f",
        "type": "status",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "pressa3_allProdExc",
        "scope": [
            "35770bc641499596",
            "64588e3ee83192c2"
        ],
        "x": 280,
        "y": 2850,
        "wires": [
            [
                "fe4c374017f08bd3",
                "4c09df805d508e41",
                "001e1f7a83660717"
            ]
        ]
    },
    {
        "id": "fe4c374017f08bd3",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "prodExc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 2850,
        "wires": [
            [
                "41608bbe96eea04e"
            ]
        ]
    },
    {
        "id": "4c09df805d508e41",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 2820,
        "wires": [
            [
                "41608bbe96eea04e"
            ]
        ]
    },
    {
        "id": "001e1f7a83660717",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "send to status globals",
        "func": "\nif(msg.status && msg.status.fill && (typeof msg.status.fill) == \"string\")\n    return [{ payload: msg.status.fill }, { payload: msg.status.fill==\"green\" }]\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2910,
        "wires": [
            [
                "327e0602d5a8462d"
            ],
            [
                "1db74943b5bef2f6"
            ]
        ],
        "l": false
    },
    {
        "id": "41608bbe96eea04e",
        "type": "link call",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "parse Status",
        "links": [
            "ee85a2f48f8b5e02"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 725,
        "y": 2835,
        "wires": [
            [
                "049ac79541ad4413"
            ]
        ]
    },
    {
        "id": "13568d34822d6ad0",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "84182d5ef898d336",
        "name": "pressa3_allStatus",
        "scope": [
            "64588e3ee83192c2",
            "35770bc641499596"
        ],
        "x": 280,
        "y": 2820,
        "wires": [
            [
                "4c09df805d508e41"
            ]
        ]
    },
    {
        "id": "696ae9fe8eec60dc",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "84182d5ef898d336",
        "name": "pressa3_allStatus",
        "scope": [
            "64588e3ee83192c2",
            "35770bc641499596"
        ],
        "x": 280,
        "y": 2910,
        "wires": [
            [
                "001e1f7a83660717"
            ]
        ]
    },
    {
        "id": "327e0602d5a8462d",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3ConnStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 605,
        "y": 2895,
        "wires": [
            [
                "308e107ff18efd35"
            ]
        ]
    },
    {
        "id": "1db74943b5bef2f6",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3ConnIsOk",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 595,
        "y": 2925,
        "wires": [
            [
                "6ae61918d70a7846"
            ]
        ]
    },
    {
        "id": "049ac79541ad4413",
        "type": "trigger",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "merge 300ms",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "300",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 2835,
        "wires": [
            [
                "548a681fbbc5aad6"
            ]
        ]
    },
    {
        "id": "308e107ff18efd35",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "pressa3 onConnStatusChange out",
        "mode": "link",
        "links": [],
        "x": 910,
        "y": 2895,
        "wires": [],
        "l": true
    },
    {
        "id": "6ae61918d70a7846",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "pressa3 onConnIsOkChange out",
        "mode": "link",
        "links": [
            "d6ab043204728962"
        ],
        "x": 910,
        "y": 2925,
        "wires": [],
        "l": true
    },
    {
        "id": "548a681fbbc5aad6",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "pressa3_alife_dataIn_out",
        "mode": "link",
        "links": [
            "8ef946242380175e",
            "db544c8a4e4b5a6f"
        ],
        "x": 1120,
        "y": 2835,
        "wires": [],
        "l": true
    },
    {
        "id": "501da9d6dfe1e80f",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "OnStartup0.1 setDefaults",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1230,
        "y": 2910,
        "wires": [
            [
                "6f6a7159fe26f467",
                "5d55d3de5fe5b070"
            ]
        ]
    },
    {
        "id": "6f6a7159fe26f467",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3ConnStatus",
                "pt": "global",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 2895,
        "wires": [
            []
        ]
    },
    {
        "id": "5d55d3de5fe5b070",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa3ConnIsOk",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 2925,
        "wires": [
            []
        ]
    },
    {
        "id": "e2f828fbb4d401b7",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "84182d5ef898d336",
        "name": "track connection status pressa3",
        "info": "",
        "x": 350,
        "y": 2775,
        "wires": []
    },
    {
        "id": "c59fa5143bd96e16",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "72376f020cbdd7b4",
        "name": "plc pressa3",
        "info": "",
        "x": 240,
        "y": 2700,
        "wires": []
    },
    {
        "id": "f2d66bf3b277d261",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "endpoint": "e370eb0b4862e638",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "ifDiff -> all status 10s",
        "x": 2020,
        "y": 3240,
        "wires": [
            [
                "ee622422a25bee9c"
            ]
        ]
    },
    {
        "id": "f35268cf0b40df60",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "name": "pressa4 allStatus pressa4 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2395,
        "y": 3195,
        "wires": []
    },
    {
        "id": "e7419c65bb4928a5",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "name": "split with topic:varName",
        "func": "\nlet keys=Object.keys(msg.payload);\n//node.warn(keys);\n    //from status_alife:true   to {topic:alife, payload:true}\nlet out=[];\nfor(let k of keys){\n    node.send({\n        topic:k.match(/\\w+_(.+)/)[1],\n        payload:msg.payload[k],\n    })\n    //out.push({\n    //     topic: k.match(/\\w+_(.+)/)[1],\n    //    payload: msg.payload[k],\n    //});\n}\n\n//node.warn(out);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 3240,
        "wires": [
            [
                "1c8e2807d1b49302"
            ]
        ]
    },
    {
        "id": "dffe6c043ef8160b",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "name": "poll status pressa4",
        "info": "",
        "x": 2005,
        "y": 3195,
        "wires": []
    },
    {
        "id": "1c8e2807d1b49302",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "name": "pressa4_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "f53db4bd109ccc20"
        ],
        "x": 2635,
        "y": 3240,
        "wires": [],
        "l": true
    },
    {
        "id": "ee622422a25bee9c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2180,
        "y": 3240,
        "wires": [
            [
                "f35268cf0b40df60",
                "e7419c65bb4928a5"
            ]
        ],
        "l": false
    },
    {
        "id": "1e843a5590cd9b13",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "2fa2db606a6d80c1",
        "name": "allStatus emuRead in",
        "links": [
            "7fefd0dc5ebd5ff7"
        ],
        "x": 2020,
        "y": 3285,
        "wires": [
            [
                "ee622422a25bee9c"
            ]
        ],
        "l": true
    },
    {
        "id": "a717df37705cef2c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "exc_status",
        "property": "payload.exc_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 2190,
        "y": 3870,
        "wires": [
            [
                "a213694ed4b70a3a"
            ],
            [
                "06e7a8e921cb5e06"
            ],
            [
                "a213694ed4b70a3a"
            ],
            [
                "a213694ed4b70a3a"
            ]
        ]
    },
    {
        "id": "c44f9ab73cb08602",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "pressa4 allProdExc in",
        "links": [
            "a20de16f23ee9499"
        ],
        "x": 1995,
        "y": 3870,
        "wires": [
            [
                "a717df37705cef2c"
            ]
        ],
        "l": true
    },
    {
        "id": "06e7a8e921cb5e06",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2385,
        "y": 3855,
        "wires": [
            [
                "da224406e361ebab"
            ]
        ]
    },
    {
        "id": "a213694ed4b70a3a",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2385,
        "y": 3885,
        "wires": [
            [
                "da224406e361ebab"
            ]
        ]
    },
    {
        "id": "e1ae5eb40e0884e5",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "92109e084c266e2e",
        "name": "!= green",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2490,
        "y": 3765,
        "wires": [
            [
                "06e7a8e921cb5e06"
            ]
        ]
    },
    {
        "id": "da224406e361ebab",
        "type": "q-gate",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "keep last",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 2355,
        "y": 3945,
        "wires": [
            [
                "013ae9f8e0dd4a36"
            ]
        ]
    },
    {
        "id": "69b86625ca749702",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "92109e084c266e2e",
        "name": "pressa4 connStatus",
        "scope": [
            "0a18813d0305d84e"
        ],
        "x": 2295,
        "y": 3765,
        "wires": [
            [
                "e1ae5eb40e0884e5"
            ]
        ]
    },
    {
        "id": "54535349b75194e9",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "pressa4 sendToPressRequests in",
        "links": [
            "c90373ea81f269e7",
            "1be724ee4d388de3",
            "297375027392a9b4",
            "6b4639f59bf141a0",
            "2b4384d6ab15617e"
        ],
        "x": 2070,
        "y": 3945,
        "wires": [
            [
                "da224406e361ebab"
            ]
        ],
        "l": true
    },
    {
        "id": "013ae9f8e0dd4a36",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "sendToPress requests",
        "func": "\n\nvar write;\n\n//load order in plc\nif(msg.action == \"load\"){\n    write = {\n        \"exc_quantProd\":msg.payload.quantProd,\n        \"exc_quantToDo\":msg.payload.quantToDo,\n        \"exc_status\": 0,\n        \"exc_id\":msg.payload.id\n    }\n}\n//clear plc with placeholder values\nelse if(msg.action == \"clear\"){\n    write = {\n        \"exc_quantProd\": 0,\n        \"exc_quantToDo\": 0,\n        \"exc_status\": 0,\n        \"exc_id\": \"\"\n    }\n}\nelse if(msg.action == \"nothing\"){\n    return null;\n}\n\n//build s7 request\nlet request = { payload: [], variable: [] };\nfor (let k in write) {\n    request.payload.push(write[k]);\n    request.variable.push(k);\n}\n//send msg as feedback on 2nd channel\nreturn [request, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2555,
        "y": 3945,
        "wires": [
            [
                "4ef25541b10aa843",
                "9b49d29e19e194f6",
                "9fc8ccc030dc3641"
            ],
            [
                "e645d7e9aa1008c1"
            ]
        ]
    },
    {
        "id": "4ef25541b10aa843",
        "type": "s7 out",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "endpoint": "85571a3195fe3b68",
        "variable": "",
        "name": "writeTo prodExc",
        "x": 2815,
        "y": 3915,
        "wires": []
    },
    {
        "id": "e645d7e9aa1008c1",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "pressa4 sendToPressRequest done out",
        "mode": "link",
        "links": [
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "645349eefb80cd73"
        ],
        "x": 2885,
        "y": 3960,
        "wires": [],
        "l": true
    },
    {
        "id": "e82406673c719651",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "sendToPress requests pressa4",
        "info": "",
        "x": 2040,
        "y": 3765,
        "wires": []
    },
    {
        "id": "9b49d29e19e194f6",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "emuWrite out",
        "mode": "link",
        "links": [
            "0535e99eb9542659"
        ],
        "x": 2805,
        "y": 3870,
        "wires": [],
        "l": true
    },
    {
        "id": "9fc8ccc030dc3641",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "write to prodExc pressa4 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 3840,
        "wires": []
    },
    {
        "id": "a20de16f23ee9499",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "pressa4 allProdExc out",
        "mode": "link",
        "links": [
            "c44f9ab73cb08602",
            "2ef2e1ec9ad18993"
        ],
        "x": 2370,
        "y": 3585,
        "wires": [],
        "l": true
    },
    {
        "id": "0a18813d0305d84e",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "endpoint": "85571a3195fe3b68",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "all prodExc 10s",
        "x": 1995,
        "y": 3525,
        "wires": [
            [
                "8644950d8041497c"
            ]
        ]
    },
    {
        "id": "f9babd569c1f7564",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning=context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n    //lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning){\n    context.set(\"lastCycleIsRunning\",cycleIsRunning);\n    //on cycle beginning\n    if(cycleIsRunning){\n\n\n        node.send([msg,null]);\n    }\n    //on cycle end\n    else{\n\n\n        node.send([null, msg]);\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2355,
        "y": 3480,
        "wires": [
            [
                "d97bbbd307bf77f1"
            ],
            [
                "bf32410fd1d62452",
                "f3d216315cebd257"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "1d23d193bc6f89c2",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "all prodExc pressa4 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2360,
        "y": 3540,
        "wires": []
    },
    {
        "id": "1740d5f49432b053",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "f396ce22bbf03344",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4_prodExc",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2370,
        "y": 3630,
        "wires": [
            []
        ]
    },
    {
        "id": "36da649317cb2937",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "f396ce22bbf03344",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4_exc_status",
                "pt": "flow",
                "to": "payload.exc_status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2385,
        "y": 3670,
        "wires": [
            []
        ]
    },
    {
        "id": "d04018a4b190756c",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "emuRead in",
        "links": [
            "35096506cb7f5c4e"
        ],
        "x": 2000,
        "y": 3570,
        "wires": [
            [
                "8644950d8041497c"
            ]
        ],
        "l": true
    },
    {
        "id": "d97bbbd307bf77f1",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "pressa4 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [],
        "x": 2685,
        "y": 3465,
        "wires": [],
        "l": true
    },
    {
        "id": "bf32410fd1d62452",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "pressa4 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "92d32ee8e1251cea",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a"
        ],
        "x": 2685,
        "y": 3510,
        "wires": [],
        "l": true
    },
    {
        "id": "f3d216315cebd257",
        "type": "debug",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "oncePerCyc end pressa4 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 3555,
        "wires": []
    },
    {
        "id": "f1363d23ca917a8f",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "poll prodExc pressa4",
        "info": "",
        "x": 2005,
        "y": 3390,
        "wires": []
    },
    {
        "id": "8644950d8041497c",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "f396ce22bbf03344",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2125,
        "y": 3525,
        "wires": [
            [
                "f9babd569c1f7564",
                "1d23d193bc6f89c2",
                "1740d5f49432b053",
                "36da649317cb2937",
                "a20de16f23ee9499",
                "9271fcc188c35603"
            ]
        ],
        "l": false
    },
    {
        "id": "9271fcc188c35603",
        "type": "change",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "f396ce22bbf03344",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2615,
        "y": 3630,
        "wires": [
            []
        ]
    },
    {
        "id": "a396a9b49590bbce",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 2155,
        "y": 3000,
        "wires": [
            [
                "4f6e2d2f77c9c209"
            ]
        ]
    },
    {
        "id": "4f6e2d2f77c9c209",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "77f0a4e1ac50f8a4",
        "name": "payload true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2375,
        "y": 3075,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "33c1acc2433e1122",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 2155,
        "y": 3030,
        "wires": [
            [
                "4f6e2d2f77c9c209"
            ]
        ]
    },
    {
        "id": "bb3d0b3ebbe7398e",
        "type": "switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 2200,
        "y": 3075,
        "wires": [
            [
                "4f6e2d2f77c9c209"
            ]
        ],
        "l": false
    },
    {
        "id": "459430cfd2021fdd",
        "type": "s7 in",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "endpoint": "85571a3195fe3b68",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": true,
        "name": "ifDifferent -> prod_cycleRun",
        "x": 2050,
        "y": 3075,
        "wires": [
            [
                "bb3d0b3ebbe7398e"
            ]
        ]
    },
    {
        "id": "e456fbdaebba25f0",
        "type": "status",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "pressa4_allProdExc",
        "scope": [
            "f2d66bf3b277d261",
            "459430cfd2021fdd"
        ],
        "x": 2000,
        "y": 2850,
        "wires": [
            [
                "5ba21fe78d07c3c4",
                "27cdfa3dbde6e831",
                "86a8bf1372a40fa9"
            ]
        ]
    },
    {
        "id": "5ba21fe78d07c3c4",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "prodExc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 2850,
        "wires": [
            [
                "13a65bed22718218"
            ]
        ]
    },
    {
        "id": "27cdfa3dbde6e831",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2215,
        "y": 2820,
        "wires": [
            [
                "13a65bed22718218"
            ]
        ]
    },
    {
        "id": "86a8bf1372a40fa9",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "send to status globals",
        "func": "\nif(msg.status && msg.status.fill && (typeof msg.status.fill) == \"string\")\n    return [{ payload: msg.status.fill }, { payload: msg.status.fill==\"green\" }]\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2910,
        "wires": [
            [
                "b7da3375b9b7a1fc"
            ],
            [
                "469b0a017b0d25fb"
            ]
        ],
        "l": false
    },
    {
        "id": "13a65bed22718218",
        "type": "link call",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "parse Status",
        "links": [
            "ee85a2f48f8b5e02"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2445,
        "y": 2835,
        "wires": [
            [
                "2b480f8b64ccde4f"
            ]
        ]
    },
    {
        "id": "b65ca0c53d201e7f",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "77f0a4e1ac50f8a4",
        "name": "pressa4_allStatus",
        "scope": [
            "459430cfd2021fdd",
            "f2d66bf3b277d261"
        ],
        "x": 2000,
        "y": 2820,
        "wires": [
            [
                "27cdfa3dbde6e831"
            ]
        ]
    },
    {
        "id": "a66dcbcb8229db28",
        "type": "status",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "77f0a4e1ac50f8a4",
        "name": "pressa4_allStatus",
        "scope": [
            "459430cfd2021fdd",
            "f2d66bf3b277d261"
        ],
        "x": 2000,
        "y": 2910,
        "wires": [
            [
                "86a8bf1372a40fa9"
            ]
        ]
    },
    {
        "id": "b7da3375b9b7a1fc",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4ConnStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2325,
        "y": 2895,
        "wires": [
            [
                "d445f9704062558e"
            ]
        ]
    },
    {
        "id": "469b0a017b0d25fb",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4ConnIsOk",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2315,
        "y": 2925,
        "wires": [
            [
                "45a85fe063d44e76"
            ]
        ]
    },
    {
        "id": "2b480f8b64ccde4f",
        "type": "trigger",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "merge 300ms",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "300",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2620,
        "y": 2835,
        "wires": [
            [
                "6f19710f17bed7d2"
            ]
        ]
    },
    {
        "id": "d445f9704062558e",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "pressa4 onConnStatusChange out",
        "mode": "link",
        "links": [],
        "x": 2630,
        "y": 2895,
        "wires": [],
        "l": true
    },
    {
        "id": "45a85fe063d44e76",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "pressa4 onConnIsOkChange out",
        "mode": "link",
        "links": [
            "4f1ca0cf23a0a432"
        ],
        "x": 2630,
        "y": 2925,
        "wires": [],
        "l": true
    },
    {
        "id": "6f19710f17bed7d2",
        "type": "link out",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "pressa4_alife_dataIn_out",
        "mode": "link",
        "links": [
            "8ef946242380175e",
            "6fe7854ecacb208f"
        ],
        "x": 2840,
        "y": 2835,
        "wires": [],
        "l": true
    },
    {
        "id": "a0b720e643dc308e",
        "type": "inject",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "OnStartup0.1 setDefaults",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 2950,
        "y": 2910,
        "wires": [
            [
                "f1ac4813e4312e33",
                "5d24eb67ed0be076"
            ]
        ]
    },
    {
        "id": "f1ac4813e4312e33",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4ConnStatus",
                "pt": "global",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3220,
        "y": 2895,
        "wires": [
            []
        ]
    },
    {
        "id": "5d24eb67ed0be076",
        "type": "change",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa4ConnIsOk",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3210,
        "y": 2925,
        "wires": [
            []
        ]
    },
    {
        "id": "f85d708655d2dde8",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "77f0a4e1ac50f8a4",
        "name": "track connection status pressa4",
        "info": "",
        "x": 2070,
        "y": 2775,
        "wires": []
    },
    {
        "id": "35b7fdc595f7d3c5",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "560b01ff2e88daac",
        "name": "plc pressa4",
        "info": "",
        "x": 1960,
        "y": 2700,
        "wires": []
    },
    {
        "id": "e2478e13b980611c",
        "type": "link in",
        "z": "9922a8114f46702b",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "0d08d91772b4a46f"
        ],
        "x": 230,
        "y": 560,
        "wires": [
            [
                "ee59f528d39b796f"
            ]
        ],
        "l": true
    },
    {
        "id": "3d31803aef992266",
        "type": "comment",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "silence s7 endpoints timeouts (conn failed)",
        "info": "",
        "x": 360,
        "y": 55,
        "wires": []
    },
    {
        "id": "85ef1e45805265d5",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "81fdc4e21618ea8e",
        "name": "switch",
        "func": "\n\nif(msg.error && msg.error.source.type == \"s7 endpoint\" )\n    return [null,msg]   //to (silenced) catchPlc\nelse\n    return [msg,null]; //to catch all",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "9dbec7cb448f90d2"
            ],
            [
                "09f63ed09817f46d"
            ]
        ]
    },
    {
        "id": "78c6b35445bf1217",
        "type": "catch",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "",
        "scope": [
            "6a2f84e5a6053bfa",
            "41608bbe96eea04e",
            "13a65bed22718218",
            "afade25048219b87"
        ],
        "uncaught": false,
        "x": 740,
        "y": 1140,
        "wires": [
            [
                "6e645e2849c474eb"
            ]
        ]
    },
    {
        "id": "6e645e2849c474eb",
        "type": "function",
        "z": "9922a8114f46702b",
        "g": "408c86b39f332966",
        "name": "silence timeouts",
        "func": "\n\nif(msg.error){\n    if (msg.error.message !== \"timeout\")\n        node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "9dc8240d440f560b",
        "type": "gate",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1040,
        "y": 380,
        "wires": [
            [
                "3950d474263fe0c5"
            ]
        ],
        "l": false
    },
    {
        "id": "3fcc6bd133bdfd43",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "pressa1 onConnIsOkChange in",
        "links": [
            "5c16a509de896e67"
        ],
        "x": 340,
        "y": 2385,
        "wires": [
            [
                "3f9469575ed20a91"
            ]
        ],
        "l": true
    },
    {
        "id": "3f9469575ed20a91",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "21bbb7d46384e287",
        "name": "== false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 555,
        "y": 2385,
        "wires": [
            [
                "8c354411f4678925"
            ],
            []
        ]
    },
    {
        "id": "add3ea452ae91bde",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "== false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 525,
        "y": 3810,
        "wires": [
            [
                "89df21546261dd35"
            ],
            []
        ]
    },
    {
        "id": "d6ab043204728962",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "8bc986f7994d89a7",
        "name": "pressa3 onConnIsOkChange in",
        "links": [
            "6ae61918d70a7846"
        ],
        "x": 310,
        "y": 3810,
        "wires": [
            [
                "add3ea452ae91bde"
            ]
        ],
        "l": true
    },
    {
        "id": "3ec753ef55a31566",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "== false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2250,
        "y": 3810,
        "wires": [
            [
                "06e7a8e921cb5e06"
            ],
            []
        ]
    },
    {
        "id": "4f1ca0cf23a0a432",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "92109e084c266e2e",
        "name": "pressa1 onConnIsOkChange in",
        "links": [
            "45a85fe063d44e76"
        ],
        "x": 2035,
        "y": 3810,
        "wires": [
            [
                "3ec753ef55a31566"
            ]
        ],
        "l": true
    },
    {
        "id": "eec38691272ed5d2",
        "type": "switch",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "== false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2250,
        "y": 2400,
        "wires": [
            [
                "c7d6011eb2792412"
            ],
            []
        ]
    },
    {
        "id": "bf5be8304044fb8d",
        "type": "link in",
        "z": "9922a8114f46702b",
        "g": "173f861c8cd401be",
        "name": "pressa2 onConnIsOkChange in",
        "links": [
            "87cfce336c5607c4"
        ],
        "x": 2030,
        "y": 2400,
        "wires": [
            [
                "eec38691272ed5d2"
            ]
        ],
        "l": true
    },
    {
        "id": "bf98577d363cef6f",
        "type": "ui_switch",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "",
        "label": "switch",
        "tooltip": "simula ogni 10 secondi",
        "group": "77dcdddb4f97461c",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1085,
        "y": 330,
        "wires": [
            [
                "9dc8240d440f560b"
            ]
        ]
    },
    {
        "id": "0f6ad999ba80fa0f",
        "type": "ui_button",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "emulateCycButton",
        "group": "77dcdddb4f97461c",
        "order": 3,
        "width": "1",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "simula singolo ciclo",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-play",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 465,
        "y": 435,
        "wires": [
            [
                "3950d474263fe0c5"
            ]
        ],
        "l": false
    },
    {
        "id": "8943b4549c5df00c",
        "type": "inject",
        "z": "9922a8114f46702b",
        "d": true,
        "g": "dd28804963c0bc60",
        "name": "OnStartup3 : defaultClose",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "close",
        "payloadType": "str",
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "bf98577d363cef6f"
            ]
        ]
    },
    {
        "id": "44f67bb2be82ec09",
        "type": "function",
        "z": "538b483fa008eb58",
        "d": true,
        "name": "uiAbs",
        "func": "\nlet tabs=[];\nlet groups=[];\nlet tree=[];\n\nconst json=msg.payload;\n    //estract tabs and groups to sorted arrays\nfor(let item of json){\n    if(item.type==\"ui_tab\")\n        tabs.push(item);\n    else if(item.type==\"ui_group\")\n        groups.push(item);\n}\n\ntabs.sort((a,b)=>{\n    return (!a.order || a.order<b.order) ? -1 : 1\n});\ngroups.sort((a, b) => {\n    if(a.tab == b.tab)\n        return (!a.order || a.order < b.order) ? -1 : 1;\n    else\n        return (!a.tab < b.tab) ? -1 : 1;\n})\n\n\n    //costruisce il nameId che dashboard si aspetta a partire dall'attuale nome del gruppo/tab\nconst commonGetter = function (obj) {\n    if (!obj.currentNameIdBkp){\n        Math.random()>0.8 || node.warn({getterObjIs:obj});\n        obj.currentNameIdBkp = obj.currentName.trim().replaceAll(/\\s/g, '_');\n    }\n    return obj.currentNameIdBkp\n}\nconst dict/*ionary*/ = [\n    {\n        nameId: \"statoPresse\", id: \"533e203349de7f15\", currentName: \"StatoPresse\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter, groups: [\n            { nameId: \"pressa1\", id: \"de425a720011e6e9\", currentName: \"Pressa 1\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"pressa2\", id: \"f139ce507b5170da\", currentName: \"Pressa 2\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"pressa3\", id: \"c7137b451efabbac\", currentName: \"Pressa 3\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"pressa4\", id: \"13ed847e2817179c\", currentName: \"Pressa 4\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"tmpTools\", id: \"dc04b0c0c2689120\", currentName: \"tmpTools\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n        ]\n    },\n    {\n        nameId: \"graficiDiStato\", id: \"2d4a37310a5ce249\", currentName: \"Grafici di Stato\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter, groups: [\n            { nameId: \"pressa1\", id: \"57ea1d8425ab2254\", currentName: \"Pressa 1\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"group2\", id: \"4d2175afadb4dc79\", currentName: \"Group 2\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n        ]\n    },\n    {\n        nameId: \"gestioneOrdini\", id: \"836adb2b4d67f4ce\", currentName: \"Gestione Ordini\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter, groups: [\n            { nameId: \"queueTable\", id: \"77dcdddb4f97461c\", currentName: \"queueTable\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"historyTable\", id: \"b3c076eedf1fd2f8\", currentName: \"historyTable\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"toolBar\", id: \"ee2c7bc51cebda0e\", currentName: \"ToolBar\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"exampleTable\", id: \"6de891276c04fcd6\", currentName: \"exampleTable\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"completedTable\", id: \"b7f5c766a413446a\", currentName: \"completedTable\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n        ]\n    },\n    {\n        nameId: \"impostazioni\", id: \"a5b84c011240052c\", currentName: \"Impostazioni\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter, groups: [\n            { nameId: \"indicatoreDiTemperaturaPianoInferiore\", id: \"db63de8125d253b0\", currentName: \"Indicatore di temperatura piano inferiore\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"indicatoreDiTemperaturaPianoSuperiore\", id: \"a2dc8e5cbc92778b\", currentName: \"Indicatore di Temperatura Piano Superiore\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n            { nameId: \"indicatorePressioneDiPressata\", id: \"d6dcf6dea0234745\", currentName: \"indicatore pressione di pressata\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter },\n        ]\n    }\n];\n\n    //update dictionary names with current ones\nfor(let dictTab of dict){\n        //retrieve tabs names\n    for (let treeTab of tabs){\n        if(treeTab.id==dictTab.id){\n            dictTab.currentName=treeTab.name;\n            break;\n        }\n    }\n    if(!dictTab.currentName)\n        node.warn(\"id \"+dictTab.id+\" of tab \".dictTab.nId+\" not found\");\n    \n        //retrieve groups names\n    for(let dictGroup of dictTab.groups){\n        for (let treeGroup of groups) {\n            if (treeGroup.id == dictGroup.id) {\n                dictGroup.currentName = treeGroup.name;\n                break;\n            }\n        }\n        if (!dictGroup.currentName)\n            node.warn(\"id \" + dictGroup.id + \" of group \".dictGroup.nId + \" of \"+dictTab.nId+\" not found\");\n    }\n}\n/*\nlet finDict={}\nfor(let dictTab of dict){\n    if(finDict.hasOwnProperty(dictTab.nId))\n        node.warn(dictTab.nId+\" of \"+dictTab.currentName+\" is used twice\");\n    else\n        finDict[dictTab.nId].dictTab;\n}\n*/\n\n//Object.defineProperty(o, 'b', { get() { return this.a + 1; } });\n\nconst uiAbs={\n    //tabs:tabs,\n    //groups:groups\n    //tree:[],\n    dict:dict,\n\n    realNId(tabNId,groupNId){\n        for (let t of this.dict){\n            if (t.nameId == tabNId){\n                if(groupNId){\n                    for(let g of t.groups){\n                        if(g.nameId == groupNId)\n                            return t.currentNameId+'_'+g.currentNameId;\n                    }\n                    node.error(\"missing group \"+groupNId+\" from dictionary\");\n                    return \"\";\n                }\n                else\n                    return t.currentNameId;\n            }\n        }\n        node.error(\"missing tab \" + tabNId + \" from dictionary\");\n        return \"\";\n        //return dict[t].currentNameId+'_'+dict[t].groups[g].currentNameId;\n    }\n}\n\nglobal.set(\"uiAbs\",uiAbs);\nnode.warn(uiAbs);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 815,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "695d3eefce518dfc",
        "type": "file in",
        "z": "538b483fa008eb58",
        "d": true,
        "name": "",
        "filename": "..\\flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 240,
        "wires": [
            [
                "a712c940a9c38e4e"
            ]
        ]
    },
    {
        "id": "a712c940a9c38e4e",
        "type": "json",
        "z": "538b483fa008eb58",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 675,
        "y": 240,
        "wires": [
            [
                "44f67bb2be82ec09"
            ]
        ]
    },
    {
        "id": "180c17dd118f9a2f",
        "type": "function",
        "z": "538b483fa008eb58",
        "name": "utility:generate dictionary from current ui names",
        "func": "\n\nconst commonGetter = function (obj) {\n    if (!obj.currentNameIdBkp)\n        obj.currentNameIdBkp = obj.currentName.trim().replaceAll(/\\s/g, '_');\n    return obj.currentNameIdBkp\n}\n\n    //a gOod example -> aGOodExample\nfunction toCamelCase(str) {\n    return str.replace(/^(.)/, (m, chr) => chr.toLowerCase()).replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase()).replace(/\\s+/g, '');\n}\n\nfunction newDictEntry(item) {\n    let nId = toCamelCase(item.name.trim());\n    return { nameId: nId, id: item.id, currentName: item.name, get currentNameId() { return this.getter(this) }, currentNameIdBkp: \"\", getter: commonGetter }\n}\n//!! misses the trailing }\nfunction newDictEntry_asString(item) {\n    let nId = toCamelCase(item.name.trim());\n    return \"{ nameId:\\\"\" + nId + \"\\\", id:\\\"\" + item.id + \"\\\" , currentName:\\\"\" + item.name + \"\\\", get currentNameId() { return this.getter(this) }, currentNameIdBkp: \\\"\\\", getter: commonGetter \";\n}\n\n    //extract tabs and groups to sorted arrays\nfunction extractTabsAndGroups(flowJson){\n    let json = flowJson;\n    var tabs = [];\n    var groups = [];\n    var dict = \"\";\n\n    for (let item of json) {\n        if (item.type == \"ui_tab\")\n            tabs.push(item);\n        else if (item.type == \"ui_group\")\n            groups.push(item);\n    }\n\n    tabs.sort((a, b) => {\n        return (!a.order || a.order < b.order) ? -1 : 1\n    });\n    groups.sort((a, b) => {\n        if (a.tab == b.tab)\n            return (!a.order || a.order < b.order) ? -1 : 1;\n        else\n            return (!a.tab < b.tab) ? -1 : 1;\n    });\n\n    return {tabs:tabs,groups:groups};\n}\n\n\nfunction generateDictionaryFromCurrentNames(flowJson) {\n        //extract tabs and groups to sorted arrays\n    const ui=extractTabsAndGroups(flowJson);\n    var tabs=ui.tabs;\n    var groups=ui.groups;\n    var dict=new Array();\n\n    //generate dictionary\n    var tmpTabEntry;\n    for (let tab of tabs) {\n        tmpTabEntry = newDictEntry(tab);\n        tmpTabEntry.groups = new Array();\n        for (let group of groups)\n            if(group.tab == tab.id)\n                tmpTabEntry.groups.push(newDictEntry(group));\n        dict.push(tmpTabEntry);\n    }\n    \n    return dict;\n   \n}\n\nfunction generateDictionaryFromCurrentNames_asString(flowJson) {\n        //extract tabs and groups to sorted arrays\n    const ui = extractTabsAndGroups(flowJson);\n    var tabs = ui.tabs;\n    var groups = ui.groups;\n    var dict = \"\";\n\n    //generate dictionary\n    var tmpTabEntry;\n    var tmpGroupList;\n    dict+=\"[\\n\";\n    for (let tab of tabs) {\n        tmpTabEntry = \"\\t\"+newDictEntry_asString(tab);\n            //create group indented list\n        tmpGroupList = \"\";\n        for (let group of groups)\n            if (group.tab == tab.id)\n                tmpGroupList+=\"\\t\\t\"+newDictEntry_asString(group)+\"},\\n\";\n            //put all togheter\n        dict += tmpTabEntry + \", groups:[\" + (tmpGroupList ? \"\\n\"+tmpGroupList: \"\")+ \"\\t]},\\n\";\n    }\n    //dict = dict.replace(/..$/,'\\n]'); //trailing ,\\n -> \\n]\n    dict+=\"]\";\n    \n    //copy-paste this, editing whatever you need to\n    return dict;\n}\n\nfunction updateDictionaryFromCurrentNames(flowJson,dict) {\n   \n    return dict;\n}\n\n\nif(msg.topic==\"generate\"){\n    node.warn({ generatedSample: generateDictionaryFromCurrentNames(msg.payload) });\n\n    //copy-paste this, editing whatever you need to\n    return {payload: generateDictionaryFromCurrentNames_asString(msg.payload)};\n}else{\n    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "12b95adfa06776f9"
            ]
        ]
    },
    {
        "id": "2743a7c881bc8cbb",
        "type": "file in",
        "z": "538b483fa008eb58",
        "name": "",
        "filename": "..\\flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 315,
        "y": 420,
        "wires": [
            [
                "1952e1a3f7468577"
            ]
        ]
    },
    {
        "id": "1952e1a3f7468577",
        "type": "json",
        "z": "538b483fa008eb58",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 575,
        "y": 420,
        "wires": [
            [
                "180c17dd118f9a2f"
            ]
        ],
        "l": false
    },
    {
        "id": "1e3ef1f67b0a40c2",
        "type": "inject",
        "z": "538b483fa008eb58",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "generate",
        "x": 155,
        "y": 405,
        "wires": [
            [
                "2743a7c881bc8cbb"
            ]
        ]
    },
    {
        "id": "12b95adfa06776f9",
        "type": "file",
        "z": "538b483fa008eb58",
        "name": "",
        "filename": "..\\generatedDictionary.tmp.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1165,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7d42a7676bdaf780",
        "type": "exec",
        "z": "538b483fa008eb58",
        "command": "start notepad++ .\\.node-red\\generatedDictionary.tmp.js",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 505,
        "y": 525,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f4a2e4a0aeb2a934",
        "type": "complete",
        "z": "538b483fa008eb58",
        "name": "",
        "scope": [
            "12b95adfa06776f9"
        ],
        "uncaught": false,
        "x": 160,
        "y": 525,
        "wires": [
            [
                "7d42a7676bdaf780"
            ]
        ]
    },
    {
        "id": "452d46ec7a9f4467",
        "type": "comment",
        "z": "538b483fa008eb58",
        "name": "utility to generate a dictionary for uiAbstraction. useful for first time setup",
        "info": "",
        "x": 320,
        "y": 360,
        "wires": []
    },
    {
        "id": "0f7707130eec9350",
        "type": "inject",
        "z": "538b483fa008eb58",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 155,
        "y": 435,
        "wires": [
            [
                "2743a7c881bc8cbb"
            ]
        ]
    },
    {
        "id": "61e156149ff048c5",
        "type": "ui_ui_control",
        "z": "538b483fa008eb58",
        "name": "",
        "events": "all",
        "x": 725,
        "y": 150,
        "wires": [
            []
        ]
    },
    {
        "id": "b8f2b2bcea7430ea",
        "type": "function",
        "z": "538b483fa008eb58",
        "name": "toggle smt",
        "func": "const ui=global.get(\"uiAbs\");\n\nlet toggle = context.get(\"toggle\")\ncontext.set(\"toggle\",!toggle);\n\nif(toggle){\n    msg.payload = {\n        \"group\": {\n            \"hide\": [ui.realNId(\"fotovoltaico\", \"tmpEditingBar\")],\n            \"focus\": true\n        }\n    }\n}else{\n    msg.payload = {\n        \"group\": {\n            \"show\": [ui.realNId(\"fotovoltaico\", \"tmpEditingBar\")],\n            \"focus\": true\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 150,
        "wires": [
            [
                "61e156149ff048c5"
            ]
        ]
    },
    {
        "id": "2454ad34c86ce96b",
        "type": "inject",
        "z": "538b483fa008eb58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 150,
        "wires": [
            [
                "b8f2b2bcea7430ea"
            ]
        ]
    },
    {
        "id": "642c982a954658f9",
        "type": "inject",
        "z": "538b483fa008eb58",
        "d": true,
        "name": "OnStartup0.1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "695d3eefce518dfc"
            ]
        ]
    },
    {
        "id": "42b8d6d1.fc68e8",
        "type": "ui_template",
        "z": "6f31d3b30c01f78f",
        "group": "de425a720011e6e9",
        "name": "Logo / Clock",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script id=\"clockScript1\" type=\"text/javascript\">\n    var clockInterval;\n    $(function () {\n        if (clockInterval) return;\n\n        \n\n\n        var logoContainer = document.createElement(\"div\");\n        logoContainer.style.margin = \"5px auto\";\n        //logoContainer.style.marginBottom = \"0px\";\n        \n        var imgCont = document.createElement(\"span\");\n        logoContainer.append(imgCont);\n        imgCont.style.position = \"relative\";\n        imgCont.style.top = \"5px\";\n\n        var imgCont2 = document.createElement(\"span\");\n        imgCont2.style.marginLeft=\"30px\";\n        logoContainer.append(imgCont2);\n\n        logoGiga = new Image();\n        logoGiga.src = \"/loghi/giga/logoGiga.png\";\n        logoGiga.height = 30;\n        logoContainer.children[1].append(logoGiga);\n\n        \n        logoItal = new Image();\n        logoItal.src = \"/loghi/italmatic/logoItalmatic.png\";\n        logoItal.height = 30;\n        logoContainer.children[0].append(logoItal);\n\n        //add clock\n        var div2 = $('<div/>');\n        var p = $('<p/>');\n\n        div2.append(p);\n        div2[0].style.margin = '5px';\n\n        function displayTime() {\n            p.text(new Date().toLocaleString());\n        }\n        \n        clockInterval = setInterval(displayTime, 1000);\n\n        //add to toolbar when it's available\n        var addToToolbarTimer;\n        \n        function addToToolbar() {\n            var toolbar = $('.md-toolbar-tools');\n            \n            if(!toolbar.length) return;\n            \n            toolbar.append(logoContainer);\n            toolbar.append(div2);\n            clearInterval(addToToolbarTimer);\n        }\n        addToToolbarTimer = setInterval(addToToolbar, 100);\n    });\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 220,
        "y": 90,
        "wires": [
            []
        ]
    }
]